openapi: 3.0.0
info:
  title: notebooksd
  version: 1.0.0
servers:
  - url: /api/v2private
paths:
  '/flows/orgs/{orgID}/flows':
    get:
      summary: get all Notebook records in org
      operationId: getAllNotebooks
      tags:
        - Notebooks
      parameters:
        - name: orgID
          in: path
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: returns all Notebook records in org
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebooks'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: creates a Notebook
      operationId: createNotebook
      tags:
        - Notebooks
      requestBody:
        $ref: '#/components/requestBodies/NotebookParams'
      produces:
        - application/json
      responses:
        '200':
          description: Notebook created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
  '/flows/orgs/{orgID}/flows/{id}':
    get:
      summary: get single Notebook by its ID
      operationId: getNotebook
      tags:
        - Notebooks
      parameters:
        - name: orgID
          in: path
          type: string
        - name: id
          in: path
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: returns the Notebook record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: deletes a single Notebook by its ID
      operationId: deleteNotebook
      tags:
        - Notebooks
      parameters:
        - name: orgID
          in: path
          type: string
        - name: id
          in: path
          type: string
      produces:
        - application/json
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: update a single Notebook by its ID
      operationId: updateNotebook
      tags:
        - Notebooks
      parameters:
        - name: orgID
          in: path
          type: string
        - name: id
          in: path
          type: string
      requestBody:
        $ref: '#/components/requestBodies/NotebookParams'
      produces:
        - application/json
      responses:
        '200':
          description: returns the Notebook record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: update a single Notebook by its ID
      operationId: updateNotebook
      tags:
        - Notebooks
      parameters:
        - name: orgID
          in: path
          type: string
        - name: id
          in: path
          type: string
      requestBody:
        $ref: '#/components/requestBodies/NotebookParams'
      produces:
        - application/json
      responses:
        '200':
          description: returns the Notebook record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
  /notebooks:
    get:
      summary: get all Notebook records in org
      operationId: getAllNotebooks
      tags:
        - Notebooks
      parameters:
        - name: orgID
          in: query
          type: string
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: returns all Notebook records in org
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebooks'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: creates a Notebook
      operationId: createNotebook
      tags:
        - Notebooks
      requestBody:
        $ref: '#/components/requestBodies/NotebookParams'
      produces:
        - application/json
      responses:
        '200':
          description: Notebook created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
  '/notebooks/{id}':
    get:
      summary: get single Notebook by its ID
      operationId: getNotebook
      tags:
        - Notebooks
      parameters:
        - name: id
          in: path
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: returns the Notebook record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: deletes a single Notebook by its ID
      operationId: deleteNotebook
      tags:
        - Notebooks
      parameters:
        - name: id
          in: path
          type: string
      produces:
        - application/json
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: update a single Notebook by its ID
      operationId: updateNotebook
      tags:
        - Notebooks
      parameters:
        - name: id
          in: path
          type: string
      requestBody:
        $ref: '#/components/requestBodies/NotebookParams'
      produces:
        - application/json
      responses:
        '200':
          description: returns the Notebook record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: update a single Notebook by its ID
      operationId: updateNotebook
      tags:
        - Notebooks
      parameters:
        - name: id
          in: path
          type: string
      requestBody:
        $ref: '#/components/requestBodies/NotebookParams'
      produces:
        - application/json
      responses:
        '200':
          description: returns the Notebook record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notebook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  requestBodies:
    NotebookParams:
      description: Notebook record
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotebookParams'
  schemas:
    NotebookParams:
      properties:
        name:
          type: string
        orgID:
          type: string
        spec:
          type: object
    Notebook:
      properties:
        id:
          type: string
        name:
          type: string
        orgID:
          type: string
        spec:
          type: object
        createdAt:
          type: date-time
        updatedAt:
          type: date-time
    NotebookArray:
      type: array
      items:
        $ref: '#/components/schemas/Notebook'
    Notebooks:
      properties:
        flows:
          type: array
          items:
            $ref: '#/components/schemas/Notebook'
  responses:
    NoContent:
      description: No content
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            properties:
              code:
                description: code is the machine-readable error code.
                readOnly: true
                type: string
                enum:
                  - internal error
                  - not found
                  - conflict
                  - invalid
                  - unprocessable entity
                  - empty value
                  - unavailable
                  - forbidden
                  - too many requests
                  - unauthorized
                  - method not allowed
                  - request too large
              message:
                readOnly: true
                description: message is a human-readable message.
                type: string
              op:
                readOnly: true
                description: op describes the logical code operation during error. Useful for debugging.
                type: string
              err:
                readOnly: true
                description: err is a stack of errors that occurred during processing of the request. Useful for debugging.
                type: string
            required:
              - code
              - message
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/responses/BadRequest/content/application~1json/schema'
    NotAllowed:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/responses/BadRequest/content/application~1json/schema'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/responses/BadRequest/content/application~1json/schema'
