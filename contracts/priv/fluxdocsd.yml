openapi: 3.0.0
info:
  title: fluxdocsd
  version: 1.0.0
servers:
  - url: /api/v2private
paths:
  /fluxdocs:
    get:
      summary: get all records
      operationId: getFluxdocs
      responses:
        '200':
          description: all records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FluxdocsArray'
        '401':
          $ref: '#/components/responses/ServerError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: creates a record
      operationId: createFluxdocs
      requestBody:
        $ref: '#/components/requestBodies/FluxdocsParams'
      responses:
        '200':
          description: returns the id of the new record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fluxdocs'
        '400':
          $ref: '#/components/responses/ServerError'
        '401':
          $ref: '#/components/responses/ServerError'
        '500':
          $ref: '#/components/responses/ServerError'
  '/fluxdocs/{id}':
    get:
      summary: get single record by its ID
      operationId: getFluxdocs
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: returns the record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fluxdocs'
        '400':
          $ref: '#/components/responses/ServerError'
        '401':
          $ref: '#/components/responses/ServerError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: deletes a single record by its ID
      operationId: deleteFluxdocs
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/ServerError'
        '401':
          $ref: '#/components/responses/ServerError'
        '404':
          $ref: '#/components/responses/ServerError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: update a single record by its ID
      operationId: putFluxdocs
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        $ref: '#/components/requestBodies/FluxdocsParams'
      responses:
        '200':
          description: returns the record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fluxdocs'
        '400':
          $ref: '#/components/responses/ServerError'
        '401':
          $ref: '#/components/responses/ServerError'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: update a single record by its ID
      operationId: patchFluxdocs
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        $ref: '#/components/requestBodies/FluxdocsParams'
      responses:
        '200':
          description: returns the record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fluxdocs'
        '400':
          $ref: '#/components/responses/ServerError'
        '401':
          $ref: '#/components/responses/ServerError'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  requestBodies:
    FluxdocsParams:
      description: Fluxdocs record
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fluxdocs'
  schemas:
    Fluxdocs:
      required:
        - path
        - package
        - name
        - kind
        - headline
        - fluxType
      properties:
        path:
          type: string
        package:
          type: string
        name:
          type: string
        kind:
          type: string
        headline:
          type: string
        fluxType:
          type: string
        description:
          type: string
        fluxParameters:
          type: array
          items:
            $ref: '#/components/schemas/FluxdocsParameters'
    FluxdocsArray:
      type: array
      items:
        $ref: '#/components/schemas/Fluxdocs'
    FluxdocsParameters:
      required:
        - headline
        - name
        - required
      properties:
        description:
          type: string
        headline:
          type: string
        name:
          type: string
        required:
          type: boolean
    Error:
      properties:
        code:
          description: code is the machine-readable error code.
          readOnly: true
          type: string
          enum:
            - internal error
            - not found
            - conflict
            - invalid
            - unprocessable entity
            - empty value
            - unavailable
            - forbidden
            - too many requests
            - unauthorized
            - method not allowed
            - request too large
            - unsupported media type
        message:
          readOnly: true
          description: message is a human-readable message.
          type: string
        op:
          readOnly: true
          description: op describes the logical code operation during error. Useful for debugging.
          type: string
        err:
          readOnly: true
          description: err is a stack of errors that occurred during processing of the request. Useful for debugging.
          type: string
      required:
        - code
        - message
  responses:
    NoContent:
      description: No content
    ServerError:
      description: Non 2XX error response from server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
