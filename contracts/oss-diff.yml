openapi: 3.0.0
info:
  title: InfluxDB OSS API Service
  version: 2.0.0
  description: |
    The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: /api/v2
paths:
  /debug/pprof/all:
    get:
      operationId: GetDebugPprofAllProfiles
      tags:
        - Debug
        - System information endpoints
      summary: Retrieve all runtime profiles
      description: |
        Collects samples and returns reports for the following [Go runtime profiles](https://pkg.go.dev/runtime/pprof):

        - **allocs**: All past memory allocations
        - **block**: Stack traces that led to blocking on synchronization primitives
        - **cpu**: (Optional) Program counters sampled from the executing stack.
          Include by passing the `cpu` query parameter with a [duration]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#duration) value.
          Equivalent to the report from [`GET /debug/pprof/profile?seconds=NUMBER_OF_SECONDS`](#operation/GetDebugPprofProfile).
        - **goroutine**: All current goroutines
        - **heap**: Memory allocations for live objects
        - **mutex**: Holders of contended mutexes
        - **threadcreate**: Stack traces that led to the creation of new OS threads
      x-codeSamples:
        - lang: Shell
          label: 'Shell: Get all profiles'
          source: |
            # Download and extract a `tar.gz` of all profiles after 10 seconds of CPU sampling.

            curl "http://localhost:8086/debug/pprof/all?cpu=10s" | tar -xz

            # x profiles/cpu.pb.gz
            # x profiles/goroutine.pb.gz
            # x profiles/block.pb.gz
            # x profiles/mutex.pb.gz
            # x profiles/heap.pb.gz
            # x profiles/allocs.pb.gz
            # x profiles/threadcreate.pb.gz

            # Analyze a profile.

            go tool pprof profiles/heap.pb.gz
        - lang: Shell
          label: 'Shell: Get all profiles except CPU'
          source: |
            # Download and extract a `tar.gz` of all profiles except CPU.

            curl http://localhost:8086/debug/pprof/all | tar -xz

            # x profiles/goroutine.pb.gz
            # x profiles/block.pb.gz
            # x profiles/mutex.pb.gz
            # x profiles/heap.pb.gz
            # x profiles/allocs.pb.gz
            # x profiles/threadcreate.pb.gz

            # Analyze a profile.

            go tool pprof profiles/heap.pb.gz
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: cpu
          description: |
            Collects and returns CPU profiling data for the specified [duration]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#duration).
          schema:
            type: string
            format: duration
            externalDocs:
              description: InfluxDB duration
              url: 'https://docs.influxdata.com/influxdb/latest/reference/glossary/#duration'
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) reports.
          content:
            application/octet-stream:
              schema:
                description: |
                  GZIP compressed TAR file (`.tar.gz`) that contains
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) reports.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /debug/pprof/allocs:
    get:
      operationId: GetDebugPprofAllocs
      tags:
        - Debug
        - System information endpoints
      summary: Retrieve the memory allocations runtime profile
      description: |
        Returns a [Go runtime profile](https://pkg.go.dev/runtime/pprof) report of
        all past memory allocations.
        **allocs** is the same as the **heap** profile,
        but changes the default [pprof](https://pkg.go.dev/runtime/pprof)
        display to __-alloc_space__,
        the total number of bytes allocated since the program began (including garbage-collected bytes).
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/allocs

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            # At the prompt, get the top N memory allocations.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /debug/pprof/block:
    get:
      operationId: GetDebugPprofBlock
      tags:
        - Debug
        - System information endpoints
      summary: Retrieve the block runtime profile
      description: |
        Collects samples and returns a [Go runtime profile](https://pkg.go.dev/runtime/pprof)
        report of stack traces that led to blocking on synchronization primitives.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/block

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            #  At the prompt, get the top N entries.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /debug/pprof/cmdline:
    get:
      operationId: GetDebugPprofCmdline
      tags:
        - Debug
        - System information endpoints
      summary: Retrieve the command line invocation
      description: |
        Returns the command line that invoked InfluxDB.
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: Command line invocation.
          content:
            text/plain:
              schema:
                type: string
                format: Command line
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /debug/pprof/goroutine:
    get:
      operationId: GetDebugPprofGoroutine
      tags:
        - Debug
        - System information endpoints
      summary: Retrieve the goroutines runtime profile
      description: |
        Collects statistics and returns a [Go runtime profile](https://pkg.go.dev/runtime/pprof)
        report of all current goroutines.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/goroutine

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            #  At the prompt, get the top N entries.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as
                   human-readable text with comments that translate addresses to
                   function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /debug/pprof/heap:
    get:
      operationId: GetDebugPprofHeap
      tags:
        - Debug
        - System information endpoints
      summary: Retrieve the heap runtime profile
      description: |
        Collects statistics and returns a [Go runtime profile](https://pkg.go.dev/runtime/pprof)
        report of memory allocations for live objects.

        To run **garbage collection** before sampling,
        pass the `gc` query parameter with a value of `1`.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/heap

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            # At the prompt, get the top N memory-intensive nodes.

            (pprof) top10

            # pprof displays the list:
            #   Showing nodes accounting for 142.46MB, 85.43% of 166.75MB total
            #   Dropped 895 nodes (cum <= 0.83MB)
            #   Showing top 10 nodes out of 143
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
        - in: query
          name: gc
          description: |
            - `0`: (Default) don't force garbage collection before sampling.
            - `1`: Force garbage collection before sampling.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
              examples:
                profileDebugResponse:
                  summary: Profile in plain text
                  value: "heap profile: 12431: 137356528 [149885081: 846795139976] @ heap/8192\n23: 17711104 [46: 35422208] @ 0x4c6df65 0x4ce03ec 0x4cdf3c5 0x4c6f4db 0x4c9edbc 0x4bdefb3 0x4bf822a 0x567d158 0x567ced9 0x406c0a1\n#\t0x4c6df64\tgithub.com/influxdata/influxdb/v2/tsdb/engine/tsm1.(*entry).add+0x1a4\t\t\t\t\t/Users/me/github/influxdb/tsdb/engine/tsm1/cache.go:97\n#\t0x4ce03eb\tgithub.com/influxdata/influxdb/v2/tsdb/engine/tsm1.(*partition).write+0x2ab\t\t\t\t/Users/me/github/influxdb/tsdb/engine/tsm1/ring.go:229\n#\t0x4cdf3c4\tgithub.com/influxdata/influxdb/v2/tsdb/engine/tsm1.(*ring).write+0xa4\t\t\t\t\t/Users/me/github/influxdb/tsdb/engine/tsm1/ring.go:95\n#\t0x4c6f4da\tgithub.com/influxdata/influxdb/v2/tsdb/engine/tsm1.(*Cache).WriteMulti+0x31a\t\t\t\t/Users/me/github/influxdb/tsdb/engine/tsm1/cache.go:343\n"
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /debug/pprof/mutex:
    get:
      operationId: GetDebugPprofMutex
      tags:
        - Debug
        - System information endpoints
      summary: Retrieve the mutual exclusion (mutex) runtime profile
      description: |
        Collects statistics and returns a [Go runtime profile](https://pkg.go.dev/runtime/pprof) report of
        lock contentions.
        The profile contains stack traces of holders of contended mutual exclusions (mutexes).
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/mutex

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            #  At the prompt, get the top N entries.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /debug/pprof/profile:
    get:
      operationId: GetDebugPprofProfile
      tags:
        - Debug
        - System information endpoints
      summary: Retrieve the CPU runtime profile
      description: |
        Collects statistics and returns a [Go runtime profile](https://pkg.go.dev/runtime/pprof)
        report of program counters on the executing stack.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Download the profile report.

            curl http://localhost:8086/debug/pprof/profile -o cpu

            # Analyze the profile in interactive mode.

            go tool pprof ./cpu

            # At the prompt, get the top N functions most often running
            # or waiting during the sample period.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: seconds
          description: Number of seconds to collect profile data. Default is `30` seconds.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /debug/pprof/threadcreate:
    get:
      operationId: GetDebugPprofThreadCreate
      tags:
        - Debug
        - System information endpoints
      summary: Retrieve the threadcreate runtime profile
      description: |
        Collects statistics and returns a [Go runtime profile](https://pkg.go.dev/runtime/pprof)
        report of stack traces that led to the creation of new OS threads.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/threadcreate

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            #  At the prompt, get the top N entries.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
              examples:
                profileDebugResponse:
                  summary: Profile in plain text
                  value: "threadcreate profile: total 26\n25 @\n#\t0x0\n\n1 @ 0x403dda8 0x403e54b 0x403e810 0x403a90c 0x406c0a1\n#\t0x403dda7\truntime.allocm+0xc7\t\t\t/Users/me/.gvm/gos/go1.17/src/runtime/proc.go:1877\n#\t0x403e54a\truntime.newm+0x2a\t\t\t/Users/me/.gvm/gos/go1.17/src/runtime/proc.go:2201\n#\t0x403e80f\truntime.startTemplateThread+0x8f\t/Users/me/.gvm/gos/go1.17/src/runtime/proc.go:2271\n#\t0x403a90b\truntime.main+0x1cb\t\t\t/Users/me/.gvm/gos/go1.17/src/runtime/proc.go:234\n"
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /debug/pprof/trace:
    get:
      operationId: GetDebugPprofTrace
      tags:
        - Debug
        - System information endpoints
      summary: Retrieve the runtime execution trace
      description: |
        Collects profile data and returns trace execution events for the current program.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool trace'
          source: |
            # Download the trace file.

            curl http://localhost:8086/debug/pprof/trace -o trace

            # Analyze the trace.

            go tool trace ./trace
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: seconds
          description: Number of seconds to collect profile data.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Trace file](https://pkg.go.dev/runtime/trace) compatible
            with the [Golang `trace` command](https://pkg.go.dev/cmd/trace).
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                externalDocs:
                  description: Golang trace package
                  url: 'https://pkg.go.dev/runtime/trace'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /health:
    get:
      operationId: GetHealth
      tags:
        - Health
        - System information endpoints
      summary: Retrieve the health of the instance
      description: Returns the health of the instance.
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: |
            The instance is healthy.
            The response body contains the health check items and status.
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - status
                properties:
                  name:
                    type: string
                  message:
                    type: string
                  checks:
                    type: array
                    items:
                      $ref: '#/paths/~1health/get/responses/200/content/application~1json/schema'
                  status:
                    type: string
                    enum:
                      - pass
                      - fail
                  version:
                    type: string
                  commit:
                    type: string
        '503':
          description: The instance is unhealthy.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1health/get/responses/200/content/application~1json/schema'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /metrics:
    get:
      operationId: GetMetrics
      tags:
        - Metrics
        - System information endpoints
      summary: Retrieve workload performance metrics
      description: |
        Returns metrics about the workload performance of an InfluxDB instance.

        Use this endpoint to get performance, resource, and usage metrics.

        #### Related guides

        - For the list of metrics categories, see [InfluxDB OSS metrics]({{% INFLUXDB_DOCS_URL %}}/reference/internals/metrics/).
        - Learn how to use InfluxDB to [scrape Prometheus metrics]({{% INFLUXDB_DOCS_URL %}}/write-data/developer-tools/scrape-prometheus-metrics/).
        - Learn how InfluxDB [parses the Prometheus exposition format]({{% INFLUXDB_DOCS_URL %}}/reference/prometheus-metrics/).
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: |
            Success. The response body contains metrics in
            [Prometheus plain-text exposition format](https://prometheus.io/docs/instrumenting/exposition_formats)
            Metrics contain a name, an optional set of key-value pairs, and a value.

            The following descriptors precede each metric:

            - `HELP`: description of the metric
            - `TYPE`: [Prometheus metric type](https://prometheus.io/docs/concepts/metric_types/) (`counter`, `gauge`, `histogram`, or `summary`)
          content:
            text/plain:
              schema:
                type: string
                format: Prometheus text-based exposition
                externalDocs:
                  description: Prometheus exposition formats
                  url: 'https://prometheus.io/docs/instrumenting/exposition_formats'
              examples:
                expositionResponse:
                  summary: Metrics in plain text
                  value: |
                    # HELP go_threads Number of OS threads created.
                    # TYPE go_threads gauge
                    go_threads 19
                    # HELP http_api_request_duration_seconds Time taken to respond to HTTP request
                    # TYPE http_api_request_duration_seconds histogram
                    http_api_request_duration_seconds_bucket{handler="platform",method="GET",path="/:fallback_path",response_code="200",status="2XX",user_agent="curl",le="0.005"} 4
                    http_api_request_duration_seconds_bucket{handler="platform",method="GET",path="/:fallback_path",response_code="200",status="2XX",user_agent="curl",le="0.01"} 4
                    http_api_request_duration_seconds_bucket{handler="platform",method="GET",path="/:fallback_path",response_code="200",status="2XX",user_agent="curl",le="0.025"} 5
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /ready:
    get:
      operationId: GetReady
      tags:
        - Ready
        - System information endpoints
      summary: Get the readiness of an instance at startup
      servers:
        - url: ''
      parameters:
        - in: header
          name: Zap-Trace-Span
          description: OpenTracing span context
          example:
            trace_id: '1'
            span_id: '1'
            baggage:
              key: value
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The instance is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ready
                  started:
                    type: string
                    format: date-time
                    example: '2019-03-13T10:09:33.891196-04:00'
                  up:
                    type: string
                    example: 14m45.911966424s
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /users:
    get:
      operationId: GetUsers
      tags:
        - Security and access endpoints
        - Users
      summary: List users
      description: |
        Lists [users]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
        Default limit is `20`.

        To limit which users are returned, pass query parameters in your request.

        #### Required permissions for InfluxDB OSS

        | Action | Permission required | Restriction |
        |:-------|:--------------------|:------------|
        | List all users | _[Operator token](https://docs.influxdata.com/influxdb/latest/security/tokens/#operator-token)_  | |
        | List a specific user | `read-users` or `read-user USER_ID` | |

        *`USER_ID`* is the ID of the user that you want to retrieve.

        #### Related guides

        - [View users](https://docs.influxdata.com/influxdb/latest/users/view-users/).
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: offset
          required: false
          description: |
            The offset for pagination.
            The number of records to skip.

            For more information about pagination parameters, see [Pagination]({{% INFLUXDB_DOCS_URL %}}/api/#tag/Pagination).
          schema:
            type: integer
            minimum: 0
        - in: query
          name: limit
          required: false
          description: |
            Limits the number of records returned. Default is `20`.
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: after
          required: false
          schema:
            type: string
          description: |
            A resource ID to seek from.
            Returns records created after the specified record;
            results don't include the specified record.

            Use `after` instead of the `offset` parameter.
            For more information about pagination parameters, see [Pagination]({{% INFLUXDB_DOCS_URL %}}/api/#tag/Pagination).
        - in: query
          name: name
          schema:
            type: string
          description: |
            A user name.
            Only lists the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
        - in: query
          name: id
          schema:
            type: string
          description: |
            A user ID.
            Only lists the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
      responses:
        '200':
          description: Success. The response contains a list of `users`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          description: |
            Unauthorized.
          content:
            application/json:
              schema:
                properties:
                  code:
                    description: code is the machine-readable error code.
                    readOnly: true
                    type: string
                    enum:
                      - internal error
                      - not found
                      - conflict
                      - invalid
                      - unprocessable entity
                      - empty value
                      - unavailable
                      - forbidden
                      - too many requests
                      - unauthorized
                      - method not allowed
                      - request too large
                      - unsupported media type
                  message:
                    readOnly: true
                    description: Human-readable message.
                    type: string
                  op:
                    readOnly: true
                    description: Describes the logical code operation when the error occurred. Useful for debugging.
                    type: string
                  err:
                    readOnly: true
                    description: Stack of errors that occurred during processing of the request. Useful for debugging.
                    type: string
                required:
                  - code
              examples:
                tokenNotAuthorized:
                  summary: 'API token doesn''t have `write:users` permission'
                  value:
                    code: unauthorized
                    message: 'write:users/09d8462ce0764000 is unauthorized'
        '422':
          description: |
            Unprocessable entity.

            The error may indicate one of the following problems:

            - The request body isn't valid--the request is well-formed,
              but InfluxDB can't process it due to semantic errors.
            - You passed a parameter combination that InfluxDB doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        '500':
          description: |
            Internal server error.
            The server encountered an unexpected situation.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
    post:
      operationId: PostUsers
      tags:
        - Users
      summary: Create a user
      description: |
        Creates a [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that can access InfluxDB.
        Returns the user.

        Use this endpoint to create a user that can sign in to start a user session
        through one of the following interfaces:

          - InfluxDB UI
          - `/api/v2/signin` InfluxDB API endpoint
          - InfluxDB CLI

        This endpoint represents the first two steps in a four-step process to allow a user
        to authenticate with a username and password, and then access data in an organization:

          1. Create a user: send a `POST` request to `POST /api/v2/users`. The `name` property is required.
          2. Extract the user ID (`id` property) value from the API response for _step 1_.
          3. Create an authorization (and API token) for the user: send a `POST` request to [`POST /api/v2/authorizations`](#operation/PostAuthorizations), passing the user ID (`id`) from _step 2_.
          4. Create a password for the user: send a `POST` request to [`POST /api/v2/users/USER_ID/password`](#operation/PostUsersIDPassword), passing the user ID from _step 2_.

        #### Required permissions

        | Action | Permission required | Restriction |
        |:-------|:--------------------|:------------|
        | Create a user | _[Operator token](https://docs.influxdata.com/influxdb/latest/security/tokens/#operator-token)_  | |

        #### Related guides

        - [Create a user](https://docs.influxdata.com/influxdb/latest/users/create-user/)
        - [Create an API token scoped to a user](https://docs.influxdata.com/influxdb/latest/security/tokens/create-token/#create-a-token-scoped-to-a-user)
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: The user to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: |
            Success.
            The response body contains the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse/properties/user'
        '401':
          description: |
            Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
              examples:
                tokenNotAuthorized:
                  summary: 'API token doesn''t have `write:users` permission'
                  value:
                    code: unauthorized
                    message: 'write:users/09d8462ce0764000 is unauthorized'
        '422':
          description: |
            Unprocessable entity.

            The error may indicate one of the following problems:

            - The request body isn't valid--the request is well-formed, but InfluxDB can't process it due to semantic errors.
            - You passed a parameter combination that InfluxDB doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
      x-codeSamples:
        - label: 'cURL: create a user and set a password'
          lang: Shell
          source: |
            # The following steps show how to create a user and then set
            # the user's password:
            #
            # 1. Send a request to this endpoint to create a user--for example:

                  USER=$(curl --request POST \
                          "INFLUX_URL/api/v2/users/" \
                          --header "Authorization: Token INFLUX_API_TOKEN" \
                          --header 'Content-type: application/json' \
                          --data-binary @- << EOF
                          {
                            "name": "USER_NAME",
                            "status": "active"
                          }
                  EOF
                  )

            # 2. Extract the id property from the response in step 1--for example:

                  USER_ID=`echo $USER | jq -r '.id'`

            # 3. To set the user's password, set the password property in a request
            #    to the /api/v2/users/USER_ID/password endpoint--for example:

                  curl request POST "INFLUX_URL/api/v2/users/$USER_ID/password/" \
                    --header "Authorization: Token INFLUX_API_TOKEN" \
                    --header 'Content-type: application/json' \
                    --data '{ "password": "USER_PASSWORD" }'
  '/users/{userID}':
    get:
      operationId: GetUsersID
      tags:
        - Security and access endpoints
        - Users
      summary: Retrieve a user
      description: |
        Retrieves a [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).

        #### Related guides

        - [Manage users]({{% INFLUXDB_DOCS_URL %}}/organizations/users/)
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: |
            A user ID.
            Retrieves the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
      responses:
        '200':
          description: Success. The response body contains the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse/properties/user'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
    patch:
      operationId: PatchUsersID
      tags:
        - Users
      summary: Update a user
      description: |
        Updates a [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) and returns the user.

        #### Required permissions

        | Action      | Permission required |
        |:------------|:-----------------------------------------------|
        | Update a user | `write-users` or `write-user USER_ID` |

        *`USER_ID`* is the ID of the user that you want to update.

        #### Related guides

        - [Manage users]({{% INFLUXDB_DOCS_URL %}}/organizations/users/)
      requestBody:
        description: 'In the request body, provide the user properties to update.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: |
            A user ID.
            Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) to update.
      responses:
        '200':
          description: |
            Success.
            The response body contains the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse/properties/user'
        '400':
          $ref: '#/paths/~1tasks~1%7BtaskID%7D/get/responses/400'
        '401':
          $ref: '#/paths/~1tasks/get/responses/401'
        '404':
          $ref: '#/paths/~1tasks~1%7BtaskID%7D/get/responses/404'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
        default:
          $ref: '#/paths/~1config/get/responses/401'
    delete:
      operationId: DeleteUsersID
      tags:
        - Users
      summary: Delete a user
      description: |
        Deletes a [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).

        #### Required permissions

        | Action      | Permission required |
        |:------------|:-----------------------------------------------|
        | Delete a user | `write-users` or `write-user USER_ID` |

        *`USER_ID`* is the ID of the user that you want to delete.

        #### Related guides

        - [Manage users]({{% INFLUXDB_DOCS_URL %}}/organizations/users/)
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: |
            A user ID.
            Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) to delete.
      responses:
        '204':
          description: Success. The user is deleted.
        '400':
          description: |
            Bad request.
            The response body contains detail about the error.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        '401':
          $ref: '#/paths/~1tasks/get/responses/401'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /setup:
    get:
      operationId: GetSetup
      tags:
        - Setup
      summary: 'Check if database has default user, org, bucket'
      description: 'Returns `true` if no default user, organization, or bucket has been created.'
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: allowed true or false
          content:
            application/json:
              schema:
                type: object
                properties:
                  allowed:
                    description: |
                      If `true`, the InfluxDB instance hasn't had initial setup;
                      `false` otherwise.
                    type: boolean
    post:
      operationId: PostSetup
      tags:
        - Setup
      summary: 'Set up initial user, org and bucket'
      description: 'Post an onboarding request to set up initial user, org and bucket.'
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Source to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingRequest'
      responses:
        '201':
          description: 'Created default user, bucket, org'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /authorizations:
    get:
      operationId: GetAuthorizations
      tags:
        - Authorizations
        - Security and access endpoints
      summary: List authorizations
      description: |
        Lists authorizations.

        To limit which authorizations are returned, pass query parameters in your request.
        If no query parameters are passed, InfluxDB returns all authorizations.

        #### InfluxDB OSS

        - InfluxDB OSS returns
          [API token]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token) values in authorizations.
        - If the request uses an  _[operator token](https://docs.influxdata.com/influxdb/latest/security/tokens/#operator-token)_,
          InfluxDB OSS returns authorizations for all organizations in the instance.

        #### Required permissions

        - An _[operator token](https://docs.influxdata.com/influxdb/latest/security/tokens/#operator-token)_.

        #### Related guides

        - [View tokens]({{% INFLUXDB_DOCS_URL %}}/security/tokens/view-tokens/)
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: userID
          schema:
            type: string
          description: |
            A user ID.
            Only returns authorizations scoped to the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
        - in: query
          name: user
          schema:
            type: string
          description: |
            A user name.
            Only returns authorizations scoped to the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
        - in: query
          name: orgID
          schema:
            type: string
          description: 'An organization ID. Only returns authorizations that belong to the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).'
        - in: query
          name: org
          schema:
            type: string
          description: |
            An organization name.
            Only returns authorizations that belong to the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
      responses:
        '200':
          description: Success. The response body contains a list of authorizations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    readOnly: true
                    $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/links'
                  authorizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/OnboardingResponse/properties/auth'
        '400':
          description: Invalid request
          $ref: '#/paths/~1config/get/responses/401'
        '401':
          $ref: '#/paths/~1tasks/get/responses/401'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
    post:
      operationId: PostAuthorizations
      tags:
        - Authorizations
      summary: Create an authorization
      description: |
        Creates an authorization and returns the authorization with the
        generated API [token]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token).

        Use this endpoint to create an authorization, which generates an API token
        with permissions to `read` or `write` to a specific resource or `type` of resource.
        The response contains the new authorization with the generated API token.

        #### Limitations

        To follow best practices for secure API token generation and retrieval,
        InfluxDB enforces access restrictions on API tokens.

        - In InfluxDB OSS, API tokens are visible to the user who created the authorization and to any
          user with an _[operator token]({{% INFLUXDB_DOCS_URL %}}/security/tokens/#operator-token)_.
        - You can't update an authorization's permissions.
        - Even if an API token has `read-authorizations` permission, the
          token can't be used to view its authorization details.
        - A token stops working when the user who created the authorization is deleted.

        We recommend creating a generic user to create and manage tokens for writing data.

        #### Related guides

        - [Create a token]({{% INFLUXDB_DOCS_URL %}}/security/tokens/create-token/)
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: The authorization to create.
        required: true
        content:
          application/json:
            schema:
              required:
                - orgID
                - permissions
              allOf:
                - $ref: '#/paths/~1authorizations~1%7BauthID%7D/patch/requestBody/content/application~1json/schema'
                - type: object
                  properties:
                    orgID:
                      type: string
                      description: |
                        An organization ID.
                        Specifies the organization that owns the authorization.
                    userID:
                      type: string
                      description: |
                        A user ID.
                        Specifies the user that the authorization is scoped to.

                        When a user authenticates with username and password,
                        InfluxDB generates a _user session_ with all the permissions
                        specified by all the user's authorizations.
                    permissions:
                      type: array
                      minItems: 1
                      description: |
                        A list of permissions for an authorization.
                        In the list, provide at least one `permission` object.

                        In a `permission`, the `resource.type` property grants access to all
                        resources of the specified type.
                        To grant access to only a specific resource, specify the
                        `resource.id` property.
                      items:
                        required:
                          - action
                          - resource
                        properties:
                          action:
                            type: string
                            enum:
                              - read
                              - write
                          resource:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - authorizations
                                  - buckets
                                  - dashboards
                                  - orgs
                                  - tasks
                                  - telegrafs
                                  - users
                                  - variables
                                  - secrets
                                  - labels
                                  - views
                                  - documents
                                  - notificationRules
                                  - notificationEndpoints
                                  - checks
                                  - dbrp
                                  - annotations
                                  - sources
                                  - scrapers
                                  - notebooks
                                  - remotes
                                  - replications
                                  - instance
                                  - flows
                                  - functions
                                  - subscriptions
                                description: |
                                  A resource type.
                                  Identifies the API resource's type (or _kind_).
                              id:
                                type: string
                                description: |
                                  A resource ID.
                                  Identifies a specific resource.
                              name:
                                type: string
                                description: |
                                  The name of the resource.
                                  _Note: not all resource types have a `name` property_.
                              orgID:
                                type: string
                                description: |
                                  An organization ID.
                                  Identifies the organization that owns the resource.
                              org:
                                type: string
                                description: |
                                  An organization name.
                                  The organization that owns the resource.
            examples:
              AuthorizationPostRequest:
                $ref: '#/components/examples/AuthorizationPostRequest'
              AuthorizationWithResourcePostRequest:
                $ref: '#/components/examples/AuthorizationWithResourcePostRequest'
              AuthorizationWithUserPostRequest:
                $ref: '#/components/examples/AuthorizationWithUserPostRequest'
      responses:
        '201':
          description: |
            Success. The authorization is created. The response body contains the authorization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse/properties/auth'
        '400':
          description: Invalid request
          $ref: '#/paths/~1config/get/responses/401'
        '401':
          $ref: '#/paths/~1tasks/get/responses/401'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  '/authorizations/{authID}':
    get:
      operationId: GetAuthorizationsID
      tags:
        - Authorizations
        - Security and access endpoints
      summary: Retrieve an authorization
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to get.
      responses:
        '200':
          description: Authorization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse/properties/auth'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
    patch:
      operationId: PatchAuthorizationsID
      tags:
        - Authorizations
      summary: Update an authorization to be active or inactive
      requestBody:
        description: Authorization to update
        required: true
        content:
          application/json:
            schema:
              properties:
                status:
                  description: 'Status of the token. If `inactive`, requests using the token will be rejected.'
                  default: active
                  type: string
                  enum:
                    - active
                    - inactive
                description:
                  type: string
                  description: A description of the token.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to update.
      responses:
        '200':
          description: The active or inactive authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse/properties/auth'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
    delete:
      operationId: DeleteAuthorizationsID
      tags:
        - Authorizations
      summary: Delete an authorization
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to delete.
      responses:
        '204':
          description: Authorization deleted
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /variables:
    get:
      operationId: GetVariables
      tags:
        - Variables
      summary: List all variables
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: org
          description: The name of the organization.
          schema:
            type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
      responses:
        '200':
          description: A list of variables for an organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variables'
        '400':
          description: Invalid request
          $ref: '#/paths/~1config/get/responses/401'
        default:
          description: Internal server error
          $ref: '#/paths/~1config/get/responses/401'
    post:
      operationId: PostVariables
      summary: Create a variable
      tags:
        - Variables
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Variable to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
      responses:
        '201':
          description: Variable created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
        default:
          description: Internal server error
          $ref: '#/paths/~1config/get/responses/401'
  '/variables/{variableID}':
    get:
      operationId: GetVariablesID
      tags:
        - Variables
      summary: Retrieve a variable
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      responses:
        '200':
          description: Variable found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
        '404':
          description: Variable not found
          $ref: '#/paths/~1config/get/responses/401'
        default:
          description: Internal server error
          $ref: '#/paths/~1config/get/responses/401'
    delete:
      operationId: DeleteVariablesID
      tags:
        - Variables
      summary: Delete a variable
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      responses:
        '204':
          description: Variable deleted
        default:
          description: Internal server error
          $ref: '#/paths/~1config/get/responses/401'
    patch:
      operationId: PatchVariablesID
      summary: Update a variable
      tags:
        - Variables
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      requestBody:
        description: Variable update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
      responses:
        '200':
          description: Variable updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
        default:
          description: Internal server error
          $ref: '#/paths/~1config/get/responses/401'
    put:
      operationId: PutVariablesID
      summary: Replace a variable
      tags:
        - Variables
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      requestBody:
        description: Variable to replace
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
      responses:
        '200':
          description: Variable updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
        default:
          description: Internal server error
          $ref: '#/paths/~1config/get/responses/401'
  /sources:
    post:
      operationId: PostSources
      tags:
        - Sources
      summary: Create a source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Source to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
      responses:
        '201':
          description: Created Source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
    get:
      operationId: GetSources
      tags:
        - Sources
      summary: List all sources
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: org
          description: The name of the organization.
          schema:
            type: string
      responses:
        '200':
          description: A list of sources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sources'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/sources/{sourceID}':
    delete:
      operationId: DeleteSourcesID
      tags:
        - Sources
      summary: Delete a source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: View not found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
    patch:
      operationId: PatchSourcesID
      tags:
        - Sources
      summary: Update a Source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      requestBody:
        description: Source update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
      responses:
        '200':
          description: Created Source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '404':
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
    get:
      operationId: GetSourcesID
      tags:
        - Sources
      summary: Retrieve a source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      responses:
        '200':
          description: A source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '404':
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/sources/{sourceID}/health':
    get:
      operationId: GetSourcesIDHealth
      tags:
        - Sources
      summary: Get the health of a source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      responses:
        '200':
          description: The source is healthy
          content:
            application/json:
              schema:
                $ref: '#/paths/~1health/get/responses/200/content/application~1json/schema'
        '503':
          description: The source is not healthy
          content:
            application/json:
              schema:
                $ref: '#/paths/~1health/get/responses/200/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/sources/{sourceID}/buckets':
    get:
      operationId: GetSourcesIDBuckets
      tags:
        - Sources
        - Buckets
      summary: Get buckets in a source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
        - in: query
          name: org
          description: The name of the organization.
          schema:
            type: string
      responses:
        '200':
          description: A source
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    readOnly: true
                    $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/links'
                  buckets:
                    type: array
                    items:
                      $ref: '#/components/schemas/OnboardingResponse/properties/bucket'
        '404':
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  /scrapers:
    get:
      operationId: GetScrapers
      tags:
        - Scraper Targets
      summary: List all scraper targets
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: name
          description: Specifies the name of the scraper target.
          schema:
            type: string
        - in: query
          name: id
          description: 'List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used.'
          schema:
            type: array
            items:
              type: string
        - in: query
          name: orgID
          description: Specifies the organization ID of the scraper target.
          schema:
            type: string
        - in: query
          name: org
          description: Specifies the organization name of the scraper target.
          schema:
            type: string
      responses:
        '200':
          description: All scraper targets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponses'
    post:
      operationId: PostScrapers
      summary: Create a scraper target
      tags:
        - Scraper Targets
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Scraper target to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScraperTargetRequest'
      responses:
        '201':
          description: Scraper target created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponse'
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/scrapers/{scraperTargetID}':
    get:
      operationId: GetScrapersID
      tags:
        - Scraper Targets
      summary: Retrieve a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          required: true
          schema:
            type: string
          description: The identifier of the scraper target.
      responses:
        '200':
          description: The scraper target
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponse'
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
    delete:
      operationId: DeleteScrapersID
      tags:
        - Scraper Targets
      summary: Delete a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          required: true
          schema:
            type: string
          description: The identifier of the scraper target.
      responses:
        '204':
          description: Scraper target deleted
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
    patch:
      operationId: PatchScrapersID
      summary: Update a scraper target
      tags:
        - Scraper Targets
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          required: true
          schema:
            type: string
          description: The identifier of the scraper target.
      requestBody:
        description: Scraper target update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScraperTargetRequest'
      responses:
        '200':
          description: Scraper target updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponse'
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/labels':
    get:
      operationId: GetScrapersIDLabels
      tags:
        - Scraper Targets
      summary: List all labels for a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        '200':
          description: A list of labels for a scraper target.
          content:
            application/json:
              schema:
                type: object
                properties:
                  labels:
                    $ref: '#/components/schemas/Variable/properties/labels'
                  links:
                    $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/links'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
    post:
      operationId: PostScrapersIDLabels
      tags:
        - Scraper Targets
      summary: Add a label to a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              type: object
              description: A _label mapping_ contains a `label` ID to attach to a resource.
              properties:
                labelID:
                  description: |
                    A label ID.
                    Specifies the label to attach.
                  type: string
              required:
                - labelID
      responses:
        '201':
          description: The newly added label
          content:
            application/json:
              schema:
                type: object
                properties:
                  label:
                    type: object
                    properties:
                      id:
                        readOnly: true
                        type: string
                      orgID:
                        readOnly: true
                        type: string
                      name:
                        type: string
                      properties:
                        type: object
                        additionalProperties:
                          type: string
                        description: |
                          Key-value pairs associated with this label.
                          To remove a property, send an update with an empty value (`""`) for the key.
                        example:
                          color: ffb3b3
                          description: this is a description
                  links:
                    $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/links'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/labels/{labelID}':
    delete:
      operationId: DeleteScrapersIDLabelsID
      tags:
        - Scraper Targets
      summary: Delete a label from a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The label ID.
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Scraper target not found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/members':
    get:
      operationId: GetScrapersIDMembers
      tags:
        - Scraper Targets
      summary: List all users with member privileges for a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        '200':
          description: A list of scraper target members
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                  users:
                    type: array
                    items:
                      $ref: '#/paths/~1scrapers~1%7BscraperTargetID%7D~1members/post/responses/201/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
    post:
      operationId: PostScrapersIDMembers
      tags:
        - Scraper Targets
      summary: Add a member to a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      requestBody:
        description: User to add as member
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1scrapers~1%7BscraperTargetID%7D~1owners/post/requestBody/content/application~1json/schema'
      responses:
        '201':
          description: Member added to scraper targets
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OnboardingResponse/properties/user'
                  - type: object
                    properties:
                      role:
                        type: string
                        default: member
                        enum:
                          - member
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/members/{userID}':
    delete:
      operationId: DeleteScrapersIDMembersID
      tags:
        - Scraper Targets
      summary: Remove a member from a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of member to remove.
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        '204':
          description: Member removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/owners':
    get:
      operationId: GetScrapersIDOwners
      tags:
        - Scraper Targets
      summary: List all owners of a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        '200':
          description: A list of scraper target owners
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                  users:
                    type: array
                    items:
                      $ref: '#/paths/~1scrapers~1%7BscraperTargetID%7D~1owners/post/responses/201/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
    post:
      operationId: PostScrapersIDOwners
      tags:
        - Scraper Targets
      summary: Add an owner to a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      requestBody:
        description: User to add as owner
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: |
                    The ID of the user to add to the resource.
                name:
                  type: string
                  description: |
                    The name of the user to add to the resource.
              required:
                - id
      responses:
        '201':
          description: Scraper target owner added
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OnboardingResponse/properties/user'
                  - type: object
                    properties:
                      role:
                        type: string
                        default: owner
                        enum:
                          - owner
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/owners/{userID}':
    delete:
      operationId: DeleteScrapersIDOwnersID
      tags:
        - Scraper Targets
      summary: Remove an owner from a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of owner to remove.
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        '204':
          description: Owner removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  /backup/kv:
    get:
      operationId: GetBackupKV
      tags:
        - Backup
      summary: Download snapshot of metadata stored in the server's embedded KV store. Don't use with InfluxDB versions greater than InfluxDB 2.1.x.
      description: |
        Retrieves a snapshot of metadata stored in the server's embedded KV store.
        InfluxDB versions greater than 2.1.x don't include metadata stored in embedded SQL;
        avoid using this endpoint with versions greater than 2.1.x.
      deprecated: true
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: Success. The response contains a snapshot of KV metadata.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /backup/metadata:
    get:
      operationId: GetBackupMetadata
      tags:
        - Backup
      summary: Download snapshot of all metadata in the server
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Accept-Encoding
          description: Indicates the content encoding (usually a compression algorithm) that the client can understand.
          schema:
            type: string
            description: 'The content coding.  Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'
            default: identity
            enum:
              - gzip
              - identity
      responses:
        '200':
          description: Snapshot of metadata
          headers:
            Content-Encoding:
              description: Lists any encodings (usually compression algorithms) that have been applied to the response payload.
              schema:
                type: string
                description: |
                  The content coding: `gzip` for compressed data or `identity` for unmodified, uncompressed data.
                default: identity
                enum:
                  - gzip
                  - identity
          content:
            multipart/mixed:
              schema:
                $ref: '#/components/schemas/MetadataBackup'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  '/backup/shards/{shardID}':
    get:
      operationId: GetBackupShardId
      tags:
        - Backup
      summary: Download snapshot of all TSM data in a shard
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Accept-Encoding
          description: Indicates the content encoding (usually a compression algorithm) that the client can understand.
          schema:
            type: string
            description: 'The content coding.  Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'
            default: identity
            enum:
              - gzip
              - identity
        - in: path
          name: shardID
          schema:
            type: integer
            format: int64
          required: true
          description: The shard ID.
        - in: query
          name: since
          description: 'The earliest time [RFC3339 date/time format]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#rfc3339-timestamp) to include in the snapshot.'
          schema:
            type: string
            format: date-time
          examples:
            RFC3339:
              summary: RFC3339 date/time format
              value: '2006-01-02T15:04:05Z07:00'
      responses:
        '200':
          description: TSM snapshot.
          headers:
            Content-Encoding:
              description: Lists any encodings (usually compression algorithms) that have been applied to the response payload.
              schema:
                type: string
                description: |
                  The content coding: `gzip` for compressed data or `identity` for unmodified, uncompressed data.
                default: identity
                enum:
                  - gzip
                  - identity
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Shard not found.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /restore/kv:
    post:
      operationId: PostRestoreKV
      tags:
        - Restore
      summary: Overwrite the embedded KV store on the server with a backed-up snapshot.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Content-Encoding
          description: |
            The value tells InfluxDB what compression is applied to the line protocol in the request payload.
            To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
          schema:
            type: string
            description: 'The content coding.  Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/octet-stream
            enum:
              - application/octet-stream
      requestBody:
        description: Full KV snapshot.
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: KV store successfully overwritten.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    description: token is the root token for the instance after restore (this is overwritten during the restore)
                    type: string
        '204':
          description: KV store successfully overwritten.
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /restore/sql:
    post:
      operationId: PostRestoreSQL
      tags:
        - Restore
      summary: Overwrite the embedded SQL store on the server with a backed-up snapshot.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Content-Encoding
          description: |
            The value tells InfluxDB what compression is applied to the line protocol in the request payload.
            To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
          schema:
            type: string
            description: Specifies that the line protocol in the body is encoded with gzip or not encoded with identity.
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/octet-stream
            enum:
              - application/octet-stream
      requestBody:
        description: Full SQL snapshot.
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: SQL store successfully overwritten.
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  '/restore/bucket/{bucketID}':
    post:
      operationId: PostRestoreBucketID
      tags:
        - Restore
      summary: Overwrite storage metadata for a bucket with shard info from a backup.
      deprecated: true
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/octet-stream
            enum:
              - application/octet-stream
      requestBody:
        description: Database info serialized as protobuf.
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: byte
      responses:
        '200':
          description: ID mappings for shards in bucket.
          content:
            application/json:
              schema:
                type: string
                format: byte
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /restore/bucketMetadata:
    post:
      operationId: PostRestoreBucketMetadata
      tags:
        - Restore
      summary: Create a new bucket pre-seeded with shard info from a backup.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Metadata manifest for a bucket.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BucketMetadataManifest'
      responses:
        '201':
          description: ID mappings for shards in new bucket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoredBucketMappings'
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  '/restore/shards/{shardID}':
    post:
      operationId: PostRestoreShardId
      tags:
        - Restore
      summary: Restore a TSM snapshot into a shard.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Content-Encoding
          description: |
            The value tells InfluxDB what compression is applied to the line protocol in the request payload.
            To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
          schema:
            type: string
            description: Specifies that the line protocol in the body is encoded with gzip or not encoded with identity.
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/octet-stream
            enum:
              - application/octet-stream
        - in: path
          name: shardID
          schema:
            type: string
          required: true
          description: The shard ID.
      requestBody:
        description: TSM snapshot.
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: TSM snapshot successfully restored.
        default:
          description: Unexpected error
          $ref: '#/paths/~1config/get/responses/401'
  /config:
    get:
      operationId: GetConfig
      tags:
        - Config
        - System information endpoints
      summary: Retrieve runtime configuration
      description: |
        Returns the active runtime configuration of the InfluxDB instance.

        In InfluxDB v2.2+, use this endpoint to view your active runtime configuration,
        including flags and environment variables.

        #### Related guides

        - [View your runtime server configuration]({{% INFLUXDB_DOCS_URL %}}/reference/config-options/#view-your-runtime-server-configuration)
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: |
            Success.
            The response body contains the active runtime configuration of the InfluxDB instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '401':
          description: Non 2XX error response from server.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
        default:
          $ref: '#/paths/~1config/get/responses/401'
  /remotes:
    get:
      operationId: GetRemoteConnections
      tags:
        - RemoteConnections
      summary: List all remote connections
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: orgID
          description: The organization ID.
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: remoteURL
          schema:
            type: string
            format: uri
      responses:
        '200':
          description: List of remote connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteConnections'
        '404':
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
    post:
      operationId: PostRemoteConnection
      tags:
        - RemoteConnections
      summary: Register a new remote connection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteConnectionCreationRequest'
      responses:
        '201':
          description: Remote connection saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteConnection'
        '400':
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
  '/remotes/{remoteID}':
    get:
      operationId: GetRemoteConnectionByID
      tags:
        - RemoteConnections
      summary: Retrieve a remote connection
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: remoteID
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Remote connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteConnection'
        '404':
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
    patch:
      operationId: PatchRemoteConnectionByID
      tags:
        - RemoteConnections
      summary: Update a remote connection
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: remoteID
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteConnectionUpdateRequest'
      responses:
        '200':
          description: Updated information saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteConnection'
        '400':
          $ref: '#/paths/~1config/get/responses/401'
        '404':
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
    delete:
      operationId: DeleteRemoteConnectionByID
      tags:
        - RemoteConnections
      summary: Delete a remote connection
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: remoteID
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Remote connection info deleted.
        '404':
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
  /replications:
    get:
      operationId: GetReplications
      tags:
        - Replications
      summary: List all replications
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: orgID
          description: The organization ID.
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: remoteID
          schema:
            type: string
        - in: query
          name: localBucketID
          schema:
            type: string
      responses:
        '200':
          description: List of replications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replications'
        '404':
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
    post:
      operationId: PostReplication
      tags:
        - Replications
      summary: Register a new replication
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: validate
          description: 'If true, validate the replication, but don''t save it.'
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationCreationRequest'
      responses:
        '201':
          description: Replication saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replication'
        '204':
          description: 'Replication validated, but not saved'
        '400':
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
  '/replications/{replicationID}':
    get:
      operationId: GetReplicationByID
      tags:
        - Replications
      summary: Retrieve a replication
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: replicationID
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Replication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replication'
        '404':
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
    patch:
      operationId: PatchReplicationByID
      tags:
        - Replications
      summary: Update a replication
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: replicationID
          schema:
            type: string
          required: true
        - in: query
          name: validate
          description: 'If true, validate the updated information, but don''t save it.'
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationUpdateRequest'
      responses:
        '200':
          description: Updated information saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replication'
        '204':
          description: 'Updated replication validated, but not saved'
        '400':
          $ref: '#/paths/~1config/get/responses/401'
        '404':
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
    delete:
      operationId: DeleteReplicationByID
      tags:
        - Replications
      summary: Delete a replication
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: replicationID
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Replication deleted.
        '404':
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
  '/replications/{replicationID}/validate':
    post:
      operationId: PostValidateReplicationByID
      tags:
        - Replications
      summary: Validate a replication
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: replicationID
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Replication is valid
        '400':
          description: Replication failed validation
          $ref: '#/paths/~1config/get/responses/401'
        default:
          $ref: '#/paths/~1config/get/responses/401'
  /dashboards:
    post:
      operationId: PostDashboards
      tags:
        - Dashboards
      summary: Create a dashboard
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Dashboard to create
        required: true
        content:
          application/json:
            schema:
              properties:
                orgID:
                  type: string
                  description: The ID of the organization that owns the dashboard.
                name:
                  type: string
                  description: The user-facing name of the dashboard.
                description:
                  type: string
                  description: The user-facing description of the dashboard.
              required:
                - orgID
                - name
      responses:
        '201':
          description: Success. The dashboard is created.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    allOf:
                      - $ref: '#/paths/~1dashboards/post/requestBody/content/application~1json/schema'
                      - type: object
                        properties:
                          links:
                            type: object
                            example:
                              self: /api/v2/dashboards/1
                              cells: /api/v2/dashboards/1/cells
                              owners: /api/v2/dashboards/1/owners
                              members: /api/v2/dashboards/1/members
                              labels: /api/v2/dashboards/1/labels
                              org: /api/v2/labels/1
                            properties:
                              self:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              cells:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              members:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              owners:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              labels:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              org:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                          id:
                            readOnly: true
                            type: string
                          meta:
                            type: object
                            properties:
                              createdAt:
                                type: string
                                format: date-time
                              updatedAt:
                                type: string
                                format: date-time
                          cells:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                links:
                                  type: object
                                  properties:
                                    self:
                                      type: string
                                    view:
                                      type: string
                                x:
                                  type: integer
                                  format: int32
                                'y':
                                  type: integer
                                  format: int32
                                w:
                                  type: integer
                                  format: int32
                                h:
                                  type: integer
                                  format: int32
                                viewID:
                                  type: string
                                  description: The reference to a view from the views API.
                          labels:
                            $ref: '#/components/schemas/Variable/properties/labels'
                  - type: object
                    allOf:
                      - $ref: '#/paths/~1dashboards/post/requestBody/content/application~1json/schema'
                      - type: object
                        properties:
                          links:
                            type: object
                            example:
                              self: /api/v2/dashboards/1
                              cells: /api/v2/dashboards/1/cells
                              owners: /api/v2/dashboards/1/owners
                              members: /api/v2/dashboards/1/members
                              labels: /api/v2/dashboards/1/labels
                              org: /api/v2/labels/1
                            properties:
                              self:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              cells:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              members:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              owners:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              labels:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              org:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                          id:
                            readOnly: true
                            type: string
                          meta:
                            type: object
                            properties:
                              createdAt:
                                type: string
                                format: date-time
                              updatedAt:
                                type: string
                                format: date-time
                          cells:
                            type: array
                            items:
                              type: object
                              allOf:
                                - $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/dashboards/items/allOf/1/properties/cells/items'
                                - type: object
                                  properties:
                                    name:
                                      type: string
                                    properties:
                                      oneOf:
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - shape
                                            - axes
                                            - colors
                                            - note
                                            - showNoteWhenEmpty
                                            - prefix
                                            - suffix
                                            - decimalPlaces
                                            - position
                                          properties:
                                            adaptiveZoomHide:
                                              type: boolean
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - line-plus-single-stat
                                            queries:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  text:
                                                    type: string
                                                    description: The text of the Flux query.
                                                  editMode:
                                                    type: string
                                                    enum:
                                                      - builder
                                                      - advanced
                                                  name:
                                                    type: string
                                                  builderConfig:
                                                    type: object
                                                    properties:
                                                      buckets:
                                                        type: array
                                                        items:
                                                          type: string
                                                      tags:
                                                        type: array
                                                        items:
                                                          type: object
                                                          properties:
                                                            key:
                                                              type: string
                                                            values:
                                                              type: array
                                                              items:
                                                                type: string
                                                            aggregateFunctionType:
                                                              type: string
                                                              enum:
                                                                - filter
                                                                - group
                                                      functions:
                                                        type: array
                                                        items:
                                                          type: object
                                                          properties:
                                                            name:
                                                              type: string
                                                      aggregateWindow:
                                                        type: object
                                                        properties:
                                                          period:
                                                            type: string
                                                          fillValues:
                                                            type: boolean
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                type: object
                                                description: Defines an encoding of data value into color space.
                                                required:
                                                  - id
                                                  - type
                                                  - hex
                                                  - name
                                                  - value
                                                properties:
                                                  id:
                                                    description: The unique ID of the view color.
                                                    type: string
                                                  type:
                                                    description: Type is how the color is used.
                                                    type: string
                                                    enum:
                                                      - min
                                                      - max
                                                      - threshold
                                                      - scale
                                                      - text
                                                      - background
                                                  hex:
                                                    description: The hex number of the color
                                                    type: string
                                                    maxLength: 7
                                                    minLength: 7
                                                  name:
                                                    description: The user-facing name of the hex color.
                                                    type: string
                                                  value:
                                                    description: The data value mapped to this color.
                                                    type: number
                                                    format: float
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            axes:
                                              description: The viewport for a View's visualizations
                                              type: object
                                              required:
                                                - x
                                                - 'y'
                                              properties:
                                                x:
                                                  type: object
                                                  description: Axis used in a visualization.
                                                  properties:
                                                    bounds:
                                                      type: array
                                                      minItems: 0
                                                      maxItems: 2
                                                      description: 'The extents of the axis in the form [lower, upper]. Clients determine whether bounds are inclusive or exclusive of their limits.'
                                                      items:
                                                        type: string
                                                    label:
                                                      description: Description of the axis.
                                                      type: string
                                                    prefix:
                                                      description: Label prefix for formatting axis values.
                                                      type: string
                                                    suffix:
                                                      description: Label suffix for formatting axis values.
                                                      type: string
                                                    base:
                                                      description: Radix for formatting axis values.
                                                      type: string
                                                      enum:
                                                        - ''
                                                        - '2'
                                                        - '10'
                                                    scale:
                                                      description: 'Scale is the axis formatting scale. Supported: "log", "linear"'
                                                      type: string
                                                      enum:
                                                        - log
                                                        - linear
                                                'y':
                                                  $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes/properties/x'
                                            staticLegend:
                                              description: StaticLegend represents the options specific to the static legend
                                              type: object
                                              properties:
                                                colorizeRows:
                                                  type: boolean
                                                heightRatio:
                                                  type: number
                                                  format: float
                                                show:
                                                  type: boolean
                                                opacity:
                                                  type: number
                                                  format: float
                                                orientationThreshold:
                                                  type: integer
                                                valueAxis:
                                                  type: string
                                                widthRatio:
                                                  type: number
                                                  format: float
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yColumn:
                                              type: string
                                            generateYAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            yTotalTicks:
                                              type: integer
                                            yTickStart:
                                              type: number
                                              format: float
                                            yTickStep:
                                              type: number
                                              format: float
                                            shadeBelow:
                                              type: boolean
                                            hoverDimension:
                                              type: string
                                              enum:
                                                - auto
                                                - x
                                                - 'y'
                                                - xy
                                            position:
                                              type: string
                                              enum:
                                                - overlaid
                                                - stacked
                                            prefix:
                                              type: string
                                            suffix:
                                              type: string
                                            decimalPlaces:
                                              description: 'Indicates whether decimal places should be enforced, and how many digits it should show.'
                                              type: object
                                              properties:
                                                isEnforced:
                                                  description: Indicates whether decimal point setting should be enforced
                                                  type: boolean
                                                digits:
                                                  description: The number of digits after decimal to display
                                                  type: integer
                                                  format: int32
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - geom
                                            - queries
                                            - shape
                                            - axes
                                            - colors
                                            - note
                                            - showNoteWhenEmpty
                                            - position
                                          properties:
                                            adaptiveZoomHide:
                                              type: boolean
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - xy
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            colorMapping:
                                              description: An object that contains information about the color mapping
                                              type: object
                                              additionalProperties:
                                                type: string
                                              example:
                                                series_id_1: '#edf529'
                                                series_id_2: '#edf529'
                                                measurement_birdmigration_europe: '#663cd0'
                                                configcat_deployments-autopromotionblocker: '#663cd0'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            axes:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes'
                                            staticLegend:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/staticLegend'
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yColumn:
                                              type: string
                                            generateYAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            yTotalTicks:
                                              type: integer
                                            yTickStart:
                                              type: number
                                              format: float
                                            yTickStep:
                                              type: number
                                              format: float
                                            shadeBelow:
                                              type: boolean
                                            hoverDimension:
                                              type: string
                                              enum:
                                                - auto
                                                - x
                                                - 'y'
                                                - xy
                                            position:
                                              type: string
                                              enum:
                                                - overlaid
                                                - stacked
                                            geom:
                                              type: string
                                              enum:
                                                - line
                                                - step
                                                - stacked
                                                - bar
                                                - monotoneX
                                                - stepBefore
                                                - stepAfter
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - prefix
                                            - tickPrefix
                                            - suffix
                                            - tickSuffix
                                            - decimalPlaces
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - single-stat
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            prefix:
                                              type: string
                                            tickPrefix:
                                              type: string
                                            suffix:
                                              type: string
                                            tickSuffix:
                                              type: string
                                            staticLegend:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/staticLegend'
                                            decimalPlaces:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/decimalPlaces'
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - xColumn
                                            - fillColumns
                                            - xDomain
                                            - xAxisLabel
                                            - position
                                            - binCount
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - histogram
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            xColumn:
                                              type: string
                                            fillColumns:
                                              type: array
                                              items:
                                                type: string
                                            xDomain:
                                              type: array
                                              items:
                                                type: number
                                                format: float
                                            xAxisLabel:
                                              type: string
                                            position:
                                              type: string
                                              enum:
                                                - overlaid
                                                - stacked
                                            binCount:
                                              type: integer
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - prefix
                                            - tickPrefix
                                            - suffix
                                            - tickSuffix
                                            - decimalPlaces
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - gauge
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            prefix:
                                              type: string
                                            tickPrefix:
                                              type: string
                                            suffix:
                                              type: string
                                            tickSuffix:
                                              type: string
                                            decimalPlaces:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/decimalPlaces'
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - tableOptions
                                            - fieldOptions
                                            - timeFormat
                                            - decimalPlaces
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - table
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            tableOptions:
                                              type: object
                                              properties:
                                                verticalTimeAxis:
                                                  description: verticalTimeAxis describes the orientation of the table by indicating whether the time axis will be displayed vertically
                                                  type: boolean
                                                sortBy:
                                                  $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/5/properties/fieldOptions/items'
                                                wrapping:
                                                  description: Wrapping describes the text wrapping style to be used in table views
                                                  type: string
                                                  enum:
                                                    - truncate
                                                    - wrap
                                                    - single-line
                                                fixFirstColumn:
                                                  description: fixFirstColumn indicates whether the first column of the table should be locked
                                                  type: boolean
                                            fieldOptions:
                                              description: fieldOptions represent the fields retrieved by the query with customization options
                                              type: array
                                              items:
                                                description: Describes a field that can be renamed and made visible or invisible.
                                                type: object
                                                properties:
                                                  internalName:
                                                    description: The calculated name of a field.
                                                    readOnly: true
                                                    type: string
                                                  displayName:
                                                    description: The name that a field is renamed to by the user.
                                                    type: string
                                                  visible:
                                                    description: Indicates whether this field should be visible on the table.
                                                    type: boolean
                                            timeFormat:
                                              description: timeFormat describes the display format for time values according to moment.js date formatting
                                              type: string
                                            decimalPlaces:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/decimalPlaces'
                                        - type: object
                                          required:
                                            - type
                                            - showAll
                                            - queries
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - simple-table
                                            showAll:
                                              type: boolean
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                        - type: object
                                          required:
                                            - type
                                            - shape
                                            - note
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - markdown
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                        - type: object
                                          required:
                                            - type
                                            - shape
                                            - checkID
                                            - queries
                                            - colors
                                          properties:
                                            adaptiveZoomHide:
                                              type: boolean
                                            type:
                                              type: string
                                              enum:
                                                - check
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            checkID:
                                              type: string
                                            check:
                                              allOf:
                                                - oneOf:
                                                    - allOf:
                                                        - properties:
                                                            id:
                                                              readOnly: true
                                                              type: string
                                                            name:
                                                              type: string
                                                            orgID:
                                                              description: The ID of the organization that owns this check.
                                                              type: string
                                                            taskID:
                                                              description: The ID of the task associated with this check.
                                                              type: string
                                                            ownerID:
                                                              description: The ID of creator used to create this check.
                                                              type: string
                                                              readOnly: true
                                                            createdAt:
                                                              type: string
                                                              format: date-time
                                                              readOnly: true
                                                            updatedAt:
                                                              type: string
                                                              format: date-time
                                                              readOnly: true
                                                            query:
                                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                                            status:
                                                              $ref: '#/components/schemas/Task/properties/status'
                                                            description:
                                                              description: An optional description of the check.
                                                              type: string
                                                            latestCompleted:
                                                              type: string
                                                              description: 'A timestamp ([RFC3339 date/time format]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#rfc3339-timestamp)) of the latest scheduled and completed run.'
                                                              format: date-time
                                                              readOnly: true
                                                            lastRunStatus:
                                                              readOnly: true
                                                              type: string
                                                              enum:
                                                                - failed
                                                                - success
                                                                - canceled
                                                            lastRunError:
                                                              readOnly: true
                                                              type: string
                                                            labels:
                                                              $ref: '#/components/schemas/Variable/properties/labels'
                                                            links:
                                                              type: object
                                                              readOnly: true
                                                              example:
                                                                self: /api/v2/checks/1
                                                                labels: /api/v2/checks/1/labels
                                                                members: /api/v2/checks/1/members
                                                                owners: /api/v2/checks/1/owners
                                                                query: /api/v2/checks/1/query
                                                              properties:
                                                                self:
                                                                  description: The URL for this check.
                                                                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                                                                labels:
                                                                  description: The URL to retrieve labels for this check.
                                                                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                                                                members:
                                                                  description: The URL to retrieve members for this check.
                                                                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                                                                owners:
                                                                  description: The URL to retrieve owners for this check.
                                                                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                                                                query:
                                                                  description: The URL to retrieve the Flux script for this check.
                                                                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                                                          required:
                                                            - name
                                                            - orgID
                                                            - query
                                                        - type: object
                                                          required:
                                                            - type
                                                          properties:
                                                            type:
                                                              type: string
                                                              enum:
                                                                - deadman
                                                            timeSince:
                                                              description: String duration before deadman triggers.
                                                              type: string
                                                            staleTime:
                                                              description: String duration for time that a series is considered stale and should not trigger deadman.
                                                              type: string
                                                            reportZero:
                                                              description: 'If only zero values reported since time, trigger an alert'
                                                              type: boolean
                                                            level:
                                                              description: The state to record if check matches a criteria.
                                                              type: string
                                                              enum:
                                                                - UNKNOWN
                                                                - OK
                                                                - INFO
                                                                - CRIT
                                                                - WARN
                                                            every:
                                                              description: Check repetition interval.
                                                              type: string
                                                            offset:
                                                              description: 'Duration to delay after the schedule, before executing check.'
                                                              type: string
                                                            tags:
                                                              description: List of tags to write to each status.
                                                              type: array
                                                              items:
                                                                type: object
                                                                properties:
                                                                  key:
                                                                    type: string
                                                                  value:
                                                                    type: string
                                                            statusMessageTemplate:
                                                              description: The template used to generate and write a status message.
                                                              type: string
                                                    - allOf:
                                                        - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/8/properties/check/allOf/0/oneOf/0/allOf/0'
                                                        - type: object
                                                          required:
                                                            - type
                                                          properties:
                                                            type:
                                                              type: string
                                                              enum:
                                                                - threshold
                                                            thresholds:
                                                              type: array
                                                              items:
                                                                oneOf:
                                                                  - allOf:
                                                                      - properties:
                                                                          level:
                                                                            $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/8/properties/check/allOf/0/oneOf/0/allOf/1/properties/level'
                                                                          allValues:
                                                                            description: 'If true, only alert if all values meet threshold.'
                                                                            type: boolean
                                                                      - type: object
                                                                        required:
                                                                          - type
                                                                          - value
                                                                        properties:
                                                                          type:
                                                                            type: string
                                                                            enum:
                                                                              - greater
                                                                          value:
                                                                            type: number
                                                                            format: float
                                                                  - allOf:
                                                                      - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/8/properties/check/allOf/0/oneOf/1/allOf/1/properties/thresholds/items/oneOf/0/allOf/0'
                                                                      - type: object
                                                                        required:
                                                                          - type
                                                                          - value
                                                                        properties:
                                                                          type:
                                                                            type: string
                                                                            enum:
                                                                              - lesser
                                                                          value:
                                                                            type: number
                                                                            format: float
                                                                  - allOf:
                                                                      - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/8/properties/check/allOf/0/oneOf/1/allOf/1/properties/thresholds/items/oneOf/0/allOf/0'
                                                                      - type: object
                                                                        required:
                                                                          - type
                                                                          - min
                                                                          - max
                                                                          - within
                                                                        properties:
                                                                          type:
                                                                            type: string
                                                                            enum:
                                                                              - range
                                                                          min:
                                                                            type: number
                                                                            format: float
                                                                          max:
                                                                            type: number
                                                                            format: float
                                                                          within:
                                                                            type: boolean
                                                                discriminator:
                                                                  propertyName: type
                                                                  mapping:
                                                                    greater: '#/components/schemas/GreaterThreshold'
                                                                    lesser: '#/components/schemas/LesserThreshold'
                                                                    range: '#/components/schemas/RangeThreshold'
                                                            every:
                                                              description: Check repetition interval.
                                                              type: string
                                                            offset:
                                                              description: 'Duration to delay after the schedule, before executing check.'
                                                              type: string
                                                            tags:
                                                              description: List of tags to write to each status.
                                                              type: array
                                                              items:
                                                                type: object
                                                                properties:
                                                                  key:
                                                                    type: string
                                                                  value:
                                                                    type: string
                                                            statusMessageTemplate:
                                                              description: The template used to generate and write a status message.
                                                              type: string
                                                    - allOf:
                                                        - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/8/properties/check/allOf/0/oneOf/0/allOf/0'
                                                        - type: object
                                                          properties:
                                                            type:
                                                              type: string
                                                              enum:
                                                                - custom
                                                          required:
                                                            - type
                                                  discriminator:
                                                    propertyName: type
                                                    mapping:
                                                      deadman: '#/components/schemas/DeadmanCheck'
                                                      threshold: '#/components/schemas/ThresholdCheck'
                                                      custom: '#/components/schemas/CustomCheck'
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - xColumn
                                            - yColumn
                                            - fillColumns
                                            - symbolColumns
                                            - xDomain
                                            - yDomain
                                            - xAxisLabel
                                            - yAxisLabel
                                            - xPrefix
                                            - yPrefix
                                            - xSuffix
                                            - ySuffix
                                          properties:
                                            adaptiveZoomHide:
                                              type: boolean
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - scatter
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                type: string
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yColumn:
                                              type: string
                                            generateYAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            yTotalTicks:
                                              type: integer
                                            yTickStart:
                                              type: number
                                              format: float
                                            yTickStep:
                                              type: number
                                              format: float
                                            fillColumns:
                                              type: array
                                              items:
                                                type: string
                                            symbolColumns:
                                              type: array
                                              items:
                                                type: string
                                            xDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            yDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            xAxisLabel:
                                              type: string
                                            yAxisLabel:
                                              type: string
                                            xPrefix:
                                              type: string
                                            xSuffix:
                                              type: string
                                            yPrefix:
                                              type: string
                                            ySuffix:
                                              type: string
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - xColumn
                                            - yColumn
                                            - xDomain
                                            - yDomain
                                            - xAxisLabel
                                            - yAxisLabel
                                            - xPrefix
                                            - yPrefix
                                            - xSuffix
                                            - ySuffix
                                            - binSize
                                          properties:
                                            adaptiveZoomHide:
                                              type: boolean
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - heatmap
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                type: string
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yColumn:
                                              type: string
                                            generateYAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            yTotalTicks:
                                              type: integer
                                            yTickStart:
                                              type: number
                                              format: float
                                            yTickStep:
                                              type: number
                                              format: float
                                            xDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            yDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            xAxisLabel:
                                              type: string
                                            yAxisLabel:
                                              type: string
                                            xPrefix:
                                              type: string
                                            xSuffix:
                                              type: string
                                            yPrefix:
                                              type: string
                                            ySuffix:
                                              type: string
                                            binSize:
                                              type: number
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - xColumn
                                            - ySeriesColumns
                                            - fillColumns
                                            - xDomain
                                            - yDomain
                                            - xAxisLabel
                                            - yAxisLabel
                                            - xPrefix
                                            - yPrefix
                                            - xSuffix
                                            - ySuffix
                                          properties:
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - mosaic
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                type: string
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yLabelColumnSeparator:
                                              type: string
                                            yLabelColumns:
                                              type: array
                                              items:
                                                type: string
                                            ySeriesColumns:
                                              type: array
                                              items:
                                                type: string
                                            fillColumns:
                                              type: array
                                              items:
                                                type: string
                                            xDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            yDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            xAxisLabel:
                                              type: string
                                            yAxisLabel:
                                              type: string
                                            xPrefix:
                                              type: string
                                            xSuffix:
                                              type: string
                                            yPrefix:
                                              type: string
                                            ySuffix:
                                              type: string
                                            hoverDimension:
                                              type: string
                                              enum:
                                                - auto
                                                - x
                                                - 'y'
                                                - xy
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - geom
                                            - queries
                                            - shape
                                            - axes
                                            - colors
                                            - note
                                            - showNoteWhenEmpty
                                          properties:
                                            adaptiveZoomHide:
                                              type: boolean
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - band
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            axes:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes'
                                            staticLegend:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/staticLegend'
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yColumn:
                                              type: string
                                            generateYAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            yTotalTicks:
                                              type: integer
                                            yTickStart:
                                              type: number
                                              format: float
                                            yTickStep:
                                              type: number
                                              format: float
                                            upperColumn:
                                              type: string
                                            mainColumn:
                                              type: string
                                            lowerColumn:
                                              type: string
                                            hoverDimension:
                                              type: string
                                              enum:
                                                - auto
                                                - x
                                                - 'y'
                                                - xy
                                            geom:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/1/properties/geom'
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - shape
                                            - queries
                                            - note
                                            - showNoteWhenEmpty
                                            - center
                                            - zoom
                                            - allowPanAndZoom
                                            - detectCoordinateFields
                                            - layers
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - geo
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            center:
                                              description: Coordinates of the center of the map
                                              type: object
                                              required:
                                                - lat
                                                - lon
                                              properties:
                                                lat:
                                                  description: Latitude of the center of the map
                                                  type: number
                                                  format: double
                                                lon:
                                                  description: Longitude of the center of the map
                                                  type: number
                                                  format: double
                                            zoom:
                                              description: Zoom level used for initial display of the map
                                              type: number
                                              format: double
                                              minimum: 1
                                              maximum: 28
                                            allowPanAndZoom:
                                              description: 'If true, map zoom and pan controls are enabled on the dashboard view'
                                              type: boolean
                                              default: true
                                            detectCoordinateFields:
                                              description: 'If true, search results get automatically regroupped so that lon,lat and value are treated as columns'
                                              type: boolean
                                              default: true
                                            useS2CellID:
                                              description: 'If true, S2 column is used to calculate lat/lon'
                                              type: boolean
                                            s2Column:
                                              description: String to define the column
                                              type: string
                                            latLonColumns:
                                              description: Object type to define lat/lon columns
                                              type: object
                                              required:
                                                - lat
                                                - lon
                                              properties:
                                                lat:
                                                  description: Object type for key and column definitions
                                                  type: object
                                                  required:
                                                    - key
                                                    - column
                                                  properties:
                                                    key:
                                                      description: Key to determine whether the column is tag/field
                                                      type: string
                                                    column:
                                                      description: Column to look up Lat/Lon
                                                      type: string
                                                lon:
                                                  $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/13/properties/latLonColumns/properties/lat'
                                            mapStyle:
                                              description: 'Define map type - regular, satellite etc.'
                                              type: string
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            layers:
                                              description: List of individual layers shown in the map
                                              type: array
                                              items:
                                                type: object
                                                oneOf:
                                                  - allOf:
                                                      - type: object
                                                        required:
                                                          - type
                                                        properties:
                                                          type:
                                                            type: string
                                                            enum:
                                                              - heatmap
                                                              - circleMap
                                                              - pointMap
                                                              - trackMap
                                                      - type: object
                                                        required:
                                                          - radiusField
                                                          - radiusDimension
                                                          - colorField
                                                          - colorDimension
                                                          - colors
                                                        properties:
                                                          radiusField:
                                                            type: string
                                                            description: Radius field
                                                          radiusDimension:
                                                            $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes/properties/x'
                                                          colorField:
                                                            type: string
                                                            description: Circle color field
                                                          colorDimension:
                                                            $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes/properties/x'
                                                          colors:
                                                            description: Colors define color encoding of data into a visualization
                                                            type: array
                                                            items:
                                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                                          radius:
                                                            description: Maximum radius size in pixels
                                                            type: integer
                                                          interpolateColors:
                                                            description: Interpolate circle color based on displayed value
                                                            type: boolean
                                                  - allOf:
                                                      - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/13/properties/layers/items/oneOf/0/allOf/0'
                                                      - type: object
                                                        required:
                                                          - intensityField
                                                          - intensityDimension
                                                          - radius
                                                          - blur
                                                          - colors
                                                        properties:
                                                          intensityField:
                                                            type: string
                                                            description: Intensity field
                                                          intensityDimension:
                                                            $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes/properties/x'
                                                          radius:
                                                            description: Radius size in pixels
                                                            type: integer
                                                          blur:
                                                            description: Blur for heatmap points
                                                            type: integer
                                                          colors:
                                                            description: Colors define color encoding of data into a visualization
                                                            type: array
                                                            items:
                                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                                  - allOf:
                                                      - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/13/properties/layers/items/oneOf/0/allOf/0'
                                                      - type: object
                                                        required:
                                                          - colorField
                                                          - colorDimension
                                                          - colors
                                                        properties:
                                                          colorField:
                                                            type: string
                                                            description: Marker color field
                                                          colorDimension:
                                                            $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes/properties/x'
                                                          colors:
                                                            description: Colors define color encoding of data into a visualization
                                                            type: array
                                                            items:
                                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                                          isClustered:
                                                            description: Cluster close markers together
                                                            type: boolean
                                                          tooltipColumns:
                                                            description: An array for which columns to display in tooltip
                                                            type: array
                                                            items:
                                                              type: string
                                                  - allOf:
                                                      - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/13/properties/layers/items/oneOf/0/allOf/0'
                                                      - type: object
                                                        required:
                                                          - trackWidth
                                                          - speed
                                                          - randomColors
                                                          - trackPointVisualization
                                                    properties:
                                                      trackWidth:
                                                        description: Width of the track
                                                        type: integer
                                                      speed:
                                                        description: Speed of the track animation
                                                        type: integer
                                                      randomColors:
                                                        description: Assign different colors to different tracks
                                                        type: boolean
                                                      colors:
                                                        description: Colors define color encoding of data into a visualization
                                                        type: array
                                                        items:
                                                          $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                          labels:
                            $ref: '#/components/schemas/Variable/properties/labels'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
    get:
      operationId: GetDashboards
      tags:
        - Dashboards
      summary: List dashboards
      description: |
        Lists [dashboards]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#dashboard).

        #### Related guides

        - [Manage dashboards]({{% INFLUXDB_DOCS_URL %}}/visualize-data/dashboards/).
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - $ref: '#/paths/~1users/get/parameters/1'
        - $ref: '#/paths/~1users/get/parameters/2'
        - in: query
          name: descending
          required: false
          schema:
            type: boolean
            default: false
        - in: query
          name: owner
          description: 'A user ID. Only returns [dashboards]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#dashboard) where the specified user has the `owner` role.'
          schema:
            type: string
        - in: query
          name: sortBy
          description: The column to sort by.
          schema:
            type: string
            enum:
              - ID
              - CreatedAt
              - UpdatedAt
        - in: query
          name: id
          description: |
            A list of dashboard IDs.
            Returns only the specified [dashboards]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#dashboard).
            If you specify `id` and `owner`, only `id` is used.
          schema:
            type: array
            items:
              type: string
        - in: query
          name: orgID
          description: |
            An organization ID.
            Only returns [dashboards]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#dashboard) that belong to the specified
            [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
          schema:
            type: string
        - in: query
          name: org
          description: |
            An organization name.
            Only returns [dashboards]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#dashboard) that belong to the specified
            [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
          schema:
            type: string
      responses:
        '200':
          description: Success. The response body contains dashboards.
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    description: |
                      URI pointers for additional paged results.
                    properties:
                      next:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                      self:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                      prev:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                    required:
                      - self
                  dashboards:
                    type: array
                    items:
                      $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/0'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  /tasks:
    get:
      operationId: GetTasks
      tags:
        - Data I/O endpoints
        - Tasks
      summary: List tasks
      description: |
        Lists [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task).

        To limit which tasks are returned, pass query parameters in your request.
        If no query parameters are passed, InfluxDB returns all tasks up to the default `limit`.

        #### Related guide

        - [Process data with InfluxDB tasks]({{% INFLUXDB_DOCS_URL %}}/process-data/)
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: name
          description: |
            A task name.
            Only returns [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task)
            that have the specified name.
            Different tasks may have the same name.
          schema:
            type: string
        - in: query
          name: after
          schema:
            type: string
          description: |
            A task ID.
            Only returns [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) created after the specified task.
        - in: query
          name: user
          schema:
            type: string
          description: |
            A user ID.
            Only returns [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task)
            owned by the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
        - in: query
          name: org
          schema:
            type: string
          description: |
            An organization name.
            Only returns tasks owned by the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
        - in: query
          name: orgID
          schema:
            type: string
          description: |
            An organization ID.
            Only returns [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) owned by the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
        - in: query
          name: status
          schema:
            type: string
            enum:
              - active
              - inactive
          description: |
            A task status.
            Only returns [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) that have the specified status.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
          description: |
            The maximum number of [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) to return.
            Default is `100`.
            The minimum is `1` and the maximum is `500`.

            To reduce the payload size, combine _`type=basic`_ and _`limit`_ (see _Request samples_).
            For more information about the `basic` response, see the _`type`_ parameter.
        - in: query
          name: type
          description: |
            A task type.
            Specifies the level of detail for [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) in the response.
            Default is `system`.
            The default (`system`) response contains all the metadata properties for tasks.
            To reduce the response size, pass `basic` to omit some task properties (`flux`, `createdAt`, `updatedAt`).
          required: false
          schema:
            default: ''
            type: string
            enum:
              - basic
              - system
      responses:
        '200':
          description: |
            Success.
            The response body contains the list of tasks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
              examples:
                basicTypeTaskOutput:
                  summary: Basic output
                  description: |
                    A sample response body for the `?type=basic` parameter.
                    `type=basic` omits some task fields (`createdAt` and `updatedAt`)
                    and field values (`org`, `flux`) in the response.
                  value:
                    links:
                      self: /api/v2/tasks?limit=100
                    tasks:
                      - links:
                          labels: /api/v2/tasks/09956cbb6d378000/labels
                          logs: /api/v2/tasks/09956cbb6d378000/logs
                          members: /api/v2/tasks/09956cbb6d378000/members
                          owners: /api/v2/tasks/09956cbb6d378000/owners
                          runs: /api/v2/tasks/09956cbb6d378000/runs
                          self: /api/v2/tasks/09956cbb6d378000
                        labels: []
                        id: 09956cbb6d378000
                        orgID: 48c88459ee424a04
                        org: ''
                        ownerID: 0772396d1f411000
                        name: task1
                        status: active
                        flux: ''
                        every: 30m
                        latestCompleted: '2022-06-30T15:00:00Z'
                        lastRunStatus: success
                systemTypeTaskOutput:
                  summary: System output
                  description: |
                    A sample response body for the `?type=system` parameter.
                    `type=system` returns all task fields.
                  value:
                    links:
                      self: /api/v2/tasks?limit=100
                    tasks:
                      - links:
                          labels: /api/v2/tasks/09956cbb6d378000/labels
                          logs: /api/v2/tasks/09956cbb6d378000/logs
                          members: /api/v2/tasks/09956cbb6d378000/members
                          owners: /api/v2/tasks/09956cbb6d378000/owners
                          runs: /api/v2/tasks/09956cbb6d378000/runs
                          self: /api/v2/tasks/09956cbb6d378000
                        labels: []
                        id: 09956cbb6d378000
                        orgID: 48c88459ee424a04
                        org: my-iot-center
                        ownerID: 0772396d1f411000
                        name: task1
                        description: IoT Center 90-day environment average.
                        status: active
                        flux: |-
                          option task = {name: "task1", every: 30m}

                          from(bucket: "iot_center")
                              |> range(start: -90d)
                              |> filter(fn: (r) => r._measurement == "environment")
                              |> aggregateWindow(every: 1h, fn: mean)
                        every: 30m
                        latestCompleted: '2022-06-30T15:00:00Z'
                        lastRunStatus: success
                        createdAt: '2022-06-27T15:09:06Z'
                        updatedAt: '2022-06-28T18:10:15Z'
        '401':
          description: |
            Unauthorized. The error may indicate one of the following:

              * The `Authorization: Token` header is missing or malformed.
              * The API token value is missing from the header.
              * The token doesn't have sufficient permissions to write to this organization and bucket.
          content:
            application/json:
              schema:
                properties:
                  code:
                    description: |
                      The HTTP status code description. Default is `unauthorized`.
                    readOnly: true
                    type: string
                    enum:
                      - unauthorized
                  message:
                    readOnly: true
                    description: A human-readable message that may contain detail about the error.
                    type: string
              examples:
                tokenNotAuthorized:
                  summary: Token is not authorized to access a resource
                  value:
                    code: unauthorized
                    message: unauthorized access
        '500':
          $ref: '#/paths/~1users/get/responses/500'
        default:
          $ref: '#/paths/~1config/get/responses/401'
      x-codeSamples:
        - lang: Shell
          label: 'cURL: all tasks, basic output'
          source: |
            curl https://localhost:8086/api/v2/tasks/?limit=-1&type=basic \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Token INFLUX_API_TOKEN'
    post:
      operationId: PostTasks
      tags:
        - Data I/O endpoints
        - Tasks
      summary: Create a task
      description: |
        Creates a [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) and returns the task.

        Use this endpoint to create a scheduled task that runs a script.

        #### Related guides

        - [Get started with tasks]({{% INFLUXDB_DOCS_URL %}}/process-data/get-started/)
        - [Create a task]({{% INFLUXDB_DOCS_URL %}}/process-data/manage-tasks/create-task/)
        - [Common tasks]({{% INFLUXDB_DOCS_URL %}}/process-data/common-tasks/)
        - [Task configuration options]({{% INFLUXDB_DOCS_URL %}}/process-data/task-options/)
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: |
          In the request body, provide the task.

          #### InfluxDB OSS

          - Requires either the `org` parameter or the `orgID` parameter.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
            examples:
              TaskWithFlux:
                $ref: '#/components/examples/TaskWithFluxRequest'
      responses:
        '201':
          description: Success. The response body contains a `tasks` list with the task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: |
            Bad request.
            The response body contains detail about the error.

            #### InfluxDB OSS

            - Returns this error if an incorrect value is passed for `org` or `orgID`.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
              examples:
                orgProvidedNotFound:
                  summary: The organization specified by org or orgID doesn't own the token passed in the header
                  value:
                    code: invalid
                    message: 'failed to decode request body: organization not found'
                missingFluxError:
                  summary: The request body doesn't contain a Flux query
                  value:
                    code: invalid
                    message: 'failed to decode request: missing flux'
        '401':
          $ref: '#/paths/~1tasks/get/responses/401'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
  '/tasks/{taskID}':
    get:
      operationId: GetTasksID
      tags:
        - Data I/O endpoints
        - Tasks
      summary: Retrieve a task
      description: |
        Retrieves the specified [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task).
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: |
            A task ID.
            Specifies the [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) to retrieve.
      responses:
        '200':
          description: Success. The response body contains the task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: |
            Bad request.
            The response body contains detail about the error.

            #### InfluxDB OSS

            - Returns this error if an incorrect value is passed in the `org` parameter or `orgID` parameter.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
              examples:
                orgProvidedNotFound:
                  summary: The org or orgID passed doesn't own the token passed in the header
                  value:
                    code: invalid
                    message: 'failed to decode request body: organization not found'
        '401':
          $ref: '#/paths/~1tasks/get/responses/401'
        '404':
          description: |
            Not found.
            A requested resource was not found.
            The response body contains the requested resource type and the name value
            (if you passed it)--for example:

            - `"organization name \"my-org\" not found"`
            - `"organization not found"`: indicates you passed an ID that did not match
               an organization.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users/get/responses/401/content/application~1json/schema'
              examples:
                org-not-found:
                  summary: Organization name not found
                  value:
                    code: not found
                    message: organization name "my-org" not found
                bucket-not-found:
                  summary: Bucket name not found
                  value:
                    code: not found
                    message: bucket "air_sensor" not found
                orgID-not-found:
                  summary: Organization ID not found
                  value:
                    code: not found
                    message: organization not found
        '500':
          $ref: '#/paths/~1users/get/responses/500'
        default:
          $ref: '#/paths/~1config/get/responses/401'
    patch:
      operationId: PatchTasksID
      tags:
        - Tasks
      summary: Update a task
      description: |
        Updates the specified [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task),
        and then cancels all scheduled runs of the task.

        Use this endpoint to set, modify, or clear task properties--for example: `cron`, `name`, `flux`, `status`.
        Once InfluxDB applies the update, it cancels all previously scheduled runs of the task.

        #### Related guides

        - [Update a task]({{% INFLUXDB_DOCS_URL %}}/process-data/manage-tasks/update-task/)
        - [Task configuration options]({{% INFLUXDB_DOCS_URL %}}/process-data/task-options/)
      requestBody:
        description: |
          In the request body, provide the task properties to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
            examples:
              TaskWithFlux:
                $ref: '#/components/examples/TaskWithFluxRequest'
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: |
            A task ID.
            Specifies the [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task)to update.
      responses:
        '200':
          description: Success. The response body contains the updated task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/paths/~1tasks~1%7BtaskID%7D/get/responses/400'
        '401':
          $ref: '#/paths/~1tasks/get/responses/401'
        '404':
          $ref: '#/paths/~1tasks~1%7BtaskID%7D/get/responses/404'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
        default:
          $ref: '#/paths/~1config/get/responses/401'
    delete:
      operationId: DeleteTasksID
      tags:
        - Tasks
      summary: Delete a task
      description: |
        Deletes the specified [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task)
        and all associated records (task runs, logs, and labels).
        Once the task is deleted, InfluxDB cancels all scheduled runs of the task.

        To disable a task instead of delete it, use
        [`PATCH /api/v2/tasks/TASK_ID`](#operation/PatchTasksID) to set the task status
         to `inactive`.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: |
            A task ID.
            Specifies the [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) to delete.
      responses:
        '204':
          description: Success. The task and runs are deleted. Scheduled runs are canceled.
        '400':
          $ref: '#/paths/~1tasks~1%7BtaskID%7D/get/responses/400'
        '401':
          $ref: '#/paths/~1tasks/get/responses/401'
        '404':
          $ref: '#/paths/~1tasks~1%7BtaskID%7D/get/responses/404'
        '500':
          $ref: '#/paths/~1users/get/responses/500'
        default:
          $ref: '#/paths/~1config/get/responses/401'
components:
  parameters: null
  schemas:
    User:
      properties:
        id:
          readOnly: true
          type: string
          description: The user ID.
        name:
          type: string
          description: The user name.
        status:
          description: |
            If `inactive`, the user is inactive.
            Default is `active`.
          default: active
          type: string
          enum:
            - active
            - inactive
      required:
        - name
    Users:
      type: object
      properties:
        links:
          type: object
          properties:
            self:
              type: string
              format: uri
        users:
          type: array
          items:
            $ref: '#/components/schemas/OnboardingResponse/properties/user'
    OnboardingRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        org:
          type: string
        bucket:
          type: string
        retentionPeriodSeconds:
          type: integer
          format: int64
        retentionPeriodHrs:
          type: integer
          deprecated: true
          description: |
            Retention period *in nanoseconds* for the new bucket. This key's name has been misleading since OSS 2.0 GA, please transition to use `retentionPeriodSeconds`
        token:
          type: string
          description: |
            Authentication token to set on the initial user. If not specified, the server will generate a token.
      required:
        - username
        - org
        - bucket
    OnboardingResponse:
      type: object
      properties:
        user:
          properties:
            id:
              readOnly: true
              type: string
              description: |
                The user ID.
            name:
              type: string
              description: |
                The user name.
            status:
              description: |
                The status of a user.
                An inactive user can't read or write resources.
              default: active
              type: string
              enum:
                - active
                - inactive
            links:
              type: object
              readOnly: true
              example:
                self: /api/v2/users/1
              properties:
                self:
                  type: string
                  format: uri
          required:
            - name
        org:
          properties:
            links:
              type: object
              readOnly: true
              example:
                self: /api/v2/orgs/1
                members: /api/v2/orgs/1/members
                owners: /api/v2/orgs/1/owners
                labels: /api/v2/orgs/1/labels
                secrets: /api/v2/orgs/1/secrets
                buckets: /api/v2/buckets?org=myorg
                tasks: /api/v2/tasks?org=myorg
                dashboards: /api/v2/dashboards?org=myorg
              properties:
                self:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                members:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                owners:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                labels:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                secrets:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                buckets:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                tasks:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                dashboards:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
            id:
              readOnly: true
              type: string
            name:
              type: string
            description:
              type: string
            createdAt:
              type: string
              format: date-time
              readOnly: true
            updatedAt:
              type: string
              format: date-time
              readOnly: true
            status:
              description: If inactive the organization is inactive.
              default: active
              type: string
              enum:
                - active
                - inactive
          required:
            - name
        bucket:
          properties:
            links:
              type: object
              readOnly: true
              example:
                labels: /api/v2/buckets/1/labels
                members: /api/v2/buckets/1/members
                org: /api/v2/orgs/2
                owners: /api/v2/buckets/1/owners
                self: /api/v2/buckets/1
                write: /api/v2/write?org=2&bucket=1
              properties:
                labels:
                  description: The URL to retrieve labels for this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                members:
                  description: The URL to retrieve members that can read this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                org:
                  description: The URL to retrieve parent organization for this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                owners:
                  description: The URL to retrieve owners that can read and write to this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                self:
                  description: The URL for this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                write:
                  description: The URL to write line protocol to this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
            id:
              readOnly: true
              type: string
            type:
              readOnly: true
              type: string
              default: user
              enum:
                - user
                - system
            name:
              type: string
            description:
              type: string
            orgID:
              type: string
            rp:
              type: string
            schemaType:
              default: implicit
              type: string
              enum:
                - implicit
                - explicit
            createdAt:
              type: string
              format: date-time
              readOnly: true
            updatedAt:
              type: string
              format: date-time
              readOnly: true
            retentionRules:
              type: array
              description: |
                Retention rules to expire or retain data.
                The InfluxDB `/api/v2` API uses `RetentionRules` to configure the [retention period]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#retention-period).

                #### InfluxDB Cloud

                - `retentionRules` is required.

                #### InfluxDB OSS

                - `retentionRules` isn't required.
              items:
                type: object
                properties:
                  type:
                    type: string
                    default: expire
                    enum:
                      - expire
                  everySeconds:
                    type: integer
                    format: int64
                    description: |
                      The duration in seconds for how long data will be kept in the database.
                      The default duration is 2592000 (30 days).
                      0 represents infinite retention.
                    example: 86400
                    default: 2592000
                    minimum: 0
                  shardGroupDurationSeconds:
                    type: integer
                    format: int64
                    description: |
                      The shard group duration.
                      The duration or interval (in seconds) that each shard group covers.

                      #### InfluxDB Cloud

                      - Does not use `shardGroupDurationsSeconds`.

                      #### InfluxDB OSS

                      - Default value depends on the
                      [bucket retention period]({{% INFLUXDB_DOCS_URL %}}/v2.3/reference/internals/shards/#shard-group-duration).
                required:
                  - everySeconds
            labels:
              $ref: '#/components/schemas/Variable/properties/labels'
          required:
            - name
            - retentionRules
        auth:
          required:
            - orgID
            - permissions
          allOf:
            - $ref: '#/paths/~1authorizations~1%7BauthID%7D/patch/requestBody/content/application~1json/schema'
            - type: object
              properties:
                createdAt:
                  type: string
                  format: date-time
                  readOnly: true
                updatedAt:
                  type: string
                  format: date-time
                  readOnly: true
                orgID:
                  type: string
                  description: |
                    The organization ID.
                    Specifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization) that the authorization is scoped to.
                permissions:
                  type: array
                  minItems: 1
                  description: |
                    The list of permissions.
                    An authorization must have at least one permission.
                  items:
                    $ref: '#/paths/~1authorizations/post/requestBody/content/application~1json/schema/allOf/1/properties/permissions/items'
                id:
                  readOnly: true
                  type: string
                  description: The authorization ID.
                token:
                  readOnly: true
                  type: string
                  description: |
                    The API token.
                    The token value is unique to the authorization.
                    [API tokens]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token) are
                    used to authenticate and authorize InfluxDB API requests and `influx`
                    CLI commands--after receiving the request, InfluxDB checks that the
                    token is valid and that the `permissions` allow the requested action(s).
                userID:
                  readOnly: true
                  type: string
                  description: 'The user ID. Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that owns the authorization. If _scoped_, the user that the authorization is scoped to; otherwise, the creator of the authorization.'
                user:
                  readOnly: true
                  type: string
                  description: |
                    The user name.
                    Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that owns the authorization.
                    If the authorization is _scoped_ to a user, the user;
                    otherwise, the creator of the authorization.
                org:
                  readOnly: true
                  type: string
                  description: |
                    The organization name.
                    Specifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization)
                    that the token is scoped to.
                links:
                  type: object
                  readOnly: true
                  example:
                    self: /api/v2/authorizations/1
                    user: /api/v2/users/12
                  properties:
                    self:
                      readOnly: true
                      $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                    user:
                      readOnly: true
                      $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
    Variable:
      type: object
      required:
        - name
        - orgID
        - arguments
      properties:
        links:
          type: object
          readOnly: true
          properties:
            self:
              type: string
              format: uri
            org:
              type: string
              format: uri
            labels:
              type: string
              format: uri
        id:
          readOnly: true
          type: string
        orgID:
          type: string
        name:
          type: string
        description:
          type: string
        selected:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            $ref: '#/paths/~1scrapers~1%7BscraperTargetID%7D~1labels/post/responses/201/content/application~1json/schema/properties/label'
        arguments:
          type: object
          oneOf:
            - properties:
                type:
                  type: string
                  enum:
                    - query
                values:
                  type: object
                  properties:
                    query:
                      type: string
                    language:
                      type: string
            - properties:
                type:
                  type: string
                  enum:
                    - constant
                values:
                  type: array
                  items:
                    type: string
            - properties:
                type:
                  type: string
                  enum:
                    - map
                values:
                  type: object
                  additionalProperties:
                    type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Variables:
      type: object
      example:
        variables:
          - id: '1221432'
            name: ':ok:'
            selected:
              - hello
            arguments:
              type: constant
              values:
                - howdy
                - hello
                - hi
                - yo
                - oy
          - id: '1221432'
            name: ':ok:'
            selected:
              - c
            arguments:
              type: map
              values:
                a: fdjaklfdjkldsfjlkjdsa
                b: dfaksjfkljekfajekdljfas
                c: fdjksajfdkfeawfeea
          - id: '1221432'
            name: ':ok:'
            selected:
              - host
            arguments:
              type: query
              query: 'from(bucket: "foo") |> showMeasurements()'
              language: flux
      properties:
        variables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
    Source:
      type: object
      properties:
        links:
          type: object
          properties:
            self:
              type: string
            query:
              type: string
            health:
              type: string
            buckets:
              type: string
        id:
          type: string
        orgID:
          type: string
        default:
          type: boolean
        name:
          type: string
        type:
          type: string
          enum:
            - v1
            - v2
            - self
        url:
          type: string
          format: uri
        insecureSkipVerify:
          type: boolean
        telegraf:
          type: string
        token:
          type: string
        username:
          type: string
        password:
          type: string
        sharedSecret:
          type: string
        metaUrl:
          type: string
          format: uri
        defaultRP:
          type: string
        languages:
          type: array
          readOnly: true
          items:
            type: string
            enum:
              - flux
              - influxql
    Sources:
      type: object
      properties:
        links:
          type: object
          properties:
            self:
              type: string
              format: uri
        sources:
          type: array
          items:
            $ref: '#/components/schemas/Source'
    ScraperTargetRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the scraper target.
        type:
          type: string
          description: The type of the metrics to be parsed.
          enum:
            - prometheus
        url:
          type: string
          description: The URL of the metrics endpoint.
          example: 'http://localhost:9090/metrics'
        orgID:
          type: string
          description: The organization ID.
        bucketID:
          type: string
          description: The ID of the bucket to write to.
        allowInsecure:
          type: boolean
          description: Skip TLS verification on endpoint.
          default: false
    ScraperTargetResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ScraperTargetRequest'
        - type: object
          properties:
            id:
              type: string
              readOnly: true
            org:
              type: string
              description: The name of the organization.
            bucket:
              type: string
              description: The bucket name.
            links:
              type: object
              readOnly: true
              example:
                self: /api/v2/scrapers/1
                owners: /api/v2/scrapers/1/owners
                members: /api/v2/scrapers/1/members
                bucket: /api/v2/buckets/1
                organization: /api/v2/orgs/1
              properties:
                self:
                  type: string
                  format: uri
                  readOnly: true
                  description: URI of resource.
                members:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                owners:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                bucket:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                organization:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
    ScraperTargetResponses:
      type: object
      properties:
        configurations:
          type: array
          items:
            $ref: '#/components/schemas/ScraperTargetResponse'
    MetadataBackup:
      type: object
      properties:
        kv:
          type: string
          format: binary
        sql:
          type: string
          format: binary
        buckets:
          $ref: '#/components/schemas/BucketMetadataManifests'
      required:
        - kv
        - sql
        - buckets
    BucketMetadataManifests:
      type: array
      items:
        $ref: '#/components/schemas/BucketMetadataManifest'
    BucketMetadataManifest:
      type: object
      properties:
        organizationID:
          type: string
        organizationName:
          type: string
        bucketID:
          type: string
        bucketName:
          type: string
        description:
          type: string
        defaultRetentionPolicy:
          type: string
        retentionPolicies:
          $ref: '#/components/schemas/RetentionPolicyManifests'
      required:
        - organizationID
        - organizationName
        - bucketID
        - bucketName
        - defaultRetentionPolicy
        - retentionPolicies
    RetentionPolicyManifests:
      type: array
      items:
        $ref: '#/components/schemas/RetentionPolicyManifest'
    RetentionPolicyManifest:
      type: object
      properties:
        name:
          type: string
        replicaN:
          type: integer
        duration:
          type: integer
          format: int64
        shardGroupDuration:
          type: integer
          format: int64
        shardGroups:
          $ref: '#/components/schemas/ShardGroupManifests'
        subscriptions:
          $ref: '#/components/schemas/SubscriptionManifests'
      required:
        - name
        - replicaN
        - duration
        - shardGroupDuration
        - shardGroups
        - subscriptions
    ShardGroupManifests:
      type: array
      items:
        $ref: '#/components/schemas/ShardGroupManifest'
    ShardGroupManifest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        truncatedAt:
          type: string
          format: date-time
        shards:
          $ref: '#/components/schemas/ShardManifests'
      required:
        - id
        - startTime
        - endTime
        - shards
    ShardManifests:
      type: array
      items:
        $ref: '#/components/schemas/ShardManifest'
    ShardManifest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        shardOwners:
          $ref: '#/components/schemas/ShardOwners'
      required:
        - id
        - shardOwners
    ShardOwners:
      type: array
      items:
        $ref: '#/components/schemas/ShardOwner'
    ShardOwner:
      type: object
      properties:
        nodeID:
          type: integer
          format: int64
          description: The ID of the node that owns the shard.
      required:
        - nodeID
    SubscriptionManifests:
      type: array
      items:
        $ref: '#/components/schemas/SubscriptionManifest'
    SubscriptionManifest:
      type: object
      properties:
        name:
          type: string
        mode:
          type: string
        destinations:
          type: array
          items:
            type: string
      required:
        - name
        - mode
        - destinations
    RestoredBucketMappings:
      type: object
      properties:
        id:
          description: New ID of the restored bucket
          type: string
        name:
          type: string
        shardMappings:
          $ref: '#/components/schemas/BucketShardMappings'
      required:
        - id
        - name
        - shardMappings
    BucketShardMappings:
      type: array
      items:
        $ref: '#/components/schemas/BucketShardMapping'
    BucketShardMapping:
      type: object
      properties:
        oldId:
          type: integer
          format: int64
        newId:
          type: integer
          format: int64
      required:
        - oldId
        - newId
    Config:
      type: object
      properties:
        config:
          type: object
    RemoteConnection:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        orgID:
          type: string
        description:
          type: string
        remoteURL:
          type: string
          format: uri
        remoteOrgID:
          type: string
        allowInsecureTLS:
          type: boolean
          default: false
      required:
        - id
        - name
        - orgID
        - remoteURL
        - allowInsecureTLS
    RemoteConnections:
      type: object
      properties:
        remotes:
          type: array
          items:
            $ref: '#/components/schemas/RemoteConnection'
    RemoteConnectionCreationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orgID:
          type: string
        remoteURL:
          type: string
          format: uri
        remoteAPIToken:
          type: string
        remoteOrgID:
          type: string
        allowInsecureTLS:
          type: boolean
          default: false
      required:
        - name
        - orgID
        - remoteURL
        - remoteAPIToken
        - allowInsecureTLS
    RemoteConnectionUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        remoteURL:
          type: string
          format: uri
        remoteAPIToken:
          type: string
        remoteOrgID:
          type: string
        allowInsecureTLS:
          type: boolean
          default: false
    Replication:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        orgID:
          type: string
        remoteID:
          type: string
        localBucketID:
          type: string
        remoteBucketID:
          type: string
        remoteBucketName:
          type: string
        maxQueueSizeBytes:
          type: integer
          format: int64
        currentQueueSizeBytes:
          type: integer
          format: int64
        latestResponseCode:
          type: integer
        latestErrorMessage:
          type: string
        dropNonRetryableData:
          type: boolean
      required:
        - id
        - name
        - remoteID
        - orgID
        - localBucketID
        - maxQueueSizeBytes
        - currentQueueSizeBytes
    Replications:
      type: object
      properties:
        replications:
          type: array
          items:
            $ref: '#/components/schemas/Replication'
    ReplicationCreationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orgID:
          type: string
        remoteID:
          type: string
        localBucketID:
          type: string
        remoteBucketID:
          type: string
        remoteBucketName:
          type: string
        maxQueueSizeBytes:
          type: integer
          format: int64
          minimum: 33554430
          default: 67108860
        dropNonRetryableData:
          type: boolean
          default: false
        maxAgeSeconds:
          type: integer
          format: int64
          minimum: 0
          default: 604800
      required:
        - name
        - orgID
        - remoteID
        - localBucketID
        - maxQueueSizeBytes
        - maxAgeSeconds
    ReplicationUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        remoteID:
          type: string
        remoteBucketID:
          type: string
        remoteBucketName:
          type: string
        maxQueueSizeBytes:
          type: integer
          format: int64
          minimum: 33554430
        dropNonRetryableData:
          type: boolean
        maxAgeSeconds:
          type: integer
          format: int64
          minimum: 0
    Tasks:
      type: object
      properties:
        links:
          readOnly: true
          $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/links'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    Task:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: |
            The resource ID that InfluxDB uses to uniquely identify the task.
        orgID:
          description: |
            An organization ID.
            Identifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization) that owns the task.
          type: string
        org:
          description: |
            An organization name.
            Identifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization) that owns the task.
          type: string
        name:
          description: The name of the task.
          type: string
        description:
          description: A description of the task.
          type: string
        ownerID:
          description: |
            A user ID.
            Identifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that owns the task.

            To find a user ID, use the
            [`GET /api/v2/users` endpoint](#operation/GetUsers) to
            list users.
          type: string
        status:
          type: string
          enum:
            - active
            - inactive
          description: |
            `inactive` cancels scheduled runs and prevents manual runs of the task.
        labels:
          $ref: '#/components/schemas/Variable/properties/labels'
        authorizationID:
          description: |
            An authorization ID.
            Identifies the authorization used when the task communicates with the query engine.

            To find an authorization ID, use the
            [`GET /api/v2/authorizations` endpoint](#operation/GetAuthorizations) to
            list authorizations.
          type: string
        flux:
          description: |
            Flux with [task configuration options]({{% INFLUXDB_DOCS_URL %}}/process-data/task-options/)
            and the script for the task to run.

            #### Related guides

            - [Task configuration options]({{% INFLUXDB_DOCS_URL %}}/process-data/task-options/)
          type: string
          format: Flux
        every:
          description: 'The interval ([duration literal]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#rfc3339-timestamp)) at which the task runs. `every` also determines when the task first runs, depending on the specified time.'
          type: string
          format: duration
        cron:
          description: 'A [Cron expression](https://en.wikipedia.org/wiki/Cron#Overview) that defines the schedule on which the task runs. InfluxDB uses the system time when evaluating Cron expressions.'
          type: string
          format: cron
        offset:
          description: 'A [duration](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals) to delay execution of the task after the scheduled time has elapsed. `0` removes the offset.'
          type: string
          format: duration
        latestCompleted:
          description: 'A timestamp ([RFC3339 date/time format]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#rfc3339-timestamp)) of the latest scheduled and completed run.'
          type: string
          format: date-time
          readOnly: true
        lastRunStatus:
          readOnly: true
          type: string
          enum:
            - failed
            - success
            - canceled
        lastRunError:
          readOnly: true
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        links:
          type: object
          readOnly: true
          example:
            self: /api/v2/tasks/1
            owners: /api/v2/tasks/1/owners
            members: /api/v2/tasks/1/members
            labels: /api/v2/tasks/1/labels
            runs: /api/v2/tasks/1/runs
            logs: /api/v2/tasks/1/logs
          properties:
            self:
              $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
            owners:
              $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
            members:
              $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
            runs:
              $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
            logs:
              $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
            labels:
              $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
      required:
        - id
        - name
        - orgID
        - flux
    TaskCreateRequest:
      type: object
      properties:
        orgID:
          $ref: '#/components/schemas/Task/properties/orgID'
        org:
          $ref: '#/components/schemas/Task/properties/org'
        name:
          $ref: '#/components/schemas/Task/properties/name'
        description:
          $ref: '#/components/schemas/Task/properties/description'
        flux:
          $ref: '#/components/schemas/Task/properties/flux'
        status:
          $ref: '#/components/schemas/Task/properties/status'
      required:
        - flux
    TaskUpdateRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Task/properties/status'
        flux:
          $ref: '#/components/schemas/Task/properties/flux'
        name:
          $ref: '#/components/schemas/Task/properties/name'
        every:
          $ref: '#/components/schemas/Task/properties/every'
        cron:
          $ref: '#/components/schemas/Task/properties/cron'
        offset:
          $ref: '#/components/schemas/Task/properties/offset'
        description:
          $ref: '#/components/schemas/Task/properties/description'
  responses: null
  examples:
    AuthorizationPostRequest:
      summary: An authorization for a resource type
      description: Creates an authorization.
      value:
        orgID: INFLUX_ORG_ID
        description: iot_users read buckets
        permissions:
          - action: read
            resource:
              type: buckets
    AuthorizationWithResourcePostRequest:
      summary: An authorization for a resource
      description: Creates an authorization for access to a specific resource.
      value:
        orgID: INFLUX_ORG_ID
        description: iot_users read buckets
        permissions:
          - action: read
            resource:
              type: buckets
              id: INFLUX_BUCKET_ID
    AuthorizationWithUserPostRequest:
      summary: An authorization scoped to a user
      description: Creates an authorization scoped to a specific user.
      value:
        orgID: INFLUX_ORG_ID
        userID: INFLUX_USER_ID
        description: iot_user write to bucket
        permissions:
          - action: write
            resource:
              type: buckets
              id: INFLUX_BUCKET_ID
    TaskWithFluxRequest:
      summary: A task with Flux
      description: Sets the `flux` property with Flux task options and a query.
      value:
        flux: "option task = {name: \"CPU Total 1 Hour New\", every: 1h}from(bucket: \"telegraf\")|> range(start: -1h)|> filter(fn: (r) => (r._measurement == \"cpu\"))|> filter(fn: (r) =>\n\t\t(r._field == \"usage_system\"))|> filter(fn: (r) => (r.cpu == \"cpu-total\"))|> aggregateWindow(every: 1h, fn: max)|> to(bucket: \"cpu_usage_user_total_1h\", org: \"INFLUX_ORG\")"
        status: active
        description: This task contains Flux that configures the task schedule and downsamples CPU data every hour.
  securitySchemes:
    TokenAuthentication:
      type: apiKey
      name: Authorization
      in: header
      description: |
        Use the [Token authentication](#section/Authentication/TokenAuthentication)
        scheme to authenticate to the InfluxDB API.

        In your API requests, send an `Authorization` header.
        For the header value, provide the word `Token` followed by a space and an InfluxDB API token.
        The word `Token` is case-sensitive.

        ### Syntax

        `Authorization: Token INFLUX_API_TOKEN`

        ### Example

        #### Use Token authentication with cURL

        The following example shows how to use cURL to send an API request that uses Token authentication:

        ```sh
        curl --request GET "INFLUX_URL/api/v2/buckets" \
            --header "Authorization: Token INFLUX_API_TOKEN"
        ```

        Replace the following:

          - *`INFLUX_URL`*: your InfluxDB URL
          - *`INFLUX_API_TOKEN`*: your [InfluxDB API token]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token)

        ### Related endpoints

        - [`/authorizations` endpoints](#tag/Authorizations)

        ### Related guides

        - [Authorize API requests]({{% INFLUXDB_DOCS_URL %}}/api-guide/api_intro/#authentication)
        - [Manage API tokens]({{% INFLUXDB_DOCS_URL %}}/security/tokens/)
    BasicAuthentication:
      type: http
      scheme: basic
      description: |
        ### Basic authentication scheme

        Use the HTTP Basic authentication scheme for InfluxDB `/api/v2` API operations that support it:

        ### Syntax

        `Authorization: Basic BASE64_ENCODED_CREDENTIALS`

        To construct the `BASE64_ENCODED_CREDENTIALS`, combine the username and
        the password with a colon (`USERNAME:PASSWORD`), and then encode the
        resulting string in [base64](https://developer.mozilla.org/en-US/docs/Glossary/Base64).
        Many HTTP clients encode the credentials for you before sending the
        request.

        _**Warning**: Base64-encoding can easily be reversed to obtain the original
        username and password. It is used to keep the data intact and does not provide
        security. You should always use HTTPS when authenticating or sending a request with
        sensitive information._

        ### Examples

        In the examples, replace the following:

        - **`USERNAME`**: InfluxDB username
        - **`PASSWORD`**: InfluxDB [API token]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token)
        - **`INFLUX_URL`**: your InfluxDB URL

        #### Encode credentials with cURL

        The following example shows how to use cURL to send an API request that uses Basic authentication.
        With the `--user` option, cURL encodes the credentials and passes them
        in the `Authorization: Basic` header.

        ```sh
        curl --get "INFLUX_URL/api/v2/signin"
            --user "USERNAME":"PASSWORD"
        ```

        #### Encode credentials with Flux

        The Flux [`http.basicAuth()` function](https://docs.influxdata.com/flux/v0.x/stdlib/http/basicauth/) returns a Base64-encoded
        basic authentication header using a specified username and password combination.

        #### Encode credentials with JavaScript

        The following example shows how to use the JavaScript `btoa()` function
        to create a Base64-encoded string:

        ```js
        btoa('USERNAME:PASSWORD')
        ```

        The output is the following:

        ```js
        'VVNFUk5BTUU6UEFTU1dPUkQ='
        ```

        Once you have the Base64-encoded credentials, you can pass them in the
        `Authorization` header--for example:

        ```sh
        curl --get "INFLUX_URL/api/v2/signin"
            --header "Authorization: Basic VVNFUk5BTUU6UEFTU1dPUkQ="
        ```
security:
  - TokenAuthentication: []
