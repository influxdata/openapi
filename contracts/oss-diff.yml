openapi: 3.0.0
info:
  title: InfluxDB OSS API Service
  version: 2.0.0
  description: |
    The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.
servers:
  - url: /api/v2
tags:
  - name: Authentication
    description: |
      The InfluxDB `/api/v2` API requires authentication for all requests.
      Use InfluxDB API tokens to authenticate requests to the `/api/v2` API.

      For examples and more information, see
      [Token authentication](#section/Authentication/TokenAuthentication)

      <!-- ReDoc-Inject: <security-definitions> -->
    x-traitTag: true
  - name: Quick start
    x-traitTag: true
    description: |
      See the [**API Quick Start**]({{% INFLUXDB_DOCS_URL %}}/api-guide/api_intro/) to get up and running authenticating with tokens, writing to buckets, and querying data.

      [**InfluxDB API client libraries**]({{% INFLUXDB_DOCS_URL %}}/api-guide/client-libraries/) are available for popular languages and ready to import into your application.
  - name: Response codes
    x-traitTag: true
    description: |
      The InfluxDB API uses standard HTTP status codes for success and failure responses.
      The response body may include additional details. For details about a specific operation's response, see **Responses** and **Response Samples** for that operation.

      API operations may return the following HTTP status codes:

      | &nbsp;Code&nbsp; | Status                   | Description      |
      |:-----------:|:------------------------ |:--------------------- |
      | `200`       | Success                  |                       |
      | `204`       | No content               | For a `POST` request, `204` indicates that InfluxDB accepted the request and request data is valid. Asynchronous operations, such as `write`, might not have completed yet. |
      | `400`       | Bad request              | `Authorization` header is missing or malformed or the API token does not have permission for the operation. |
      | `401`       | Unauthorized             | May indicate one of the following: <li>`Authorization: Token` header is missing or malformed</li><li>API token value is missing from the header</li><li>API token does not have permission. For more information about token types and permissions, see [Manage API tokens]({{% INFLUXDB_DOCS_URL %}}/security/tokens/)</li> |
      | `404`       | Not found                | Requested resource was not found. `message` in the response body provides details about the requested resource. |
      | `413`       | Request entity too large | Request payload exceeds the size limit. |
      | `422`       | Unprocessible entity     | Request data is invalid. `code` and `message` in the response body provide details about the problem. |
      | `429`       | Too many requests        | API token is temporarily over the request quota. The `Retry-After` header describes when to try the request again. |
      | `500`       | Internal server error    |                       |
      | `503`       | Service unavailable      | Server is temporarily unavailable to process the request. The `Retry-After` header describes when to try the request again. |
  - name: Query
    description: |
      Retrieve data, analyze queries, and get query suggestions.
  - name: Write
    description: |
      Write time series data to buckets.
  - name: Authorizations
    description: |
      Create and manage API tokens. An **authorization** associates a list of permissions to an **organization** and provides a token for API access.
      Optionally, you can restrict an authorization and its token to a specific user.

      For more information and examples, see the following:
        - [Authorize API requests]({{% INFLUXDB_DOCS_URL %}}/api-guide/api_intro/#authentication).
        - [Manage API tokens]({{% INFLUXDB_DOCS_URL %}}/security/tokens/).
        - [Assign a token to a specific user]({{% INFLUXDB_DOCS_URL %}}/security/tokens/create-token/).
  - name: Debug
    description: |
      Routes under `/debug/pprof` generate profiling and trace reports
      you can use to analyze the Go runtime of InfluxDB.
      [Go runtime profiles](https://pkg.go.dev/runtime/pprof) are
      collections of stack traces that show call sequences
      leading to instances of a particular event, such as allocation.
      For more information about **pprof profile** and **trace** reports, see the following resources:
        - [Google pprof tool](https://github.com/google/pprof)
        - [Golang diagnostics](https://go.dev/doc/diagnostics)
x-tagGroups:
  - name: Overview
    tags:
      - Quick start
      - Authentication
      - Response codes
  - name: Data I/O endpoints
    tags:
      - Write
      - Query
  - name: Resource endpoints
    tags:
      - Buckets
      - Dashboards
      - Tasks
      - Resources
  - name: Security and access endpoints
    tags:
      - Authorizations
      - Organizations
      - Users
  - name: System information endpoints
    tags:
      - Health
      - Metrics
      - Ping
      - Ready
      - Routes
  - name: All endpoints
    tags:
      - Authorizations
      - Backup
      - Buckets
      - Cells
      - Checks
      - Config
      - DBRPs
      - Dashboards
      - Delete
      - Health
      - Metrics
      - Labels
      - Legacy Authorizations
      - NotificationEndpoints
      - NotificationRules
      - Organizations
      - Ping
      - Query
      - Ready
      - RemoteConnections
      - Replications
      - Resources
      - Restore
      - Routes
      - Rules
      - Scraper Targets
      - Secrets
      - Setup
      - Signin
      - Signout
      - Sources
      - Tasks
      - Telegraf Plugins
      - Telegrafs
      - Templates
      - Users
      - Variables
      - Write
paths:
  /debug/pprof/all:
    get:
      operationId: GetDebugPprofAllProfiles
      tags:
        - Debug
      summary: Get all runtime profiles
      description: |
        Get reports for the following [Go runtime profiles](https://pkg.go.dev/runtime/pprof):

        - **allocs**: All past memory allocations
        - **block**: Stack traces that led to blocking on synchronization primitives
        - **cpu**: (Optional) Program counters sampled from the executing stack.
          Include by passing the `cpu` query parameter with a [duration]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#duration) value.
          Equivalent to the report from [`GET /debug/pprof/profile?seconds=NUMBER_OF_SECONDS`](#operation/GetDebugPprofProfile).
        - **goroutine**: All current goroutines
        - **heap**: Memory allocations for live objects
        - **mutex**: Holders of contended mutexes
        - **threadcreate**: Stack traces that led to the creation of new OS threads
      x-codeSamples:
        - lang: Shell
          label: 'Shell: Get all profiles'
          source: |
            # Download and extract a `tar.gz` of all profiles after 10 seconds of CPU sampling.

            curl "http://localhost:8086/debug/pprof/all?cpu=10s" | tar -xz

            # x profiles/cpu.pb.gz
            # x profiles/goroutine.pb.gz
            # x profiles/block.pb.gz
            # x profiles/mutex.pb.gz
            # x profiles/heap.pb.gz
            # x profiles/allocs.pb.gz
            # x profiles/threadcreate.pb.gz

            # Analyze a profile.

            go tool pprof profiles/heap.pb.gz
        - lang: Shell
          label: 'Shell: Get all profiles except CPU'
          source: |
            # Download and extract a `tar.gz` of all profiles except CPU.

            curl http://localhost:8086/debug/pprof/all | tar -xz

            # x profiles/goroutine.pb.gz
            # x profiles/block.pb.gz
            # x profiles/mutex.pb.gz
            # x profiles/heap.pb.gz
            # x profiles/allocs.pb.gz
            # x profiles/threadcreate.pb.gz

            # Analyze a profile.

            go tool pprof profiles/heap.pb.gz
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: cpu
          description: |
            Collects and returns CPU profiling data for the specified [duration]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#duration).
          schema:
            type: string
            format: duration
            externalDocs:
              description: InfluxDB duration
              url: 'https://docs.influxdata.com/influxdb/v2.1/reference/glossary/#duration'
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) reports.
          content:
            application/octet-stream:
              schema:
                description: |
                  GZIP compressed TAR file (`.tar.gz`) that contains
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) reports.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /debug/pprof/allocs:
    get:
      operationId: GetDebugPprofAllocs
      tags:
        - Debug
      summary: Get the memory allocations runtime profile
      description: |
        Get a [Go runtime profile](https://pkg.go.dev/runtime/pprof) report of
        all past memory allocations.
        **allocs** is the same as the **heap** profile,
        but changes the default [pprof](https://pkg.go.dev/runtime/pprof)
        display to __-alloc_space__,
        the total number of bytes allocated since the program began (including garbage-collected bytes).
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/allocs

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            # At the prompt, get the top N memory allocations.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /debug/pprof/block:
    get:
      operationId: GetDebugPprofBlock
      tags:
        - Debug
      summary: Get the block runtime profile
      description: |
        Get a [Go runtime profile](https://pkg.go.dev/runtime/pprof) report of
        stack traces that led to blocking on synchronization primitives.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/block

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            #  At the prompt, get the top N entries.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /debug/pprof/cmdline:
    get:
      operationId: GetDebugPprofCmdline
      tags:
        - Debug
      summary: Get the command line invocation
      description: |
        Get the command line that invoked InfluxDB.
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: Command line invocation.
          content:
            text/plain:
              schema:
                type: string
                format: Command line
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /debug/pprof/goroutine:
    get:
      operationId: GetDebugPprofGoroutine
      tags:
        - Debug
      summary: Get the goroutines runtime profile
      description: |
        Get a [Go runtime profile](https://pkg.go.dev/runtime/pprof) report of
        all current goroutines.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/goroutine

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            #  At the prompt, get the top N entries.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /debug/pprof/heap:
    get:
      operationId: GetDebugPprofHeap
      tags:
        - Debug
      summary: Get the heap runtime profile
      description: |
        Get a [Go runtime profile](https://pkg.go.dev/runtime/pprof) report of
        memory allocations for live objects.

        To run **garbage collection** before sampling,
        pass the `gc` query parameter with a value of `1`.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/heap

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            # At the prompt, get the top N memory-intensive nodes.

            (pprof) top10

            # pprof displays the list:
            #   Showing nodes accounting for 142.46MB, 85.43% of 166.75MB total
            #   Dropped 895 nodes (cum <= 0.83MB)
            #   Showing top 10 nodes out of 143
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
        - in: query
          name: gc
          description: |
            - `0`: (Default) don't force garbage collection before sampling.
            - `1`: Force garbage collection before sampling.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
              examples:
                profileDebugResponse:
                  summary: Profile in plain text
                  value: "heap profile: 12431: 137356528 [149885081: 846795139976] @ heap/8192\n23: 17711104 [46: 35422208] @ 0x4c6df65 0x4ce03ec 0x4cdf3c5 0x4c6f4db 0x4c9edbc 0x4bdefb3 0x4bf822a 0x567d158 0x567ced9 0x406c0a1\n#\t0x4c6df64\tgithub.com/influxdata/influxdb/v2/tsdb/engine/tsm1.(*entry).add+0x1a4\t\t\t\t\t/Users/me/github/influxdb/tsdb/engine/tsm1/cache.go:97\n#\t0x4ce03eb\tgithub.com/influxdata/influxdb/v2/tsdb/engine/tsm1.(*partition).write+0x2ab\t\t\t\t/Users/me/github/influxdb/tsdb/engine/tsm1/ring.go:229\n#\t0x4cdf3c4\tgithub.com/influxdata/influxdb/v2/tsdb/engine/tsm1.(*ring).write+0xa4\t\t\t\t\t/Users/me/github/influxdb/tsdb/engine/tsm1/ring.go:95\n#\t0x4c6f4da\tgithub.com/influxdata/influxdb/v2/tsdb/engine/tsm1.(*Cache).WriteMulti+0x31a\t\t\t\t/Users/me/github/influxdb/tsdb/engine/tsm1/cache.go:343\n"
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /debug/pprof/mutex:
    get:
      operationId: GetDebugPprofMutex
      tags:
        - Debug
      summary: Get the mutual exclusion (mutex) runtime profile
      description: |
        Get a [Go runtime profile](https://pkg.go.dev/runtime/pprof) report of
        lock contentions.
        The profile contains stack traces of holders of contended mutual exclusions (mutexes).
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/mutex

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            #  At the prompt, get the top N entries.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /debug/pprof/profile:
    get:
      operationId: GetDebugPprofProfile
      tags:
        - Debug
      summary: Get the CPU runtime profile
      description: |
        Get a [Go runtime profile](https://pkg.go.dev/runtime/pprof) report of
        program counters on the executing stack.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Download the profile report.

            curl http://localhost:8086/debug/pprof/profile -o cpu

            # Analyze the profile in interactive mode.

            go tool pprof ./cpu

            # At the prompt, get the top N functions most often running
            # or waiting during the sample period.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: seconds
          description: Number of seconds to collect profile data. Default is `30` seconds.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /debug/pprof/threadcreate:
    get:
      operationId: GetDebugPprofThreadCreate
      tags:
        - Debug
      summary: Get the threadcreate runtime profile
      description: |
        Get a [Go runtime profile](https://pkg.go.dev/runtime/pprof) report of
        stack traces that led to the creation of new OS threads.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool pprof'
          source: |
            # Analyze the profile in interactive mode.

            go tool pprof http://localhost:8086/debug/pprof/threadcreate

            # `pprof` returns the following prompt:
            #   Entering interactive mode (type "help" for commands, "o" for options)
            #   (pprof)

            #  At the prompt, get the top N entries.

            (pprof) top10
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: debug
          description: |
            - `0`: (Default) Return the report as a gzip-compressed protocol buffer.
            - `1`: Return a response body with the report formatted as human-readable text.
              The report contains comments that translate addresses to function names and line numbers for debugging.

            `debug=1` is mutually exclusive with the `seconds` query parameter.
          schema:
            type: integer
            format: int64
            enum:
              - 0
              - 1
        - in: query
          name: seconds
          description: |
            Number of seconds to collect statistics.

            `seconds` is mutually exclusive with `debug=1`.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible
            with [pprof](https://github.com/google/pprof) analysis and visualization tools.
            If debug is enabled (`?debug=1`), response body contains a human-readable profile.
          content:
            application/octet-stream:
              schema:
                description: |
                  [Go runtime profile](https://pkg.go.dev/runtime/pprof) report in protocol buffer format.
                type: string
                format: binary
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
            text/plain:
              schema:
                description: |
                  Response body contains a report formatted in plain text.
                  The report contains comments that translate addresses to
                  function names and line numbers for debugging.
                type: string
                format: Go runtime profile
                externalDocs:
                  description: Golang pprof package
                  url: 'https://pkg.go.dev/net/http/pprof'
              examples:
                profileDebugResponse:
                  summary: Profile in plain text
                  value: "threadcreate profile: total 26\n25 @\n#\t0x0\n\n1 @ 0x403dda8 0x403e54b 0x403e810 0x403a90c 0x406c0a1\n#\t0x403dda7\truntime.allocm+0xc7\t\t\t/Users/me/.gvm/gos/go1.17/src/runtime/proc.go:1877\n#\t0x403e54a\truntime.newm+0x2a\t\t\t/Users/me/.gvm/gos/go1.17/src/runtime/proc.go:2201\n#\t0x403e80f\truntime.startTemplateThread+0x8f\t/Users/me/.gvm/gos/go1.17/src/runtime/proc.go:2271\n#\t0x403a90b\truntime.main+0x1cb\t\t\t/Users/me/.gvm/gos/go1.17/src/runtime/proc.go:234\n"
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /debug/pprof/trace:
    get:
      operationId: GetDebugPprofTrace
      tags:
        - Debug
      summary: Get the runtime execution trace
      description: |
        Trace execution events for the current program.
      x-codeSamples:
        - lang: Shell
          label: 'Shell: go tool trace'
          source: |
            # Download the trace file.

            curl http://localhost:8086/debug/pprof/trace -o trace

            # Analyze the trace.

            go tool trace ./trace
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: seconds
          description: Number of seconds to collect profile data.
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: |
            [Trace file](https://pkg.go.dev/runtime/trace) compatible
            with the [Golang `trace` command](https://pkg.go.dev/cmd/trace).
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                externalDocs:
                  description: Golang trace package
                  url: 'https://pkg.go.dev/runtime/trace'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /health:
    get:
      operationId: GetHealth
      tags:
        - Health
      summary: Get the health of an instance
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: The instance is healthy.
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - status
                properties:
                  name:
                    type: string
                  message:
                    type: string
                  checks:
                    type: array
                    items:
                      $ref: '#/paths/~1health/get/responses/200/content/application~1json/schema'
                  status:
                    type: string
                    enum:
                      - pass
                      - fail
                  version:
                    type: string
                  commit:
                    type: string
        '503':
          description: The instance is unhealthy.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1health/get/responses/200/content/application~1json/schema'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /metrics:
    get:
      operationId: GetMetrics
      tags:
        - Metrics
      summary: Get metrics of an instance
      servers:
        - url: ''
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: |
            Payload body contains metrics about the InfluxDB instance.

            Metrics are formatted in the
            Prometheus [plain-text exposition format](https://prometheus.io/docs/instrumenting/exposition_formats).
            Each metric is identified by its name and a set of optional key-value pairs.

            The following descriptors precede each metric:

            - *`HELP`*: description of the metric
            - *`TYPE`*: type of the metric (e.g. `counter`, `gauge`, `histogram`, or `summary`)
          content:
            text/plain:
              schema:
                type: string
                format: Prometheus text-based exposition
                externalDocs:
                  description: Prometheus exposition formats
                  url: 'https://prometheus.io/docs/instrumenting/exposition_formats'
              examples:
                expositionResponse:
                  summary: Metrics in plain text
                  value: |
                    # HELP go_threads Number of OS threads created.
                    # TYPE go_threads gauge
                    go_threads 19
                    # HELP http_api_request_duration_seconds Time taken to respond to HTTP request
                    # TYPE http_api_request_duration_seconds histogram
                    http_api_request_duration_seconds_bucket{handler="platform",method="GET",path="/:fallback_path",response_code="200",status="2XX",user_agent="curl",le="0.005"} 4
                    http_api_request_duration_seconds_bucket{handler="platform",method="GET",path="/:fallback_path",response_code="200",status="2XX",user_agent="curl",le="0.01"} 4
                    http_api_request_duration_seconds_bucket{handler="platform",method="GET",path="/:fallback_path",response_code="200",status="2XX",user_agent="curl",le="0.025"} 5
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /ready:
    get:
      operationId: GetReady
      tags:
        - Ready
      summary: Get the readiness of an instance at startup
      servers:
        - url: ''
      parameters:
        - in: header
          name: Zap-Trace-Span
          description: OpenTracing span context
          example:
            trace_id: '1'
            span_id: '1'
            baggage:
              key: value
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The instance is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ready
                  started:
                    type: string
                    format: date-time
                    example: '2019-03-13T10:09:33.891196-04:00'
                  up:
                    type: string
                    example: 14m45.911966424s
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /users:
    get:
      operationId: GetUsers
      tags:
        - Users
      summary: List all users
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: offset
          required: false
          schema:
            type: integer
            minimum: 0
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: after
          required: false
          schema:
            type: string
          description: |
            Resource ID to seek from. Results are not inclusive of this ID. Use `after` instead of `offset`.
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    post:
      operationId: PostUsers
      tags:
        - Users
      summary: Create a user
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse/properties/user'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  '/users/{userID}':
    get:
      operationId: GetUsersID
      tags:
        - Users
      summary: Retrieve a user
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The user ID.
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse/properties/user'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    patch:
      operationId: PatchUsersID
      tags:
        - Users
      summary: Update a user
      requestBody:
        description: User update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the user to update.
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse/properties/user'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: DeleteUsersID
      tags:
        - Users
      summary: Delete a user
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the user to delete.
      responses:
        '204':
          description: User deleted
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /setup:
    get:
      operationId: GetSetup
      tags:
        - Setup
      summary: 'Check if database has default user, org, bucket'
      description: 'Returns `true` if no default user, organization, or bucket has been created.'
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: allowed true or false
          content:
            application/json:
              schema:
                type: object
                properties:
                  allowed:
                    description: True means that the influxdb instance has NOT had initial setup; false means that the database has been setup.
                    type: boolean
    post:
      operationId: PostSetup
      tags:
        - Setup
      summary: 'Set up initial user, org and bucket'
      description: 'Post an onboarding request to set up initial user, org and bucket.'
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Source to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingRequest'
      responses:
        '201':
          description: 'Created default user, bucket, org'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /authorizations:
    get:
      operationId: GetAuthorizations
      tags:
        - Authorizations
      summary: List all authorizations
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: userID
          schema:
            type: string
          description: Only show authorizations that belong to a user ID.
        - in: query
          name: user
          schema:
            type: string
          description: Only show authorizations that belong to a user name.
        - in: query
          name: orgID
          schema:
            type: string
          description: Only show authorizations that belong to an organization ID.
        - in: query
          name: org
          schema:
            type: string
          description: Only show authorizations that belong to a organization name.
      responses:
        '200':
          description: A list of authorizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizations'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    post:
      operationId: PostAuthorizations
      tags:
        - Authorizations
      summary: Create an authorization
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Authorization to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationPostRequest'
      responses:
        '201':
          description: Authorization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        '400':
          description: Invalid request
          $ref: '#/components/responses/ServerError'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  '/authorizations/{authID}':
    get:
      operationId: GetAuthorizationsID
      tags:
        - Authorizations
      summary: Retrieve an authorization
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to get.
      responses:
        '200':
          description: Authorization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    patch:
      operationId: PatchAuthorizationsID
      tags:
        - Authorizations
      summary: Update an authorization to be active or inactive
      requestBody:
        description: Authorization to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authorization/allOf/0'
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to update.
      responses:
        '200':
          description: The active or inactive authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: DeleteAuthorizationsID
      tags:
        - Authorizations
      summary: Delete an authorization
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to delete.
      responses:
        '204':
          description: Authorization deleted
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /legacy/authorizations:
    servers:
      - url: /private
    get:
      operationId: GetLegacyAuthorizations
      tags:
        - Legacy Authorizations
      summary: List all legacy authorizations
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: userID
          schema:
            type: string
          description: Only show legacy authorizations that belong to a user ID.
        - in: query
          name: user
          schema:
            type: string
          description: Only show legacy authorizations that belong to a user name.
        - in: query
          name: orgID
          schema:
            type: string
          description: Only show legacy authorizations that belong to an organization ID.
        - in: query
          name: org
          schema:
            type: string
          description: Only show legacy authorizations that belong to a organization name.
        - in: query
          name: token
          schema:
            type: string
          description: Only show legacy authorizations with a specified token (auth name).
        - in: query
          name: authID
          schema:
            type: string
          description: Only show legacy authorizations with a specified auth ID.
      responses:
        '200':
          description: A list of legacy authorizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizations'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    post:
      operationId: PostLegacyAuthorizations
      tags:
        - Legacy Authorizations
      summary: Create a legacy authorization
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Legacy authorization to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegacyAuthorizationPostRequest'
      responses:
        '201':
          description: Legacy authorization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        '400':
          description: Invalid request
          $ref: '#/components/responses/ServerError'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  '/legacy/authorizations/{authID}':
    servers:
      - url: /private
    get:
      operationId: GetLegacyAuthorizationsID
      tags:
        - Legacy Authorizations
      summary: Retrieve a legacy authorization
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the legacy authorization to get.
      responses:
        '200':
          description: Legacy authorization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    patch:
      operationId: PatchLegacyAuthorizationsID
      tags:
        - Legacy Authorizations
      summary: Update a legacy authorization to be active or inactive
      requestBody:
        description: Legacy authorization to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authorization/allOf/0'
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the legacy authorization to update.
      responses:
        '200':
          description: The active or inactive legacy authorization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: DeleteLegacyAuthorizationsID
      tags:
        - Legacy Authorizations
      summary: Delete a legacy authorization
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the legacy authorization to delete.
      responses:
        '204':
          description: Legacy authorization deleted
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  '/legacy/authorizations/{authID}/password':
    servers:
      - url: /private
    post:
      operationId: PostLegacyAuthorizationsIDPassword
      tags:
        - Legacy Authorizations
      summary: Set a legacy authorization password
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the legacy authorization to update.
      requestBody:
        description: New password
        required: true
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        '204':
          description: Legacy authorization password set
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /legacy/query:
    servers:
      - url: /private
    get:
      operationId: GetLegacyQuery
      tags:
        - Legacy Query
      summary: Query with the 1.x compatibility API
      description: Queries InfluxDB using InfluxQL.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Accept
          schema:
            type: string
            description: |
              Media type that the client can understand.

              **Note**: With `application/csv`, query results include [unix timestamps]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#unix-timestamp) instead of RFC3339 timestamps.
            default: application/json
            enum:
              - application/json
              - application/csv
              - text/csv
              - application/x-msgpack
        - in: header
          name: Accept-Encoding
          description: The content encoding (usually a compression algorithm) that the client can understand.
          schema:
            type: string
            description: 'The content coding. Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          schema:
            type: string
            enum:
              - application/json
        - in: query
          name: u
          description: The InfluxDB 1.x username to authenticate the request.
          schema:
            type: string
        - in: query
          name: p
          description: The InfluxDB 1.x password to authenticate the request.
          schema:
            type: string
        - in: query
          name: db
          required: true
          description: |
            The database to query data from.
            This is mapped to an InfluxDB [bucket]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#bucket).
            For more information, see [Database and retention policy mapping]({{% INFLUXDB_DOCS_URL %}}/api/influxdb-1x/dbrp/).
          schema:
            type: string
        - in: query
          name: rp
          description: |
            The retention policy to query data from.
            This is mapped to an InfluxDB [bucket]({{% INFLUXDB_DOCS_URL %}}/influxdb/v2.2/reference/glossary/#bucket).
            For more information, see [Database and retention policy mapping]({{% INFLUXDB_DOCS_URL %}}/api/influxdb-1x/dbrp/).
          schema:
            type: string
        - in: query
          name: q
          required: true
          description: 'The InfluxQL query to execute. To execute multiple queries, delimit queries with a semicolon (`;`).'
          schema:
            type: string
        - in: query
          name: epoch
          description: 'Return results with [unix (epoch) timestamps]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#unix-timestamp) in the specified precision instead of RFC3339 timestamps with nanosecond precision.'
          schema:
            type: string
            enum:
              - ns
              - u
              - µ
              - ms
              - s
              - m
              - h
      responses:
        '200':
          description: Query results
          headers:
            Content-Encoding:
              description: Lists encodings (usually compression algorithms) that have been applied to the response payload.
              schema:
                type: string
                description: |
                  The content coding:
                    - `gzip`: compressed data
                    - `identity`: unmodified, uncompressed data.
                default: identity
                enum:
                  - gzip
                  - identity
            Trace-Id:
              description: 'The trace ID, if generated, of the request.'
              schema:
                type: string
                description: Trace ID of a request.
          content:
            text/csv:
              schema:
                description: CSV Response to InfluxQL Query
                type: string
                example: |
                  name,tags,time,test_field,test_tag test_measurement,,1603740794286107366,1,tag_value test_measurement,,1603740870053205649,2,tag_value test_measurement,,1603741221085428881,3,tag_value
            application/csv:
              schema:
                $ref: '#/paths/~1legacy~1query/get/responses/200/content/text~1csv/schema'
            application/json:
              schema:
                description: JSON Response to InfluxQL Query
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        statement_id:
                          type: integer
                        series:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              columns:
                                type: array
                                items:
                                  type: string
                              values:
                                type: array
                                items:
                                  type: array
                                  items: {}
            application/x-msgpack:
              schema:
                type: string
                format: binary
        '429':
          description: |
            #### InfluxDB Cloud:
              - returns this error if a **read** or **write** request exceeds your
                plan's [adjustable service quotas]({{% INFLUXDB_DOCS_URL %}}/account-management/limits/#adjustable-service-quotas)
                or if a **delete** request exceeds the maximum
                [global limit]({{% INFLUXDB_DOCS_URL %}}/account-management/limits/#global-limits)
              - returns `Retry-After` header that describes when to try the write again.

            #### InfluxDB OSS:
              - doesn't return this error.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to delay after the response is received.
              schema:
                type: integer
                format: int32
        default:
          description: Error processing query
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  /variables:
    get:
      operationId: GetVariables
      tags:
        - Variables
      summary: List all variables
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: org
          description: The name of the organization.
          schema:
            type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
      responses:
        '200':
          description: A list of variables for an organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variables'
        '400':
          description: Invalid request
          $ref: '#/components/responses/ServerError'
        default:
          description: Internal server error
          $ref: '#/components/responses/ServerError'
    post:
      operationId: PostVariables
      summary: Create a variable
      tags:
        - Variables
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Variable to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
      responses:
        '201':
          description: Variable created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
        default:
          description: Internal server error
          $ref: '#/components/responses/ServerError'
  '/variables/{variableID}':
    get:
      operationId: GetVariablesID
      tags:
        - Variables
      summary: Retrieve a variable
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      responses:
        '200':
          description: Variable found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
        '404':
          description: Variable not found
          $ref: '#/components/responses/ServerError'
        default:
          description: Internal server error
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: DeleteVariablesID
      tags:
        - Variables
      summary: Delete a variable
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      responses:
        '204':
          description: Variable deleted
        default:
          description: Internal server error
          $ref: '#/components/responses/ServerError'
    patch:
      operationId: PatchVariablesID
      summary: Update a variable
      tags:
        - Variables
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      requestBody:
        description: Variable update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
      responses:
        '200':
          description: Variable updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
        default:
          description: Internal server error
          $ref: '#/components/responses/ServerError'
    put:
      operationId: PutVariablesID
      summary: Replace a variable
      tags:
        - Variables
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      requestBody:
        description: Variable to replace
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
      responses:
        '200':
          description: Variable updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
        default:
          description: Internal server error
          $ref: '#/components/responses/ServerError'
  /sources:
    post:
      operationId: PostSources
      tags:
        - Sources
      summary: Create a source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Source to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
      responses:
        '201':
          description: Created Source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
    get:
      operationId: GetSources
      tags:
        - Sources
      summary: List all sources
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: org
          description: The name of the organization.
          schema:
            type: string
      responses:
        '200':
          description: A list of sources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sources'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  '/sources/{sourceID}':
    delete:
      operationId: DeleteSourcesID
      tags:
        - Sources
      summary: Delete a source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: View not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
    patch:
      operationId: PatchSourcesID
      tags:
        - Sources
      summary: Update a Source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      requestBody:
        description: Source update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
      responses:
        '200':
          description: Created Source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '404':
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
    get:
      operationId: GetSourcesID
      tags:
        - Sources
      summary: Retrieve a source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      responses:
        '200':
          description: A source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '404':
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  '/sources/{sourceID}/health':
    get:
      operationId: GetSourcesIDHealth
      tags:
        - Sources
      summary: Get the health of a source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      responses:
        '200':
          description: The source is healthy
          content:
            application/json:
              schema:
                $ref: '#/paths/~1health/get/responses/200/content/application~1json/schema'
        '503':
          description: The source is not healthy
          content:
            application/json:
              schema:
                $ref: '#/paths/~1health/get/responses/200/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  '/sources/{sourceID}/buckets':
    get:
      operationId: GetSourcesIDBuckets
      tags:
        - Sources
        - Buckets
      summary: Get buckets in a source
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
        - in: query
          name: org
          description: The name of the organization.
          schema:
            type: string
      responses:
        '200':
          description: A source
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    readOnly: true
                    $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/links'
                  buckets:
                    type: array
                    items:
                      $ref: '#/components/schemas/OnboardingResponse/properties/bucket'
        '404':
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  /scrapers:
    get:
      operationId: GetScrapers
      tags:
        - Scraper Targets
      summary: List all scraper targets
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: name
          description: Specifies the name of the scraper target.
          schema:
            type: string
        - in: query
          name: id
          description: 'List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used.'
          schema:
            type: array
            items:
              type: string
        - in: query
          name: orgID
          description: Specifies the organization ID of the scraper target.
          schema:
            type: string
        - in: query
          name: org
          description: Specifies the organization name of the scraper target.
          schema:
            type: string
      responses:
        '200':
          description: All scraper targets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponses'
    post:
      operationId: PostScrapers
      summary: Create a scraper target
      tags:
        - Scraper Targets
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Scraper target to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScraperTargetRequest'
      responses:
        '201':
          description: Scraper target created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponse'
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  '/scrapers/{scraperTargetID}':
    get:
      operationId: GetScrapersID
      tags:
        - Scraper Targets
      summary: Retrieve a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          required: true
          schema:
            type: string
          description: The identifier of the scraper target.
      responses:
        '200':
          description: The scraper target
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponse'
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
    delete:
      operationId: DeleteScrapersID
      tags:
        - Scraper Targets
      summary: Delete a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          required: true
          schema:
            type: string
          description: The identifier of the scraper target.
      responses:
        '204':
          description: Scraper target deleted
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
    patch:
      operationId: PatchScrapersID
      summary: Update a scraper target
      tags:
        - Scraper Targets
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          required: true
          schema:
            type: string
          description: The identifier of the scraper target.
      requestBody:
        description: Scraper target update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScraperTargetRequest'
      responses:
        '200':
          description: Scraper target updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponse'
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/labels':
    get:
      operationId: GetScrapersIDLabels
      tags:
        - Scraper Targets
      summary: List all labels for a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        '200':
          description: A list of labels for a scraper target.
          content:
            application/json:
              schema:
                type: object
                properties:
                  labels:
                    $ref: '#/components/schemas/Variable/properties/labels'
                  links:
                    $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/links'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
    post:
      operationId: PostScrapersIDLabels
      tags:
        - Scraper Targets
      summary: Add a label to a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                labelID:
                  type: string
      responses:
        '201':
          description: The newly added label
          content:
            application/json:
              schema:
                type: object
                properties:
                  label:
                    type: object
                    properties:
                      id:
                        readOnly: true
                        type: string
                      orgID:
                        readOnly: true
                        type: string
                      name:
                        type: string
                      properties:
                        type: object
                        additionalProperties:
                          type: string
                        description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.
                        example:
                          color: ffb3b3
                          description: this is a description
                  links:
                    $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/links'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/labels/{labelID}':
    delete:
      operationId: DeleteScrapersIDLabelsID
      tags:
        - Scraper Targets
      summary: Delete a label from a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The label ID.
      responses:
        '204':
          description: Delete has been accepted
        '404':
          description: Scraper target not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/members':
    get:
      operationId: GetScrapersIDMembers
      tags:
        - Scraper Targets
      summary: List all users with member privileges for a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        '200':
          description: A list of scraper target members
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                  users:
                    type: array
                    items:
                      $ref: '#/paths/~1scrapers~1%7BscraperTargetID%7D~1members/post/responses/201/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
    post:
      operationId: PostScrapersIDMembers
      tags:
        - Scraper Targets
      summary: Add a member to a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      requestBody:
        description: User to add as member
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1scrapers~1%7BscraperTargetID%7D~1owners/post/requestBody/content/application~1json/schema'
      responses:
        '201':
          description: Member added to scraper targets
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OnboardingResponse/properties/user'
                  - type: object
                    properties:
                      role:
                        type: string
                        default: member
                        enum:
                          - member
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/members/{userID}':
    delete:
      operationId: DeleteScrapersIDMembersID
      tags:
        - Scraper Targets
      summary: Remove a member from a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of member to remove.
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        '204':
          description: Member removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/owners':
    get:
      operationId: GetScrapersIDOwners
      tags:
        - Scraper Targets
      summary: List all owners of a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        '200':
          description: A list of scraper target owners
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                  users:
                    type: array
                    items:
                      $ref: '#/paths/~1scrapers~1%7BscraperTargetID%7D~1owners/post/responses/201/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
    post:
      operationId: PostScrapersIDOwners
      tags:
        - Scraper Targets
      summary: Add an owner to a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      requestBody:
        description: User to add as owner
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
              required:
                - id
      responses:
        '201':
          description: Scraper target owner added
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OnboardingResponse/properties/user'
                  - type: object
                    properties:
                      role:
                        type: string
                        default: owner
                        enum:
                          - owner
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  '/scrapers/{scraperTargetID}/owners/{userID}':
    delete:
      operationId: DeleteScrapersIDOwnersID
      tags:
        - Scraper Targets
      summary: Remove an owner from a scraper target
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of owner to remove.
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        '204':
          description: Owner removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  /backup/kv:
    get:
      operationId: GetBackupKV
      tags:
        - Backup
      summary: 'Download snapshot of metadata stored in the server''s embedded KV store. Should not be used in versions greater than 2.1.x, as it doesn''t include metadata stored in embedded SQL.'
      deprecated: true
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: Snapshot of KV metadata
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /backup/metadata:
    get:
      operationId: GetBackupMetadata
      tags:
        - Backup
      summary: Download snapshot of all metadata in the server
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Accept-Encoding
          description: Indicates the content encoding (usually a compression algorithm) that the client can understand.
          schema:
            type: string
            description: 'The content coding.  Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'
            default: identity
            enum:
              - gzip
              - identity
      responses:
        '200':
          description: Snapshot of metadata
          headers:
            Content-Encoding:
              description: Lists any encodings (usually compression algorithms) that have been applied to the response payload.
              schema:
                type: string
                description: |
                  The content coding: `gzip` for compressed data or `identity` for unmodified, uncompressed data.
                default: identity
                enum:
                  - gzip
                  - identity
          content:
            multipart/mixed:
              schema:
                $ref: '#/components/schemas/MetadataBackup'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  '/backup/shards/{shardID}':
    get:
      operationId: GetBackupShardId
      tags:
        - Backup
      summary: Download snapshot of all TSM data in a shard
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Accept-Encoding
          description: Indicates the content encoding (usually a compression algorithm) that the client can understand.
          schema:
            type: string
            description: 'The content coding.  Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'
            default: identity
            enum:
              - gzip
              - identity
        - in: path
          name: shardID
          schema:
            type: integer
            format: int64
          required: true
          description: The shard ID.
        - in: query
          name: since
          description: Earliest time to include in the snapshot. RFC3339 format.
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: TSM snapshot.
          headers:
            Content-Encoding:
              description: Lists any encodings (usually compression algorithms) that have been applied to the response payload.
              schema:
                type: string
                description: |
                  The content coding: `gzip` for compressed data or `identity` for unmodified, uncompressed data.
                default: identity
                enum:
                  - gzip
                  - identity
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Shard not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /restore/kv:
    post:
      operationId: PostRestoreKV
      tags:
        - Restore
      summary: Overwrite the embedded KV store on the server with a backed-up snapshot.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Content-Encoding
          description: |
            The value tells InfluxDB what compression is applied to the line protocol in the request payload.
            To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
          schema:
            type: string
            description: 'The content coding.  Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/octet-stream
            enum:
              - application/octet-stream
      requestBody:
        description: Full KV snapshot.
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: KV store successfully overwritten.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    description: token is the root token for the instance after restore (this is overwritten during the restore)
                    type: string
        '204':
          description: KV store successfully overwritten.
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /restore/sql:
    post:
      operationId: PostRestoreSQL
      tags:
        - Restore
      summary: Overwrite the embedded SQL store on the server with a backed-up snapshot.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Content-Encoding
          description: |
            The value tells InfluxDB what compression is applied to the line protocol in the request payload.
            To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
          schema:
            type: string
            description: Specifies that the line protocol in the body is encoded with gzip or not encoded with identity.
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/octet-stream
            enum:
              - application/octet-stream
      requestBody:
        description: Full SQL snapshot.
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: SQL store successfully overwritten.
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  '/restore/bucket/{bucketID}':
    post:
      operationId: PostRestoreBucketID
      tags:
        - Restore
      summary: Overwrite storage metadata for a bucket with shard info from a backup.
      deprecated: true
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/octet-stream
            enum:
              - application/octet-stream
      requestBody:
        description: Database info serialized as protobuf.
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: byte
      responses:
        '200':
          description: ID mappings for shards in bucket.
          content:
            application/json:
              schema:
                type: string
                format: byte
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /restore/bucketMetadata:
    post:
      operationId: PostRestoreBucketMetadata
      tags:
        - Restore
      summary: Create a new bucket pre-seeded with shard info from a backup.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Metadata manifest for a bucket.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BucketMetadataManifest'
      responses:
        '201':
          description: ID mappings for shards in new bucket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoredBucketMappings'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  '/restore/shards/{shardID}':
    post:
      operationId: PostRestoreShardId
      tags:
        - Restore
      summary: Restore a TSM snapshot into a shard.
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: header
          name: Content-Encoding
          description: |
            The value tells InfluxDB what compression is applied to the line protocol in the request payload.
            To make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.
          schema:
            type: string
            description: Specifies that the line protocol in the body is encoded with gzip or not encoded with identity.
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          schema:
            type: string
            default: application/octet-stream
            enum:
              - application/octet-stream
        - in: path
          name: shardID
          schema:
            type: string
          required: true
          description: The shard ID.
      requestBody:
        description: TSM snapshot.
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: TSM snapshot successfully restored.
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  /config:
    get:
      operationId: GetConfig
      tags:
        - Config
      summary: Get the run-time configuration of the instance
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      responses:
        '200':
          description: Payload body contains the run-time configuration of the InfluxDB instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '401':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
  /remotes:
    get:
      operationId: GetRemoteConnections
      tags:
        - RemoteConnections
      summary: List all remote connections
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: orgID
          description: The organization ID.
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: remoteURL
          schema:
            type: string
            format: uri
      responses:
        '200':
          description: List of remote connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteConnections'
        '404':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: PostRemoteConnection
      tags:
        - RemoteConnections
      summary: Register a new remote connection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteConnectionCreationRequest'
      responses:
        '201':
          description: Remote connection saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteConnection'
        '400':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
  '/remotes/{remoteID}':
    get:
      operationId: GetRemoteConnectionByID
      tags:
        - RemoteConnections
      summary: Retrieve a remote connection
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: remoteID
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Remote connection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteConnection'
        '404':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
    patch:
      operationId: PatchRemoteConnectionByID
      tags:
        - RemoteConnections
      summary: Update a remote connection
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: remoteID
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteConnectionUpdateRequest'
      responses:
        '200':
          description: Updated information saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteConnection'
        '400':
          $ref: '#/components/responses/ServerError'
        '404':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: DeleteRemoteConnectionByID
      tags:
        - RemoteConnections
      summary: Delete a remote connection
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: remoteID
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Remote connection info deleted.
        '404':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
  /replications:
    get:
      operationId: GetReplications
      tags:
        - Replications
      summary: List all replications
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: orgID
          description: The organization ID.
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: remoteID
          schema:
            type: string
        - in: query
          name: localBucketID
          schema:
            type: string
      responses:
        '200':
          description: List of replications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replications'
        '404':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
    post:
      operationId: PostReplication
      tags:
        - Replications
      summary: Register a new replication
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: validate
          description: 'If true, validate the replication, but don''t save it.'
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationCreationRequest'
      responses:
        '201':
          description: Replication saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replication'
        '204':
          description: 'Replication validated, but not saved'
        '400':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
  '/replications/{replicationID}':
    get:
      operationId: GetReplicationByID
      tags:
        - Replications
      summary: Retrieve a replication
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: replicationID
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Replication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replication'
        '404':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
    patch:
      operationId: PatchReplicationByID
      tags:
        - Replications
      summary: Update a replication
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: replicationID
          schema:
            type: string
          required: true
        - in: query
          name: validate
          description: 'If true, validate the updated information, but don''t save it.'
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationUpdateRequest'
      responses:
        '200':
          description: Updated information saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replication'
        '204':
          description: 'Updated replication validated, but not saved'
        '400':
          $ref: '#/components/responses/ServerError'
        '404':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: DeleteReplicationByID
      tags:
        - Replications
      summary: Delete a replication
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: replicationID
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Replication deleted.
        '404':
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
  '/replications/{replicationID}/validate':
    post:
      operationId: PostValidateReplicationByID
      tags:
        - Replications
      summary: Validate a replication
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: path
          name: replicationID
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Replication is valid
        '400':
          description: Replication failed validation
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
  /dashboards:
    post:
      operationId: PostDashboards
      tags:
        - Dashboards
      summary: Create a dashboard
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Dashboard to create
        required: true
        content:
          application/json:
            schema:
              properties:
                orgID:
                  type: string
                  description: The ID of the organization that owns the dashboard.
                name:
                  type: string
                  description: The user-facing name of the dashboard.
                description:
                  type: string
                  description: The user-facing description of the dashboard.
              required:
                - orgID
                - name
      responses:
        '201':
          description: Added dashboard
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    allOf:
                      - $ref: '#/paths/~1dashboards/post/requestBody/content/application~1json/schema'
                      - type: object
                        properties:
                          links:
                            type: object
                            example:
                              self: /api/v2/dashboards/1
                              cells: /api/v2/dashboards/1/cells
                              owners: /api/v2/dashboards/1/owners
                              members: /api/v2/dashboards/1/members
                              labels: /api/v2/dashboards/1/labels
                              org: /api/v2/labels/1
                            properties:
                              self:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              cells:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              members:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              owners:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              labels:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              org:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                          id:
                            readOnly: true
                            type: string
                          meta:
                            type: object
                            properties:
                              createdAt:
                                type: string
                                format: date-time
                              updatedAt:
                                type: string
                                format: date-time
                          cells:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                links:
                                  type: object
                                  properties:
                                    self:
                                      type: string
                                    view:
                                      type: string
                                x:
                                  type: integer
                                  format: int32
                                'y':
                                  type: integer
                                  format: int32
                                w:
                                  type: integer
                                  format: int32
                                h:
                                  type: integer
                                  format: int32
                                viewID:
                                  type: string
                                  description: The reference to a view from the views API.
                          labels:
                            $ref: '#/components/schemas/Variable/properties/labels'
                  - type: object
                    allOf:
                      - $ref: '#/paths/~1dashboards/post/requestBody/content/application~1json/schema'
                      - type: object
                        properties:
                          links:
                            type: object
                            example:
                              self: /api/v2/dashboards/1
                              cells: /api/v2/dashboards/1/cells
                              owners: /api/v2/dashboards/1/owners
                              members: /api/v2/dashboards/1/members
                              labels: /api/v2/dashboards/1/labels
                              org: /api/v2/labels/1
                            properties:
                              self:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              cells:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              members:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              owners:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              labels:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                              org:
                                $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                          id:
                            readOnly: true
                            type: string
                          meta:
                            type: object
                            properties:
                              createdAt:
                                type: string
                                format: date-time
                              updatedAt:
                                type: string
                                format: date-time
                          cells:
                            type: array
                            items:
                              type: object
                              allOf:
                                - $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/dashboards/items/allOf/1/properties/cells/items'
                                - type: object
                                  properties:
                                    name:
                                      type: string
                                    properties:
                                      oneOf:
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - shape
                                            - axes
                                            - colors
                                            - note
                                            - showNoteWhenEmpty
                                            - prefix
                                            - suffix
                                            - decimalPlaces
                                            - position
                                          properties:
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - line-plus-single-stat
                                            queries:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  text:
                                                    type: string
                                                    description: The text of the Flux query.
                                                  editMode:
                                                    type: string
                                                    enum:
                                                      - builder
                                                      - advanced
                                                  name:
                                                    type: string
                                                  builderConfig:
                                                    type: object
                                                    properties:
                                                      buckets:
                                                        type: array
                                                        items:
                                                          type: string
                                                      tags:
                                                        type: array
                                                        items:
                                                          type: object
                                                          properties:
                                                            key:
                                                              type: string
                                                            values:
                                                              type: array
                                                              items:
                                                                type: string
                                                            aggregateFunctionType:
                                                              type: string
                                                              enum:
                                                                - filter
                                                                - group
                                                      functions:
                                                        type: array
                                                        items:
                                                          type: object
                                                          properties:
                                                            name:
                                                              type: string
                                                      aggregateWindow:
                                                        type: object
                                                        properties:
                                                          period:
                                                            type: string
                                                          fillValues:
                                                            type: boolean
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                type: object
                                                description: Defines an encoding of data value into color space.
                                                required:
                                                  - id
                                                  - type
                                                  - hex
                                                  - name
                                                  - value
                                                properties:
                                                  id:
                                                    description: The unique ID of the view color.
                                                    type: string
                                                  type:
                                                    description: Type is how the color is used.
                                                    type: string
                                                    enum:
                                                      - min
                                                      - max
                                                      - threshold
                                                      - scale
                                                      - text
                                                      - background
                                                  hex:
                                                    description: The hex number of the color
                                                    type: string
                                                    maxLength: 7
                                                    minLength: 7
                                                  name:
                                                    description: The user-facing name of the hex color.
                                                    type: string
                                                  value:
                                                    description: The data value mapped to this color.
                                                    type: number
                                                    format: float
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            axes:
                                              description: The viewport for a View's visualizations
                                              type: object
                                              required:
                                                - x
                                                - 'y'
                                              properties:
                                                x:
                                                  type: object
                                                  description: Axis used in a visualization.
                                                  properties:
                                                    bounds:
                                                      type: array
                                                      minItems: 0
                                                      maxItems: 2
                                                      description: 'The extents of the axis in the form [lower, upper]. Clients determine whether bounds are inclusive or exclusive of their limits.'
                                                      items:
                                                        type: string
                                                    label:
                                                      description: Description of the axis.
                                                      type: string
                                                    prefix:
                                                      description: Label prefix for formatting axis values.
                                                      type: string
                                                    suffix:
                                                      description: Label suffix for formatting axis values.
                                                      type: string
                                                    base:
                                                      description: Radix for formatting axis values.
                                                      type: string
                                                      enum:
                                                        - ''
                                                        - '2'
                                                        - '10'
                                                    scale:
                                                      description: 'Scale is the axis formatting scale. Supported: "log", "linear"'
                                                      type: string
                                                      enum:
                                                        - log
                                                        - linear
                                                'y':
                                                  $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes/properties/x'
                                            staticLegend:
                                              description: StaticLegend represents the options specific to the static legend
                                              type: object
                                              properties:
                                                colorizeRows:
                                                  type: boolean
                                                heightRatio:
                                                  type: number
                                                  format: float
                                                show:
                                                  type: boolean
                                                opacity:
                                                  type: number
                                                  format: float
                                                orientationThreshold:
                                                  type: integer
                                                valueAxis:
                                                  type: string
                                                widthRatio:
                                                  type: number
                                                  format: float
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yColumn:
                                              type: string
                                            generateYAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            yTotalTicks:
                                              type: integer
                                            yTickStart:
                                              type: number
                                              format: float
                                            yTickStep:
                                              type: number
                                              format: float
                                            shadeBelow:
                                              type: boolean
                                            hoverDimension:
                                              type: string
                                              enum:
                                                - auto
                                                - x
                                                - 'y'
                                                - xy
                                            position:
                                              type: string
                                              enum:
                                                - overlaid
                                                - stacked
                                            prefix:
                                              type: string
                                            suffix:
                                              type: string
                                            decimalPlaces:
                                              description: 'Indicates whether decimal places should be enforced, and how many digits it should show.'
                                              type: object
                                              properties:
                                                isEnforced:
                                                  description: Indicates whether decimal point setting should be enforced
                                                  type: boolean
                                                digits:
                                                  description: The number of digits after decimal to display
                                                  type: integer
                                                  format: int32
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - geom
                                            - queries
                                            - shape
                                            - axes
                                            - colors
                                            - note
                                            - showNoteWhenEmpty
                                            - position
                                          properties:
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - xy
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            colorMapping:
                                              description: An object that contains information about the color mapping
                                              type: object
                                              additionalProperties:
                                                type: string
                                              example:
                                                series_id_1: '#edf529'
                                                series_id_2: '#edf529'
                                                measurement_birdmigration_europe: '#663cd0'
                                                configcat_deployments-autopromotionblocker: '#663cd0'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            axes:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes'
                                            staticLegend:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/staticLegend'
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yColumn:
                                              type: string
                                            generateYAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            yTotalTicks:
                                              type: integer
                                            yTickStart:
                                              type: number
                                              format: float
                                            yTickStep:
                                              type: number
                                              format: float
                                            shadeBelow:
                                              type: boolean
                                            hoverDimension:
                                              type: string
                                              enum:
                                                - auto
                                                - x
                                                - 'y'
                                                - xy
                                            position:
                                              type: string
                                              enum:
                                                - overlaid
                                                - stacked
                                            geom:
                                              type: string
                                              enum:
                                                - line
                                                - step
                                                - stacked
                                                - bar
                                                - monotoneX
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - prefix
                                            - tickPrefix
                                            - suffix
                                            - tickSuffix
                                            - decimalPlaces
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - single-stat
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            prefix:
                                              type: string
                                            tickPrefix:
                                              type: string
                                            suffix:
                                              type: string
                                            tickSuffix:
                                              type: string
                                            staticLegend:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/staticLegend'
                                            decimalPlaces:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/decimalPlaces'
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - xColumn
                                            - fillColumns
                                            - xDomain
                                            - xAxisLabel
                                            - position
                                            - binCount
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - histogram
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            xColumn:
                                              type: string
                                            fillColumns:
                                              type: array
                                              items:
                                                type: string
                                            xDomain:
                                              type: array
                                              items:
                                                type: number
                                                format: float
                                            xAxisLabel:
                                              type: string
                                            position:
                                              type: string
                                              enum:
                                                - overlaid
                                                - stacked
                                            binCount:
                                              type: integer
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - prefix
                                            - tickPrefix
                                            - suffix
                                            - tickSuffix
                                            - decimalPlaces
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - gauge
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            prefix:
                                              type: string
                                            tickPrefix:
                                              type: string
                                            suffix:
                                              type: string
                                            tickSuffix:
                                              type: string
                                            decimalPlaces:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/decimalPlaces'
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - tableOptions
                                            - fieldOptions
                                            - timeFormat
                                            - decimalPlaces
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - table
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            tableOptions:
                                              type: object
                                              properties:
                                                verticalTimeAxis:
                                                  description: verticalTimeAxis describes the orientation of the table by indicating whether the time axis will be displayed vertically
                                                  type: boolean
                                                sortBy:
                                                  $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/5/properties/fieldOptions/items'
                                                wrapping:
                                                  description: Wrapping describes the text wrapping style to be used in table views
                                                  type: string
                                                  enum:
                                                    - truncate
                                                    - wrap
                                                    - single-line
                                                fixFirstColumn:
                                                  description: fixFirstColumn indicates whether the first column of the table should be locked
                                                  type: boolean
                                            fieldOptions:
                                              description: fieldOptions represent the fields retrieved by the query with customization options
                                              type: array
                                              items:
                                                description: Describes a field that can be renamed and made visible or invisible.
                                                type: object
                                                properties:
                                                  internalName:
                                                    description: The calculated name of a field.
                                                    readOnly: true
                                                    type: string
                                                  displayName:
                                                    description: The name that a field is renamed to by the user.
                                                    type: string
                                                  visible:
                                                    description: Indicates whether this field should be visible on the table.
                                                    type: boolean
                                            timeFormat:
                                              description: timeFormat describes the display format for time values according to moment.js date formatting
                                              type: string
                                            decimalPlaces:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/decimalPlaces'
                                        - type: object
                                          required:
                                            - type
                                            - showAll
                                            - queries
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - simple-table
                                            showAll:
                                              type: boolean
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                        - type: object
                                          required:
                                            - type
                                            - shape
                                            - note
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - markdown
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                        - type: object
                                          required:
                                            - type
                                            - shape
                                            - checkID
                                            - queries
                                            - colors
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - check
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            checkID:
                                              type: string
                                            check:
                                              allOf:
                                                - oneOf:
                                                    - allOf:
                                                        - properties:
                                                            id:
                                                              readOnly: true
                                                              type: string
                                                            name:
                                                              type: string
                                                            orgID:
                                                              description: The ID of the organization that owns this check.
                                                              type: string
                                                            taskID:
                                                              description: The ID of the task associated with this check.
                                                              type: string
                                                            ownerID:
                                                              description: The ID of creator used to create this check.
                                                              type: string
                                                              readOnly: true
                                                            createdAt:
                                                              type: string
                                                              format: date-time
                                                              readOnly: true
                                                            updatedAt:
                                                              type: string
                                                              format: date-time
                                                              readOnly: true
                                                            query:
                                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                                            status:
                                                              $ref: '#/paths/~1tasks/post/requestBody/content/application~1json/schema/properties/status'
                                                            description:
                                                              description: An optional description of the check.
                                                              type: string
                                                            latestCompleted:
                                                              type: string
                                                              description: 'Timestamp (in RFC3339 date/time format](https://datatracker.ietf.org/doc/html/rfc3339)) of the latest scheduled and completed run.'
                                                              format: date-time
                                                              readOnly: true
                                                            lastRunStatus:
                                                              readOnly: true
                                                              type: string
                                                              enum:
                                                                - failed
                                                                - success
                                                                - canceled
                                                            lastRunError:
                                                              readOnly: true
                                                              type: string
                                                            labels:
                                                              $ref: '#/components/schemas/Variable/properties/labels'
                                                            links:
                                                              type: object
                                                              readOnly: true
                                                              example:
                                                                self: /api/v2/checks/1
                                                                labels: /api/v2/checks/1/labels
                                                                members: /api/v2/checks/1/members
                                                                owners: /api/v2/checks/1/owners
                                                                query: /api/v2/checks/1/query
                                                              properties:
                                                                self:
                                                                  description: URL for this check
                                                                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                                                                labels:
                                                                  description: URL to retrieve labels for this check
                                                                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                                                                members:
                                                                  description: URL to retrieve members for this check
                                                                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                                                                owners:
                                                                  description: URL to retrieve owners for this check
                                                                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                                                                query:
                                                                  description: URL to retrieve flux script for this check
                                                                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                                                          required:
                                                            - name
                                                            - orgID
                                                            - query
                                                        - type: object
                                                          required:
                                                            - type
                                                          properties:
                                                            type:
                                                              type: string
                                                              enum:
                                                                - deadman
                                                            timeSince:
                                                              description: String duration before deadman triggers.
                                                              type: string
                                                            staleTime:
                                                              description: String duration for time that a series is considered stale and should not trigger deadman.
                                                              type: string
                                                            reportZero:
                                                              description: 'If only zero values reported since time, trigger an alert'
                                                              type: boolean
                                                            level:
                                                              description: The state to record if check matches a criteria.
                                                              type: string
                                                              enum:
                                                                - UNKNOWN
                                                                - OK
                                                                - INFO
                                                                - CRIT
                                                                - WARN
                                                            every:
                                                              description: Check repetition interval.
                                                              type: string
                                                            offset:
                                                              description: 'Duration to delay after the schedule, before executing check.'
                                                              type: string
                                                            tags:
                                                              description: List of tags to write to each status.
                                                              type: array
                                                              items:
                                                                type: object
                                                                properties:
                                                                  key:
                                                                    type: string
                                                                  value:
                                                                    type: string
                                                            statusMessageTemplate:
                                                              description: The template used to generate and write a status message.
                                                              type: string
                                                    - allOf:
                                                        - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/8/properties/check/allOf/0/oneOf/0/allOf/0'
                                                        - type: object
                                                          required:
                                                            - type
                                                          properties:
                                                            type:
                                                              type: string
                                                              enum:
                                                                - threshold
                                                            thresholds:
                                                              type: array
                                                              items:
                                                                oneOf:
                                                                  - allOf:
                                                                      - properties:
                                                                          level:
                                                                            $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/8/properties/check/allOf/0/oneOf/0/allOf/1/properties/level'
                                                                          allValues:
                                                                            description: 'If true, only alert if all values meet threshold.'
                                                                            type: boolean
                                                                      - type: object
                                                                        required:
                                                                          - type
                                                                          - value
                                                                        properties:
                                                                          type:
                                                                            type: string
                                                                            enum:
                                                                              - greater
                                                                          value:
                                                                            type: number
                                                                            format: float
                                                                  - allOf:
                                                                      - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/8/properties/check/allOf/0/oneOf/1/allOf/1/properties/thresholds/items/oneOf/0/allOf/0'
                                                                      - type: object
                                                                        required:
                                                                          - type
                                                                          - value
                                                                        properties:
                                                                          type:
                                                                            type: string
                                                                            enum:
                                                                              - lesser
                                                                          value:
                                                                            type: number
                                                                            format: float
                                                                  - allOf:
                                                                      - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/8/properties/check/allOf/0/oneOf/1/allOf/1/properties/thresholds/items/oneOf/0/allOf/0'
                                                                      - type: object
                                                                        required:
                                                                          - type
                                                                          - min
                                                                          - max
                                                                          - within
                                                                        properties:
                                                                          type:
                                                                            type: string
                                                                            enum:
                                                                              - range
                                                                          min:
                                                                            type: number
                                                                            format: float
                                                                          max:
                                                                            type: number
                                                                            format: float
                                                                          within:
                                                                            type: boolean
                                                                discriminator:
                                                                  propertyName: type
                                                                  mapping:
                                                                    greater: '#/components/schemas/GreaterThreshold'
                                                                    lesser: '#/components/schemas/LesserThreshold'
                                                                    range: '#/components/schemas/RangeThreshold'
                                                            every:
                                                              description: Check repetition interval.
                                                              type: string
                                                            offset:
                                                              description: 'Duration to delay after the schedule, before executing check.'
                                                              type: string
                                                            tags:
                                                              description: List of tags to write to each status.
                                                              type: array
                                                              items:
                                                                type: object
                                                                properties:
                                                                  key:
                                                                    type: string
                                                                  value:
                                                                    type: string
                                                            statusMessageTemplate:
                                                              description: The template used to generate and write a status message.
                                                              type: string
                                                    - allOf:
                                                        - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/8/properties/check/allOf/0/oneOf/0/allOf/0'
                                                        - type: object
                                                          properties:
                                                            type:
                                                              type: string
                                                              enum:
                                                                - custom
                                                          required:
                                                            - type
                                                  discriminator:
                                                    propertyName: type
                                                    mapping:
                                                      deadman: '#/components/schemas/DeadmanCheck'
                                                      threshold: '#/components/schemas/ThresholdCheck'
                                                      custom: '#/components/schemas/CustomCheck'
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - xColumn
                                            - yColumn
                                            - fillColumns
                                            - symbolColumns
                                            - xDomain
                                            - yDomain
                                            - xAxisLabel
                                            - yAxisLabel
                                            - xPrefix
                                            - yPrefix
                                            - xSuffix
                                            - ySuffix
                                          properties:
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - scatter
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                type: string
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yColumn:
                                              type: string
                                            generateYAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            yTotalTicks:
                                              type: integer
                                            yTickStart:
                                              type: number
                                              format: float
                                            yTickStep:
                                              type: number
                                              format: float
                                            fillColumns:
                                              type: array
                                              items:
                                                type: string
                                            symbolColumns:
                                              type: array
                                              items:
                                                type: string
                                            xDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            yDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            xAxisLabel:
                                              type: string
                                            yAxisLabel:
                                              type: string
                                            xPrefix:
                                              type: string
                                            xSuffix:
                                              type: string
                                            yPrefix:
                                              type: string
                                            ySuffix:
                                              type: string
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - xColumn
                                            - yColumn
                                            - xDomain
                                            - yDomain
                                            - xAxisLabel
                                            - yAxisLabel
                                            - xPrefix
                                            - yPrefix
                                            - xSuffix
                                            - ySuffix
                                            - binSize
                                          properties:
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - heatmap
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                type: string
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yColumn:
                                              type: string
                                            generateYAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            yTotalTicks:
                                              type: integer
                                            yTickStart:
                                              type: number
                                              format: float
                                            yTickStep:
                                              type: number
                                              format: float
                                            xDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            yDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            xAxisLabel:
                                              type: string
                                            yAxisLabel:
                                              type: string
                                            xPrefix:
                                              type: string
                                            xSuffix:
                                              type: string
                                            yPrefix:
                                              type: string
                                            ySuffix:
                                              type: string
                                            binSize:
                                              type: number
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - queries
                                            - colors
                                            - shape
                                            - note
                                            - showNoteWhenEmpty
                                            - xColumn
                                            - ySeriesColumns
                                            - fillColumns
                                            - xDomain
                                            - yDomain
                                            - xAxisLabel
                                            - yAxisLabel
                                            - xPrefix
                                            - yPrefix
                                            - xSuffix
                                            - ySuffix
                                          properties:
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - mosaic
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                type: string
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yLabelColumnSeparator:
                                              type: string
                                            yLabelColumns:
                                              type: array
                                              items:
                                                type: string
                                            ySeriesColumns:
                                              type: array
                                              items:
                                                type: string
                                            fillColumns:
                                              type: array
                                              items:
                                                type: string
                                            xDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            yDomain:
                                              type: array
                                              items:
                                                type: number
                                              maxItems: 2
                                            xAxisLabel:
                                              type: string
                                            yAxisLabel:
                                              type: string
                                            xPrefix:
                                              type: string
                                            xSuffix:
                                              type: string
                                            yPrefix:
                                              type: string
                                            ySuffix:
                                              type: string
                                            hoverDimension:
                                              type: string
                                              enum:
                                                - auto
                                                - x
                                                - 'y'
                                                - xy
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - geom
                                            - queries
                                            - shape
                                            - axes
                                            - colors
                                            - note
                                            - showNoteWhenEmpty
                                          properties:
                                            timeFormat:
                                              type: string
                                            type:
                                              type: string
                                              enum:
                                                - band
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            axes:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes'
                                            staticLegend:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/staticLegend'
                                            xColumn:
                                              type: string
                                            generateXAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            xTotalTicks:
                                              type: integer
                                            xTickStart:
                                              type: number
                                              format: float
                                            xTickStep:
                                              type: number
                                              format: float
                                            yColumn:
                                              type: string
                                            generateYAxisTicks:
                                              type: array
                                              items:
                                                type: string
                                            yTotalTicks:
                                              type: integer
                                            yTickStart:
                                              type: number
                                              format: float
                                            yTickStep:
                                              type: number
                                              format: float
                                            upperColumn:
                                              type: string
                                            mainColumn:
                                              type: string
                                            lowerColumn:
                                              type: string
                                            hoverDimension:
                                              type: string
                                              enum:
                                                - auto
                                                - x
                                                - 'y'
                                                - xy
                                            geom:
                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/1/properties/geom'
                                            legendColorizeRows:
                                              type: boolean
                                            legendHide:
                                              type: boolean
                                            legendOpacity:
                                              type: number
                                              format: float
                                            legendOrientationThreshold:
                                              type: integer
                                        - type: object
                                          required:
                                            - type
                                            - shape
                                            - queries
                                            - note
                                            - showNoteWhenEmpty
                                            - center
                                            - zoom
                                            - allowPanAndZoom
                                            - detectCoordinateFields
                                            - layers
                                          properties:
                                            type:
                                              type: string
                                              enum:
                                                - geo
                                            queries:
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/queries/items'
                                            shape:
                                              type: string
                                              enum:
                                                - chronograf-v2
                                            center:
                                              description: Coordinates of the center of the map
                                              type: object
                                              required:
                                                - lat
                                                - lon
                                              properties:
                                                lat:
                                                  description: Latitude of the center of the map
                                                  type: number
                                                  format: double
                                                lon:
                                                  description: Longitude of the center of the map
                                                  type: number
                                                  format: double
                                            zoom:
                                              description: Zoom level used for initial display of the map
                                              type: number
                                              format: double
                                              minimum: 1
                                              maximum: 28
                                            allowPanAndZoom:
                                              description: 'If true, map zoom and pan controls are enabled on the dashboard view'
                                              type: boolean
                                              default: true
                                            detectCoordinateFields:
                                              description: 'If true, search results get automatically regroupped so that lon,lat and value are treated as columns'
                                              type: boolean
                                              default: true
                                            useS2CellID:
                                              description: 'If true, S2 column is used to calculate lat/lon'
                                              type: boolean
                                            s2Column:
                                              description: String to define the column
                                              type: string
                                            latLonColumns:
                                              description: Object type to define lat/lon columns
                                              type: object
                                              required:
                                                - lat
                                                - lon
                                              properties:
                                                lat:
                                                  description: Object type for key and column definitions
                                                  type: object
                                                  required:
                                                    - key
                                                    - column
                                                  properties:
                                                    key:
                                                      description: Key to determine whether the column is tag/field
                                                      type: string
                                                    column:
                                                      description: Column to look up Lat/Lon
                                                      type: string
                                                lon:
                                                  $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/13/properties/latLonColumns/properties/lat'
                                            mapStyle:
                                              description: 'Define map type - regular, satellite etc.'
                                              type: string
                                            note:
                                              type: string
                                            showNoteWhenEmpty:
                                              description: 'If true, will display note when empty'
                                              type: boolean
                                            colors:
                                              description: Colors define color encoding of data into a visualization
                                              type: array
                                              items:
                                                $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                            layers:
                                              description: List of individual layers shown in the map
                                              type: array
                                              items:
                                                type: object
                                                oneOf:
                                                  - allOf:
                                                      - type: object
                                                        required:
                                                          - type
                                                        properties:
                                                          type:
                                                            type: string
                                                            enum:
                                                              - heatmap
                                                              - circleMap
                                                              - pointMap
                                                              - trackMap
                                                      - type: object
                                                        required:
                                                          - radiusField
                                                          - radiusDimension
                                                          - colorField
                                                          - colorDimension
                                                          - colors
                                                        properties:
                                                          radiusField:
                                                            type: string
                                                            description: Radius field
                                                          radiusDimension:
                                                            $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes/properties/x'
                                                          colorField:
                                                            type: string
                                                            description: Circle color field
                                                          colorDimension:
                                                            $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes/properties/x'
                                                          colors:
                                                            description: Colors define color encoding of data into a visualization
                                                            type: array
                                                            items:
                                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                                          radius:
                                                            description: Maximum radius size in pixels
                                                            type: integer
                                                          interpolateColors:
                                                            description: Interpolate circle color based on displayed value
                                                            type: boolean
                                                  - allOf:
                                                      - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/13/properties/layers/items/oneOf/0/allOf/0'
                                                      - type: object
                                                        required:
                                                          - intensityField
                                                          - intensityDimension
                                                          - radius
                                                          - blur
                                                          - colors
                                                        properties:
                                                          intensityField:
                                                            type: string
                                                            description: Intensity field
                                                          intensityDimension:
                                                            $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes/properties/x'
                                                          radius:
                                                            description: Radius size in pixels
                                                            type: integer
                                                          blur:
                                                            description: Blur for heatmap points
                                                            type: integer
                                                          colors:
                                                            description: Colors define color encoding of data into a visualization
                                                            type: array
                                                            items:
                                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                                  - allOf:
                                                      - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/13/properties/layers/items/oneOf/0/allOf/0'
                                                      - type: object
                                                        required:
                                                          - colorField
                                                          - colorDimension
                                                          - colors
                                                        properties:
                                                          colorField:
                                                            type: string
                                                            description: Marker color field
                                                          colorDimension:
                                                            $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/axes/properties/x'
                                                          colors:
                                                            description: Colors define color encoding of data into a visualization
                                                            type: array
                                                            items:
                                                              $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                                                          isClustered:
                                                            description: Cluster close markers together
                                                            type: boolean
                                                          tooltipColumns:
                                                            description: An array for which columns to display in tooltip
                                                            type: array
                                                            items:
                                                              type: string
                                                  - allOf:
                                                      - $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/13/properties/layers/items/oneOf/0/allOf/0'
                                                      - type: object
                                                        required:
                                                          - trackWidth
                                                          - speed
                                                          - randomColors
                                                          - trackPointVisualization
                                                    properties:
                                                      trackWidth:
                                                        description: Width of the track
                                                        type: integer
                                                      speed:
                                                        description: Speed of the track animation
                                                        type: integer
                                                      randomColors:
                                                        description: Assign different colors to different tracks
                                                        type: boolean
                                                      colors:
                                                        description: Colors define color encoding of data into a visualization
                                                        type: array
                                                        items:
                                                          $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/1/allOf/1/properties/cells/items/allOf/1/properties/properties/oneOf/0/properties/colors/items'
                          labels:
                            $ref: '#/components/schemas/Variable/properties/labels'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
    get:
      operationId: GetDashboards
      tags:
        - Dashboards
      summary: List all dashboards
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - $ref: '#/paths/~1users/get/parameters/1'
        - $ref: '#/paths/~1users/get/parameters/2'
        - in: query
          name: descending
          required: false
          schema:
            type: boolean
            default: false
        - in: query
          name: owner
          description: A user identifier. Returns only dashboards where this user has the `owner` role.
          schema:
            type: string
        - in: query
          name: sortBy
          description: The column to sort by.
          schema:
            type: string
            enum:
              - ID
              - CreatedAt
              - UpdatedAt
        - in: query
          name: id
          description: 'A list of dashboard identifiers. Returns only the listed dashboards. If both `id` and `owner` are specified, only `id` is used.'
          schema:
            type: array
            items:
              type: string
        - in: query
          name: orgID
          description: The identifier of the organization.
          schema:
            type: string
        - in: query
          name: org
          description: The name of the organization.
          schema:
            type: string
      responses:
        '200':
          description: All dashboards
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      next:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                      self:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                      prev:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                    required:
                      - self
                  dashboards:
                    type: array
                    items:
                      $ref: '#/paths/~1dashboards/post/responses/201/content/application~1json/schema/oneOf/0'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  /tasks:
    get:
      operationId: GetTasks
      tags:
        - Tasks
      summary: List all tasks
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
        - in: query
          name: name
          description: Returns task with a specific name.
          schema:
            type: string
        - in: query
          name: after
          schema:
            type: string
          description: Return tasks after a specified ID.
        - in: query
          name: user
          schema:
            type: string
          description: Filter tasks to a specific user ID.
        - in: query
          name: org
          schema:
            type: string
          description: Filter tasks to a specific organization name.
        - in: query
          name: orgID
          schema:
            type: string
          description: Filter tasks to a specific organization ID.
        - in: query
          name: status
          schema:
            type: string
            enum:
              - active
              - inactive
          description: Filter tasks by a status--"inactive" or "active".
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
          description: The number of tasks to return
        - in: query
          name: type
          description: 'Type of task, unset by default.'
          required: false
          schema:
            default: ''
            type: string
            enum:
              - basic
              - system
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    readOnly: true
                    $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/links'
                  tasks:
                    type: array
                    items:
                      $ref: '#/paths/~1tasks/post/responses/201/content/application~1json/schema'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
    post:
      operationId: PostTasks
      tags:
        - Tasks
      summary: Create a new task
      parameters:
        - $ref: '#/paths/~1ready/get/parameters/0'
      requestBody:
        description: Task to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orgID:
                  description: The ID of the organization that owns this Task.
                  type: string
                org:
                  description: The name of the organization that owns this Task.
                  type: string
                status:
                  type: string
                  enum:
                    - active
                    - inactive
                flux:
                  description: The Flux script to run for this task.
                  type: string
                description:
                  description: An optional description of the task.
                  type: string
              required:
                - flux
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    readOnly: true
                    type: string
                  type:
                    description: 'Type of the task, useful for filtering a task list.'
                    type: string
                  orgID:
                    description: ID of the organization that owns the task.
                    type: string
                  org:
                    description: Name of the organization that owns the task.
                    type: string
                  name:
                    description: Name of the task.
                    type: string
                  ownerID:
                    description: ID of the user who owns this Task.
                    type: string
                  description:
                    description: Description of the task.
                    type: string
                  status:
                    $ref: '#/paths/~1tasks/post/requestBody/content/application~1json/schema/properties/status'
                  labels:
                    $ref: '#/components/schemas/Variable/properties/labels'
                  authorizationID:
                    description: ID of the authorization used when the task communicates with the query engine.
                    type: string
                  flux:
                    description: Flux script to run for this task.
                    type: string
                  every:
                    description: |-
                      Interval at which the task runs. `every` also determines when the task first runs, depending on the specified time.
                      Value is a [duration literal](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals)).
                    type: string
                    format: duration
                  cron:
                    description: |-
                      [Cron expression](https://en.wikipedia.org/wiki/Cron#Overview) that defines the schedule on which the task runs. Cron scheduling is based on system time.
                      Value is a [Cron expression](https://en.wikipedia.org/wiki/Cron#Overview).
                    type: string
                  offset:
                    description: |-
                      [Duration](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals) to delay execution of the task after the scheduled time has elapsed. `0` removes the offset.
                      The value is a [duration literal](https://docs.influxdata.com/flux/v0.x/spec/lexical-elements/#duration-literals).
                    type: string
                    format: duration
                  latestCompleted:
                    description: |-
                      Timestamp of the latest scheduled and completed run.
                      Value is a timestamp in [RFC3339 date/time format](https://docs.influxdata.com/flux/v0.x/data-types/basic/time/#time-syntax).
                    type: string
                    format: date-time
                    readOnly: true
                  lastRunStatus:
                    readOnly: true
                    type: string
                    enum:
                      - failed
                      - success
                      - canceled
                  lastRunError:
                    readOnly: true
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                  updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                  links:
                    type: object
                    readOnly: true
                    example:
                      self: /api/v2/tasks/1
                      owners: /api/v2/tasks/1/owners
                      members: /api/v2/tasks/1/members
                      labels: /api/v2/tasks/1/labels
                      runs: /api/v2/tasks/1/runs
                      logs: /api/v2/tasks/1/logs
                    properties:
                      self:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                      owners:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                      members:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                      runs:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                      logs:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                      labels:
                        $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                required:
                  - id
                  - name
                  - orgID
                  - flux
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
components:
  parameters: null
  schemas:
    Authorization:
      required:
        - orgID
        - permissions
      allOf:
        - properties:
            status:
              description: 'Status of the token. If `inactive`, requests using the token will be rejected.'
              default: active
              type: string
              enum:
                - active
                - inactive
            description:
              type: string
              description: A description of the token.
        - type: object
          properties:
            createdAt:
              type: string
              format: date-time
              readOnly: true
            updatedAt:
              type: string
              format: date-time
              readOnly: true
            orgID:
              type: string
              description: ID of the organization that the authorization is scoped to.
            permissions:
              type: array
              minItems: 1
              description: List of permissions for an authorization.  An authorization must have at least one permission.
              items:
                $ref: '#/components/schemas/Permission'
            id:
              readOnly: true
              type: string
            token:
              readOnly: true
              type: string
              description: Token used to authenticate API requests.
            userID:
              readOnly: true
              type: string
              description: ID of the user that created and owns the token.
            user:
              readOnly: true
              type: string
              description: Name of the user that created and owns the token.
            org:
              readOnly: true
              type: string
              description: Name of the organization that the token is scoped to.
            links:
              type: object
              readOnly: true
              example:
                self: /api/v2/authorizations/1
                user: /api/v2/users/12
              properties:
                self:
                  readOnly: true
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                user:
                  readOnly: true
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
    AuthorizationPostRequest:
      required:
        - orgID
        - permissions
      allOf:
        - $ref: '#/components/schemas/Authorization/allOf/0'
        - type: object
          properties:
            orgID:
              type: string
              description: ID of org that authorization is scoped to.
            userID:
              type: string
              description: ID of user that authorization is scoped to.
            permissions:
              type: array
              minItems: 1
              description: List of permissions for an auth.  An auth must have at least one Permission.
              items:
                $ref: '#/components/schemas/Permission'
    LegacyAuthorizationPostRequest:
      required:
        - orgID
        - permissions
      allOf:
        - $ref: '#/components/schemas/Authorization/allOf/0'
        - type: object
          properties:
            orgID:
              type: string
              description: ID of org that authorization is scoped to.
            userID:
              type: string
              description: ID of user that authorization is scoped to.
            token:
              type: string
              description: Token (name) of the authorization
            permissions:
              type: array
              minItems: 1
              description: List of permissions for an auth.  An auth must have at least one Permission.
              items:
                $ref: '#/components/schemas/Permission'
    Authorizations:
      type: object
      properties:
        links:
          readOnly: true
          $ref: '#/paths/~1dashboards/get/responses/200/content/application~1json/schema/properties/links'
        authorizations:
          type: array
          items:
            $ref: '#/components/schemas/Authorization'
    Permission:
      required:
        - action
        - resource
      properties:
        action:
          type: string
          enum:
            - read
            - write
        resource:
          $ref: '#/components/schemas/Resource'
    Resource:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - authorizations
            - buckets
            - dashboards
            - orgs
            - sources
            - tasks
            - telegrafs
            - users
            - variables
            - scrapers
            - secrets
            - labels
            - views
            - documents
            - notificationRules
            - notificationEndpoints
            - checks
            - dbrp
            - notebooks
            - annotations
            - remotes
            - replications
        id:
          type: string
          description: If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.
        name:
          type: string
          description: Optional name of the resource if the resource has a name field.
        orgID:
          type: string
          description: If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.
        org:
          type: string
          description: Optional name of the organization of the organization with orgID.
    User:
      properties:
        id:
          readOnly: true
          type: string
        oauthID:
          type: string
        name:
          type: string
        status:
          description: If inactive the user is inactive.
          default: active
          type: string
          enum:
            - active
            - inactive
      required:
        - name
    Users:
      type: object
      properties:
        links:
          type: object
          properties:
            self:
              type: string
              format: uri
        users:
          type: array
          items:
            $ref: '#/components/schemas/OnboardingResponse/properties/user'
    OnboardingRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        org:
          type: string
        bucket:
          type: string
        retentionPeriodSeconds:
          type: integer
          format: int64
        retentionPeriodHrs:
          type: integer
          deprecated: true
          description: |
            Retention period *in nanoseconds* for the new bucket. This key's name has been misleading since OSS 2.0 GA, please transition to use `retentionPeriodSeconds`
        token:
          type: string
          description: |
            Authentication token to set on the initial user. If not specified, the server will generate a token.
      required:
        - username
        - org
        - bucket
    OnboardingResponse:
      type: object
      properties:
        user:
          properties:
            id:
              readOnly: true
              type: string
            oauthID:
              type: string
            name:
              type: string
            status:
              description: If inactive the user is inactive.
              default: active
              type: string
              enum:
                - active
                - inactive
            links:
              type: object
              readOnly: true
              example:
                self: /api/v2/users/1
              properties:
                self:
                  type: string
                  format: uri
          required:
            - name
        org:
          properties:
            links:
              type: object
              readOnly: true
              example:
                self: /api/v2/orgs/1
                members: /api/v2/orgs/1/members
                owners: /api/v2/orgs/1/owners
                labels: /api/v2/orgs/1/labels
                secrets: /api/v2/orgs/1/secrets
                buckets: /api/v2/buckets?org=myorg
                tasks: /api/v2/tasks?org=myorg
                dashboards: /api/v2/dashboards?org=myorg
              properties:
                self:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                members:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                owners:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                labels:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                secrets:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                buckets:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                tasks:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                dashboards:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
            id:
              readOnly: true
              type: string
            name:
              type: string
            description:
              type: string
            createdAt:
              type: string
              format: date-time
              readOnly: true
            updatedAt:
              type: string
              format: date-time
              readOnly: true
            status:
              description: If inactive the organization is inactive.
              default: active
              type: string
              enum:
                - active
                - inactive
          required:
            - name
        bucket:
          properties:
            links:
              type: object
              readOnly: true
              example:
                labels: /api/v2/buckets/1/labels
                members: /api/v2/buckets/1/members
                org: /api/v2/orgs/2
                owners: /api/v2/buckets/1/owners
                self: /api/v2/buckets/1
                write: /api/v2/write?org=2&bucket=1
              properties:
                labels:
                  description: URL to retrieve labels for this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                members:
                  description: URL to retrieve members that can read this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                org:
                  description: URL to retrieve parent organization for this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                owners:
                  description: URL to retrieve owners that can read and write to this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                self:
                  description: URL for this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                write:
                  description: URL to write line protocol to this bucket.
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
            id:
              readOnly: true
              type: string
            type:
              readOnly: true
              type: string
              default: user
              enum:
                - user
                - system
            name:
              type: string
            description:
              type: string
            orgID:
              type: string
            rp:
              type: string
            schemaType:
              default: implicit
              type: string
              enum:
                - implicit
                - explicit
            createdAt:
              type: string
              format: date-time
              readOnly: true
            updatedAt:
              type: string
              format: date-time
              readOnly: true
            retentionRules:
              type: array
              description: Rules to expire or retain data.  No rules means data never expires.
              items:
                type: object
                properties:
                  type:
                    type: string
                    default: expire
                    enum:
                      - expire
                  everySeconds:
                    type: integer
                    format: int64
                    description: Duration in seconds for how long data will be kept in the database. 0 means infinite.
                    example: 86400
                    minimum: 0
                  shardGroupDurationSeconds:
                    type: integer
                    format: int64
                    description: Shard duration measured in seconds.
                required:
                  - type
                  - everySeconds
            labels:
              $ref: '#/components/schemas/Variable/properties/labels'
          required:
            - name
            - retentionRules
        auth:
          $ref: '#/components/schemas/Authorization'
    Variable:
      type: object
      required:
        - name
        - orgID
        - arguments
      properties:
        links:
          type: object
          readOnly: true
          properties:
            self:
              type: string
              format: uri
            org:
              type: string
              format: uri
            labels:
              type: string
              format: uri
        id:
          readOnly: true
          type: string
        orgID:
          type: string
        name:
          type: string
        description:
          type: string
        selected:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            $ref: '#/paths/~1scrapers~1%7BscraperTargetID%7D~1labels/post/responses/201/content/application~1json/schema/properties/label'
        arguments:
          type: object
          oneOf:
            - properties:
                type:
                  type: string
                  enum:
                    - query
                values:
                  type: object
                  properties:
                    query:
                      type: string
                    language:
                      type: string
            - properties:
                type:
                  type: string
                  enum:
                    - constant
                values:
                  type: array
                  items:
                    type: string
            - properties:
                type:
                  type: string
                  enum:
                    - map
                values:
                  type: object
                  additionalProperties:
                    type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Variables:
      type: object
      example:
        variables:
          - id: '1221432'
            name: ':ok:'
            selected:
              - hello
            arguments:
              type: constant
              values:
                - howdy
                - hello
                - hi
                - yo
                - oy
          - id: '1221432'
            name: ':ok:'
            selected:
              - c
            arguments:
              type: map
              values:
                a: fdjaklfdjkldsfjlkjdsa
                b: dfaksjfkljekfajekdljfas
                c: fdjksajfdkfeawfeea
          - id: '1221432'
            name: ':ok:'
            selected:
              - host
            arguments:
              type: query
              query: 'from(bucket: "foo") |> showMeasurements()'
              language: flux
      properties:
        variables:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
    Source:
      type: object
      properties:
        links:
          type: object
          properties:
            self:
              type: string
            query:
              type: string
            health:
              type: string
            buckets:
              type: string
        id:
          type: string
        orgID:
          type: string
        default:
          type: boolean
        name:
          type: string
        type:
          type: string
          enum:
            - v1
            - v2
            - self
        url:
          type: string
          format: uri
        insecureSkipVerify:
          type: boolean
        telegraf:
          type: string
        token:
          type: string
        username:
          type: string
        password:
          type: string
        sharedSecret:
          type: string
        metaUrl:
          type: string
          format: uri
        defaultRP:
          type: string
        languages:
          type: array
          readOnly: true
          items:
            type: string
            enum:
              - flux
              - influxql
    Sources:
      type: object
      properties:
        links:
          type: object
          properties:
            self:
              type: string
              format: uri
        sources:
          type: array
          items:
            $ref: '#/components/schemas/Source'
    ScraperTargetRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the scraper target.
        type:
          type: string
          description: The type of the metrics to be parsed.
          enum:
            - prometheus
        url:
          type: string
          description: The URL of the metrics endpoint.
          example: 'http://localhost:9090/metrics'
        orgID:
          type: string
          description: The organization ID.
        bucketID:
          type: string
          description: The ID of the bucket to write to.
        allowInsecure:
          type: boolean
          description: Skip TLS verification on endpoint.
          default: false
    ScraperTargetResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ScraperTargetRequest'
        - type: object
          properties:
            id:
              type: string
              readOnly: true
            org:
              type: string
              description: The name of the organization.
            bucket:
              type: string
              description: The bucket name.
            links:
              type: object
              readOnly: true
              example:
                self: /api/v2/scrapers/1
                owners: /api/v2/scrapers/1/owners
                members: /api/v2/scrapers/1/members
                bucket: /api/v2/buckets/1
                organization: /api/v2/orgs/1
              properties:
                self:
                  type: string
                  format: uri
                  readOnly: true
                  description: URI of resource.
                members:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                owners:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                bucket:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
                organization:
                  $ref: '#/components/schemas/ScraperTargetResponse/allOf/1/properties/links/properties/self'
    ScraperTargetResponses:
      type: object
      properties:
        configurations:
          type: array
          items:
            $ref: '#/components/schemas/ScraperTargetResponse'
    MetadataBackup:
      type: object
      properties:
        kv:
          type: string
          format: binary
        sql:
          type: string
          format: binary
        buckets:
          $ref: '#/components/schemas/BucketMetadataManifests'
      required:
        - kv
        - sql
        - buckets
    BucketMetadataManifests:
      type: array
      items:
        $ref: '#/components/schemas/BucketMetadataManifest'
    BucketMetadataManifest:
      type: object
      properties:
        organizationID:
          type: string
        organizationName:
          type: string
        bucketID:
          type: string
        bucketName:
          type: string
        description:
          type: string
        defaultRetentionPolicy:
          type: string
        retentionPolicies:
          $ref: '#/components/schemas/RetentionPolicyManifests'
      required:
        - organizationID
        - organizationName
        - bucketID
        - bucketName
        - defaultRetentionPolicy
        - retentionPolicies
    RetentionPolicyManifests:
      type: array
      items:
        $ref: '#/components/schemas/RetentionPolicyManifest'
    RetentionPolicyManifest:
      type: object
      properties:
        name:
          type: string
        replicaN:
          type: integer
        duration:
          type: integer
          format: int64
        shardGroupDuration:
          type: integer
          format: int64
        shardGroups:
          $ref: '#/components/schemas/ShardGroupManifests'
        subscriptions:
          $ref: '#/components/schemas/SubscriptionManifests'
      required:
        - name
        - replicaN
        - duration
        - shardGroupDuration
        - shardGroups
        - subscriptions
    ShardGroupManifests:
      type: array
      items:
        $ref: '#/components/schemas/ShardGroupManifest'
    ShardGroupManifest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        truncatedAt:
          type: string
          format: date-time
        shards:
          $ref: '#/components/schemas/ShardManifests'
      required:
        - id
        - startTime
        - endTime
        - shards
    ShardManifests:
      type: array
      items:
        $ref: '#/components/schemas/ShardManifest'
    ShardManifest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        shardOwners:
          $ref: '#/components/schemas/ShardOwners'
      required:
        - id
        - shardOwners
    ShardOwners:
      type: array
      items:
        $ref: '#/components/schemas/ShardOwner'
    ShardOwner:
      type: object
      properties:
        nodeID:
          type: integer
          format: int64
          description: ID of the node that owns a shard.
      required:
        - nodeID
    SubscriptionManifests:
      type: array
      items:
        $ref: '#/components/schemas/SubscriptionManifest'
    SubscriptionManifest:
      type: object
      properties:
        name:
          type: string
        mode:
          type: string
        destinations:
          type: array
          items:
            type: string
      required:
        - name
        - mode
        - destinations
    RestoredBucketMappings:
      type: object
      properties:
        id:
          description: New ID of the restored bucket
          type: string
        name:
          type: string
        shardMappings:
          $ref: '#/components/schemas/BucketShardMappings'
      required:
        - id
        - name
        - shardMappings
    BucketShardMappings:
      type: array
      items:
        $ref: '#/components/schemas/BucketShardMapping'
    BucketShardMapping:
      type: object
      properties:
        oldId:
          type: integer
          format: int64
        newId:
          type: integer
          format: int64
      required:
        - oldId
        - newId
    Config:
      type: object
      properties:
        config:
          type: object
    RemoteConnection:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        orgID:
          type: string
        description:
          type: string
        remoteURL:
          type: string
          format: uri
        remoteOrgID:
          type: string
        allowInsecureTLS:
          type: boolean
          default: false
      required:
        - id
        - name
        - orgID
        - remoteURL
        - remoteOrgID
        - allowInsecureTLS
    RemoteConnections:
      type: object
      properties:
        remotes:
          type: array
          items:
            $ref: '#/components/schemas/RemoteConnection'
    RemoteConnectionCreationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orgID:
          type: string
        remoteURL:
          type: string
          format: uri
        remoteAPIToken:
          type: string
        remoteOrgID:
          type: string
        allowInsecureTLS:
          type: boolean
          default: false
      required:
        - name
        - orgID
        - remoteURL
        - remoteAPIToken
        - remoteOrgID
        - allowInsecureTLS
    RemoteConnectionUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        remoteURL:
          type: string
          format: uri
        remoteAPIToken:
          type: string
        remoteOrgID:
          type: string
        allowInsecureTLS:
          type: boolean
          default: false
    Replication:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        orgID:
          type: string
        remoteID:
          type: string
        localBucketID:
          type: string
        remoteBucketID:
          type: string
        maxQueueSizeBytes:
          type: integer
          format: int64
        currentQueueSizeBytes:
          type: integer
          format: int64
        latestResponseCode:
          type: integer
        latestErrorMessage:
          type: string
        dropNonRetryableData:
          type: boolean
      required:
        - id
        - name
        - remoteID
        - orgID
        - localBucketID
        - remoteBucketID
        - maxQueueSizeBytes
        - currentQueueSizeBytes
    Replications:
      type: object
      properties:
        replications:
          type: array
          items:
            $ref: '#/components/schemas/Replication'
    ReplicationCreationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orgID:
          type: string
        remoteID:
          type: string
        localBucketID:
          type: string
        remoteBucketID:
          type: string
        maxQueueSizeBytes:
          type: integer
          format: int64
          minimum: 33554430
          default: 67108860
        dropNonRetryableData:
          type: boolean
          default: false
        maxAgeSeconds:
          type: integer
          format: int64
          minimum: 0
          default: 604800
      required:
        - name
        - orgID
        - remoteID
        - localBucketID
        - remoteBucketID
        - maxQueueSizeBytes
        - maxAgeSeconds
    ReplicationUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        remoteID:
          type: string
        remoteBucketID:
          type: string
        maxQueueSizeBytes:
          type: integer
          format: int64
          minimum: 33554430
        dropNonRetryableData:
          type: boolean
        maxAgeSeconds:
          type: integer
          format: int64
          minimum: 0
  responses:
    ServerError:
      description: Non 2XX error response from server.
      content:
        application/json:
          schema:
            properties:
              code:
                description: code is the machine-readable error code.
                readOnly: true
                type: string
                enum:
                  - internal error
                  - not found
                  - conflict
                  - invalid
                  - unprocessable entity
                  - empty value
                  - unavailable
                  - forbidden
                  - too many requests
                  - unauthorized
                  - method not allowed
                  - request too large
                  - unsupported media type
              message:
                readOnly: true
                description: Human-readable message.
                type: string
              op:
                readOnly: true
                description: Describes the logical code operation when the error occurred. Useful for debugging.
                type: string
              err:
                readOnly: true
                description: Stack of errors that occurred during processing of the request. Useful for debugging.
                type: string
            required:
              - code
  securitySchemes:
    TokenAuthentication:
      type: apiKey
      name: Authorization
      in: header
      description: |
        Use the [Token authentication](#section/Authentication/TokenAuthentication)
        scheme to authenticate to the InfluxDB API.


        In your API requests, send an `Authorization` header.
        For the header value, provide the word `Token` followed by a space and an InfluxDB API token.
        The word `Token` is case-sensitive.


        ### Syntax

        `Authorization: Token YOUR_INFLUX_TOKEN`


        For more information and examples, see the following:
          - [`/authorizations`](#tag/Authorizations) endpoint.
          - [Authorize API requests]({{% INFLUXDB_DOCS_URL %}}/api-guide/api_intro/#authentication).
          - [Manage API tokens]({{% INFLUXDB_DOCS_URL %}}/security/tokens/).
    BasicAuthentication:
      type: http
      scheme: basic
      description: |
        Use the HTTP Basic authentication scheme for InfluxDB `/api/v2` API operations that support it.

        Username and password schemes require the following credentials:
          - **username**
          - **password**
security:
  - TokenAuthentication: []
