openapi: 3.0.0
info:
  title: Influx Legacy API
  version: 2.0.1
servers:
  - url: ''
parameters:
  TraceSpan:
    in: header
    name: Zap-Trace-Span
    description: OpenTracing span context
    example:
      trace_id: '1'
      span_id: '1'
      baggage:
        key: value
    required: false
    schema:
      type: string
paths:
  /query:
    get:
      operationId: GetLegacyQuery
      tags:
        - Legacy Query
      summary: Query with the 1.x compatibility API
      description: Queries InfluxDB using InfluxQL.
      parameters:
        - $ref: '#/parameters/TraceSpan'
        - in: header
          name: Accept
          schema:
            type: string
            description: |
              Media type that the client can understand.

              **Note**: With `application/csv`, query results include [unix timestamps]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#unix-timestamp) instead of RFC3339 timestamps.
            default: application/json
            enum:
              - application/json
              - application/csv
              - text/csv
              - application/x-msgpack
        - in: header
          name: Accept-Encoding
          description: The content encoding (usually a compression algorithm) that the client can understand.
          schema:
            type: string
            description: 'The content coding. Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.'
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          schema:
            type: string
            enum:
              - application/json
        - in: query
          name: u
          description: The InfluxDB 1.x username to authenticate the request.
          schema:
            type: string
        - in: query
          name: p
          description: The InfluxDB 1.x password to authenticate the request.
          schema:
            type: string
        - in: query
          name: db
          required: true
          description: |
            The database to query data from.
            This is mapped to an InfluxDB [bucket]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#bucket).
            For more information, see [Database and retention policy mapping]({{% INFLUXDB_DOCS_URL %}}/api/influxdb-1x/dbrp/).
          schema:
            type: string
        - in: query
          name: rp
          description: |
            The retention policy to query data from.
            This is mapped to an InfluxDB [bucket]({{% INFLUXDB_DOCS_URL %}}/influxdb/v2.2/reference/glossary/#bucket).
            For more information, see [Database and retention policy mapping]({{% INFLUXDB_DOCS_URL %}}/api/influxdb-1x/dbrp/).
          schema:
            type: string
        - in: query
          name: q
          required: true
          description: 'The InfluxQL query to execute. To execute multiple queries, delimit queries with a semicolon (`;`).'
          schema:
            type: string
        - in: query
          name: epoch
          description: 'Return results with [unix (epoch) timestamps]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#unix-timestamp) in the specified precision instead of RFC3339 timestamps with nanosecond precision.'
          schema:
            type: string
            enum:
              - ns
              - u
              - Âµ
              - ms
              - s
              - m
              - h
      responses:
        '200':
          description: Query results
          headers:
            Content-Encoding:
              description: Lists encodings (usually compression algorithms) that have been applied to the response payload.
              schema:
                type: string
                description: |
                  The content coding:
                    - `gzip`: compressed data
                    - `identity`: unmodified, uncompressed data.
                default: identity
                enum:
                  - gzip
                  - identity
            Trace-Id:
              description: 'The trace ID, if generated, of the request.'
              schema:
                type: string
                description: Trace ID of a request.
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/InfluxqlCsvResponse'
            application/csv:
              schema:
                $ref: '#/components/schemas/InfluxqlCsvResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/InfluxqlJsonResponse'
            application/x-msgpack:
              schema:
                type: string
                format: binary
        '429':
          description: |
            #### InfluxDB Cloud:
              - returns this error if a **read** or **write** request exceeds your
                plan's [adjustable service quotas]({{% INFLUXDB_DOCS_URL %}}/account-management/limits/#adjustable-service-quotas)
                or if a **delete** request exceeds the maximum
                [global limit]({{% INFLUXDB_DOCS_URL %}}/account-management/limits/#global-limits)
              - returns `Retry-After` header that describes when to try the write again.

            #### InfluxDB OSS:
              - doesn't return this error.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to delay after the response is received.
              schema:
                type: integer
                format: int32
        default:
          description: Error processing query
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ServerError/content/application~1json/schema'
  /legacy/authorizations:
    servers:
      - url: /private
    get:
      operationId: GetLegacyAuthorizations
      tags:
        - Legacy Authorizations
      summary: List all legacy authorizations
      parameters:
        - $ref: '#/parameters/TraceSpan'
        - in: query
          name: userID
          schema:
            type: string
          description: Only show legacy authorizations that belong to a user ID.
        - in: query
          name: user
          schema:
            type: string
          description: Only show legacy authorizations that belong to a user name.
        - in: query
          name: orgID
          schema:
            type: string
          description: Only show legacy authorizations that belong to an organization ID.
        - in: query
          name: org
          schema:
            type: string
          description: Only show legacy authorizations that belong to a organization name.
        - in: query
          name: token
          schema:
            type: string
          description: Only show legacy authorizations with a specified token (auth name).
        - in: query
          name: authID
          schema:
            type: string
          description: Only show legacy authorizations with a specified auth ID.
      responses:
        '200':
          description: A list of legacy authorizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    readOnly: true
                    type: object
                    properties:
                      next:
                        type: string
                        format: uri
                        readOnly: true
                        description: URI of resource.
                      self:
                        $ref: '#/paths/~1legacy~1authorizations/get/responses/200/content/application~1json/schema/properties/links/properties/next'
                      prev:
                        $ref: '#/paths/~1legacy~1authorizations/get/responses/200/content/application~1json/schema/properties/links/properties/next'
                    required:
                      - self
                  authorizations:
                    type: array
                    items:
                      $ref: '#/paths/~1legacy~1authorizations/post/responses/201/content/application~1json/schema'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    post:
      operationId: PostLegacyAuthorizations
      tags:
        - Legacy Authorizations
      summary: Create a legacy authorization
      parameters:
        - $ref: '#/parameters/TraceSpan'
      requestBody:
        description: Legacy authorization to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegacyAuthorizationPostRequest'
      responses:
        '201':
          description: Legacy authorization created
          content:
            application/json:
              schema:
                required:
                  - orgID
                  - permissions
                allOf:
                  - $ref: '#/components/schemas/LegacyAuthorizationPostRequest/allOf/0'
                  - type: object
                    properties:
                      createdAt:
                        type: string
                        format: date-time
                        readOnly: true
                      updatedAt:
                        type: string
                        format: date-time
                        readOnly: true
                      orgID:
                        type: string
                        description: ID of the organization that the authorization is scoped to.
                      permissions:
                        type: array
                        minItems: 1
                        description: List of permissions for an authorization.  An authorization must have at least one permission.
                        items:
                          $ref: '#/components/schemas/LegacyAuthorizationPostRequest/allOf/1/properties/permissions/items'
                      id:
                        readOnly: true
                        type: string
                      token:
                        readOnly: true
                        type: string
                        description: Token used to authenticate API requests.
                      userID:
                        readOnly: true
                        type: string
                        description: ID of the user that created and owns the token.
                      user:
                        readOnly: true
                        type: string
                        description: Name of the user that created and owns the token.
                      org:
                        readOnly: true
                        type: string
                        description: Name of the organization that the token is scoped to.
                      links:
                        type: object
                        readOnly: true
                        example:
                          self: /api/v2/authorizations/1
                          user: /api/v2/users/12
                        properties:
                          self:
                            readOnly: true
                            $ref: '#/paths/~1legacy~1authorizations/get/responses/200/content/application~1json/schema/properties/links/properties/next'
                          user:
                            readOnly: true
                            $ref: '#/paths/~1legacy~1authorizations/get/responses/200/content/application~1json/schema/properties/links/properties/next'
        '400':
          description: Invalid request
          $ref: '#/components/responses/ServerError'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  '/legacy/authorizations/{authID}':
    servers:
      - url: /private
    get:
      operationId: GetLegacyAuthorizationsID
      tags:
        - Legacy Authorizations
      summary: Retrieve a legacy authorization
      parameters:
        - $ref: '#/parameters/TraceSpan'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the legacy authorization to get.
      responses:
        '200':
          description: Legacy authorization details
          content:
            application/json:
              schema:
                $ref: '#/paths/~1legacy~1authorizations/post/responses/201/content/application~1json/schema'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    patch:
      operationId: PatchLegacyAuthorizationsID
      tags:
        - Legacy Authorizations
      summary: Update a legacy authorization to be active or inactive
      requestBody:
        description: Legacy authorization to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegacyAuthorizationPostRequest/allOf/0'
      parameters:
        - $ref: '#/parameters/TraceSpan'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the legacy authorization to update.
      responses:
        '200':
          description: The active or inactive legacy authorization
          content:
            application/json:
              schema:
                $ref: '#/paths/~1legacy~1authorizations/post/responses/201/content/application~1json/schema'
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: DeleteLegacyAuthorizationsID
      tags:
        - Legacy Authorizations
      summary: Delete a legacy authorization
      parameters:
        - $ref: '#/parameters/TraceSpan'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the legacy authorization to delete.
      responses:
        '204':
          description: Legacy authorization deleted
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
  '/legacy/authorizations/{authID}/password':
    servers:
      - url: /private
    post:
      operationId: PostLegacyAuthorizationsIDPassword
      tags:
        - Legacy Authorizations
      summary: Set a legacy authorization password
      parameters:
        - $ref: '#/parameters/TraceSpan'
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the legacy authorization to update.
      requestBody:
        description: New password
        required: true
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        '204':
          description: Legacy authorization password set
        default:
          description: Unexpected error
          $ref: '#/components/responses/ServerError'
components:
  schemas:
    LegacyAuthorizationPostRequest:
      required:
        - orgID
        - permissions
      allOf:
        - properties:
            status:
              description: 'Status of the token. If `inactive`, requests using the token will be rejected.'
              default: active
              type: string
              enum:
                - active
                - inactive
            description:
              type: string
              description: A description of the token.
        - type: object
          properties:
            orgID:
              type: string
              description: ID of org that authorization is scoped to.
            userID:
              type: string
              description: ID of user that authorization is scoped to.
            token:
              type: string
              description: Token (name) of the authorization
            permissions:
              type: array
              minItems: 1
              description: List of permissions for an auth.  An auth must have at least one Permission.
              items:
                required:
                  - action
                  - resource
                properties:
                  action:
                    type: string
                    enum:
                      - read
                      - write
                  resource:
                    type: object
                    required:
                      - type
                    properties:
                      type:
                        type: string
                        enum:
                          - authorizations
                          - buckets
                          - dashboards
                          - orgs
                          - sources
                          - tasks
                          - telegrafs
                          - users
                          - variables
                          - scrapers
                          - secrets
                          - labels
                          - views
                          - documents
                          - notificationRules
                          - notificationEndpoints
                          - checks
                          - dbrp
                          - notebooks
                          - annotations
                          - remotes
                          - replications
                      id:
                        type: string
                        description: If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.
                      name:
                        type: string
                        description: Optional name of the resource if the resource has a name field.
                      orgID:
                        type: string
                        description: If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.
                      org:
                        type: string
                        description: Optional name of the organization of the organization with orgID.
    InfluxqlJsonResponse:
      description: JSON Response to InfluxQL Query
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              statement_id:
                type: integer
              series:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    columns:
                      type: array
                      items:
                        type: string
                    values:
                      type: array
                      items:
                        type: array
                        items: {}
    InfluxqlCsvResponse:
      description: CSV Response to InfluxQL Query
      type: string
      example: |
        name,tags,time,test_field,test_tag test_measurement,,1603740794286107366,1,tag_value test_measurement,,1603740870053205649,2,tag_value test_measurement,,1603741221085428881,3,tag_value
  responses:
    ServerError:
      description: Non 2XX error response from server.
      content:
        application/json:
          schema:
            properties:
              code:
                description: code is the machine-readable error code.
                readOnly: true
                type: string
                enum:
                  - internal error
                  - not found
                  - conflict
                  - invalid
                  - unprocessable entity
                  - empty value
                  - unavailable
                  - forbidden
                  - too many requests
                  - unauthorized
                  - method not allowed
                  - request too large
                  - unsupported media type
              message:
                readOnly: true
                description: Human-readable message.
                type: string
              op:
                readOnly: true
                description: Describes the logical code operation when the error occurred. Useful for debugging.
                type: string
              err:
                readOnly: true
                description: Stack of errors that occurred during processing of the request. Useful for debugging.
                type: string
            required:
              - code
