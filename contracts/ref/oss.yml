components:
  parameters:
    After:
      description: |
        The last resource ID from which to seek from (but not including). This is to be used instead of `offset`.
      in: query
      name: after
      required: false
      schema:
        type: string
    Descending:
      in: query
      name: descending
      required: false
      schema:
        default: false
        type: boolean
    Limit:
      in: query
      name: limit
      required: false
      schema:
        default: 20
        maximum: 100
        minimum: 1
        type: integer
    Offset:
      in: query
      name: offset
      required: false
      schema:
        minimum: 0
        type: integer
    SortBy:
      in: query
      name: sortBy
      required: false
      schema:
        type: string
    TraceSpan:
      description: OpenTracing span context
      example:
        baggage:
          key: value
        span_id: "1"
        trace_id: "1"
      in: header
      name: Zap-Trace-Span
      required: false
      schema:
        type: string
  responses:
    ServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Non 2XX error response from server.
  schemas:
    Error:
      properties:
        code:
          description: code is the machine-readable error code.
          enum:
          - internal error
          - not found
          - conflict
          - invalid
          - unprocessable entity
          - empty value
          - unavailable
          - forbidden
          - too many requests
          - unauthorized
          - method not allowed
          - request too large
          - unsupported media type
          readOnly: true
          type: string
        err:
          description: err is a stack of errors that occurred during processing of
            the request. Useful for debugging.
          readOnly: true
          type: string
        message:
          description: message is a human-readable message.
          readOnly: true
          type: string
        op:
          description: op describes the logical code operation during error. Useful
            for debugging.
          readOnly: true
          type: string
      required:
      - code
      - message
    Token:
      properties:
        token:
          type: string
      type: object
  securitySchemes:
    BasicAuthentication:
      description: |
        ### Basic authentication scheme

        Use HTTP Basic Auth with clients that support the InfluxDB 1.x convention of username and password (that don't support the `Authorization: Token` scheme).

        Username and password schemes require the following credentials:
          - **username**: 1.x username (this is separate from the UI login username)
          - **password**: 1.x password or InfluxDB API token

        ### Example

        `curl --get "http://localhost:8086/query"
              --user "YOUR_1.x_USERNAME":"YOUR_TOKEN_OR_PASSWORD"`

        For more information and examples, see how to [authenticate with a username and password scheme](https://docs.influxdata.com/influxdb/v2.0/reference/api/influxdb-1x/)
      scheme: basic
      type: http
    QuerystringAuthentication:
      description: |
        ### Querystring authentication scheme

        Use InfluxDB 1.x API parameters to provide credentials through the query string.

        Username and password schemes require the following credentials:
          - **username**: 1.x username (this is separate from the UI login username)
          - **password**: 1.x password or InfluxDB API token

        ### Example

        `curl --get "http://localhost:8086/query"
              --data-urlencode "u=YOUR_1.x_USERNAME"
              --data-urlencode "p=YOUR_TOKEN_OR_PASSWORD"`

        For more information and examples, see how to [authenticate with a username and password scheme](https://docs.influxdata.com/influxdb/v2.0/reference/api/influxdb-1x/)
      in: query
      name: u=&p=
      type: apiKey
    TokenAuthentication:
      bearerFormat: InfluxDB Token String
      description: |
        ### Token authentication scheme

        InfluxDB API tokens ensure secure interaction between users and data. A token belongs to an organization and identifies InfluxDB permissions within the organization.

        Include your API token in an `Authentication: Token YOUR_API_TOKEN` HTTP header with each request.

        ### Example

          `curl http://localhost:8086/ping
              --header "Authentication: Token YOUR_API_TOKEN"`

        For more information and examples, see the following:
          - [Use tokens in API requests](https://docs.influxdata.com/influxdb/v2.0/api-guide/api_intro/#authentication).
          - [Manage API tokens](https://docs.influxdata.com/influxdb/v2.0/security/tokens).
          - [`/authorizations`](#tag/Authorizations) endpoint.
      scheme: token
      type: http
info:
  title: Complete InfluxDB OSS API
openapi: 3.0.0
paths:
  /api/v2/:
    get:
      operationId: GetRoutes
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routes'
          description: All routes
      summary: List all top level routes
      tags:
      - Routes
  /api/v2/authorizations:
    get:
      operationId: GetAuthorizations
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: Only show authorizations that belong to a user ID.
        in: query
        name: userID
        schema:
          type: string
      - description: Only show authorizations that belong to a user name.
        in: query
        name: user
        schema:
          type: string
      - description: Only show authorizations that belong to an organization ID.
        in: query
        name: orgID
        schema:
          type: string
      - description: Only show authorizations that belong to a organization name.
        in: query
        name: org
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizations'
          description: A list of authorizations
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: List all authorizations
      tags:
      - Authorizations
    post:
      operationId: PostAuthorizations
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationPostRequest'
        description: Authorization to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: Authorization created
        "400":
          $ref: '#/components/responses/ServerError'
          description: Invalid request
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Create an authorization
      tags:
      - Authorizations
  /api/v2/authorizations/{authID}:
    delete:
      operationId: DeleteAuthorizationsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the authorization to delete.
        in: path
        name: authID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Authorization deleted
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Delete an authorization
      tags:
      - Authorizations
    get:
      operationId: GetAuthorizationsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the authorization to get.
        in: path
        name: authID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: Authorization details
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Retrieve an authorization
      tags:
      - Authorizations
    patch:
      operationId: PatchAuthorizationsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the authorization to update.
        in: path
        name: authID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationUpdateRequest'
        description: Authorization to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: The active or inactive authorization
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Update an authorization to be active or inactive
      tags:
      - Authorizations
  /api/v2/backup/kv:
    get:
      deprecated: true
      operationId: GetBackupKV
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: Snapshot of KV metadata
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Download snapshot of metadata stored in the server's embedded KV store.
        Should not be used in versions greater than 2.1.x, as it doesn't include metadata
        stored in embedded SQL.
      tags:
      - Backup
  /api/v2/backup/metadata:
    get:
      operationId: GetBackupMetadata
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Accept-Encoding request HTTP header advertises which content
          encoding, usually a compression algorithm, the client is able to understand.
        in: header
        name: Accept-Encoding
        schema:
          default: identity
          description: Specifies that the query response in the body should be encoded
            with gzip or not encoded with identity.
          enum:
          - gzip
          - identity
          type: string
      responses:
        "200":
          content:
            multipart/mixed:
              schema:
                $ref: '#/components/schemas/MetadataBackup'
          description: Snapshot of metadata
          headers:
            Content-Encoding:
              description: The Content-Encoding entity header is used to compress
                the media-type.  When present, its value indicates which encodings
                were applied to the entity-body
              schema:
                default: identity
                description: Specifies that the response in the body is encoded with
                  gzip or not encoded with identity.
                enum:
                - gzip
                - identity
                type: string
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Download snapshot of all metadata in the server
      tags:
      - Backup
  /api/v2/backup/shards/{shardID}:
    get:
      operationId: GetBackupShardId
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Accept-Encoding request HTTP header advertises which content
          encoding, usually a compression algorithm, the client is able to understand.
        in: header
        name: Accept-Encoding
        schema:
          default: identity
          description: Specifies that the query response in the body should be encoded
            with gzip or not encoded with identity.
          enum:
          - gzip
          - identity
          type: string
      - description: The shard ID.
        in: path
        name: shardID
        required: true
        schema:
          format: int64
          type: integer
      - description: Earliest time to include in the snapshot. RFC3339 format.
        in: query
        name: since
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: TSM snapshot.
          headers:
            Content-Encoding:
              description: The Content-Encoding entity header is used to compress
                the media-type.  When present, its value indicates which encodings
                were applied to the entity-body
              schema:
                default: identity
                description: Specifies that the response in the body is encoded with
                  gzip or not encoded with identity.
                enum:
                - gzip
                - identity
                type: string
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Shard not found.
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Download snapshot of all TSM data in a shard
      tags:
      - Backup
  /api/v2/buckets:
    get:
      operationId: GetBuckets
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/After'
      - description: The name of the organization.
        in: query
        name: org
        schema:
          type: string
      - description: The organization ID.
        in: query
        name: orgID
        schema:
          type: string
      - description: Only returns buckets with a specific name.
        in: query
        name: name
        schema:
          type: string
      - description: Only returns buckets with a specific ID.
        in: query
        name: id
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buckets'
          description: A list of buckets
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all buckets
      tags:
      - Buckets
    post:
      operationId: PostBuckets
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBucketRequest'
        description: Bucket to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
          description: Bucket created
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request body failed validation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a bucket
      tags:
      - Buckets
  /api/v2/buckets/{bucketID}:
    delete:
      operationId: DeleteBucketsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the bucket to delete.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bucket not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a bucket
      tags:
      - Buckets
    get:
      operationId: GetBucketsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
          description: Bucket details
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a bucket
      tags:
      - Buckets
    patch:
      operationId: PatchBucketsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBucketRequest'
        description: Bucket update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
          description: An updated bucket
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a bucket
      tags:
      - Buckets
  /api/v2/buckets/{bucketID}/labels:
    get:
      operationId: GetBucketsIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsResponse'
          description: A list of all labels for a bucket
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all labels for a bucket
      tags:
      - Buckets
    post:
      operationId: PostBucketsIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelMapping'
        description: Label to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: The newly added label
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a label to a bucket
      tags:
      - Buckets
  /api/v2/buckets/{bucketID}/labels/{labelID}:
    delete:
      operationId: DeleteBucketsIDLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      - description: The ID of the label to delete.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bucket not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a label from a bucket
      tags:
      - Buckets
  /api/v2/buckets/{bucketID}/members:
    get:
      operationId: GetBucketsIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMembers'
          description: A list of bucket members
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all users with member privileges for a bucket
      tags:
      - Buckets
    post:
      operationId: PostBucketsIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as member
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMember'
          description: Member added to bucket
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a member to a bucket
      tags:
      - Buckets
  /api/v2/buckets/{bucketID}/members/{userID}:
    delete:
      operationId: DeleteBucketsIDMembersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the member to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Member removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove a member from a bucket
      tags:
      - Buckets
  /api/v2/buckets/{bucketID}/owners:
    get:
      operationId: GetBucketsIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwners'
          description: A list of bucket owners
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all owners of a bucket
      tags:
      - Buckets
    post:
      operationId: PostBucketsIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as owner
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwner'
          description: Bucket owner added
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add an owner to a bucket
      tags:
      - Buckets
  /api/v2/buckets/{bucketID}/owners/{userID}:
    delete:
      operationId: DeleteBucketsIDOwnersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the owner to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Owner removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove an owner from a bucket
      tags:
      - Buckets
  /api/v2/checks:
    get:
      operationId: GetChecks
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      - description: Only show checks that belong to a specific organization ID.
        in: query
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checks'
          description: A list of checks
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all checks
      tags:
      - Checks
    post:
      operationId: CreateCheck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCheck'
        description: Check to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Check'
          description: Check created
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add new check
      tags:
      - Checks
  /api/v2/checks/{checkID}:
    delete:
      operationId: DeleteChecksID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The check ID.
        in: path
        name: checkID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The check was not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a check
      tags:
      - Checks
    get:
      operationId: GetChecksID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The check ID.
        in: path
        name: checkID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Check'
          description: The check requested
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a check
      tags:
      - Checks
    patch:
      operationId: PatchChecksID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The check ID.
        in: path
        name: checkID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckPatch'
        description: Check update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Check'
          description: An updated check
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The check was not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a check
      tags:
      - Checks
    put:
      operationId: PutChecksID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The check ID.
        in: path
        name: checkID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Check'
        description: Check update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Check'
          description: An updated check
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The check was not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a check
      tags:
      - Checks
  /api/v2/checks/{checkID}/labels:
    get:
      operationId: GetChecksIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The check ID.
        in: path
        name: checkID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsResponse'
          description: A list of all labels for a check
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all labels for a check
      tags:
      - Checks
    post:
      operationId: PostChecksIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The check ID.
        in: path
        name: checkID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelMapping'
        description: Label to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: The label was added to the check
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a label to a check
      tags:
      - Checks
  /api/v2/checks/{checkID}/labels/{labelID}:
    delete:
      operationId: DeleteChecksIDLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The check ID.
        in: path
        name: checkID
        required: true
        schema:
          type: string
      - description: The ID of the label to delete.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Check or label not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete label from a check
      tags:
      - Checks
  /api/v2/checks/{checkID}/query:
    get:
      operationId: GetChecksIDQuery
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The check ID.
        in: path
        name: checkID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FluxResponse'
          description: The check query requested
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Check not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a check query
      tags:
      - Checks
  /api/v2/dashboards:
    get:
      operationId: GetDashboards
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Descending'
      - description: A user identifier. Returns only dashboards where this user has
          the `owner` role.
        in: query
        name: owner
        schema:
          type: string
      - description: The column to sort by.
        in: query
        name: sortBy
        schema:
          enum:
          - ID
          - CreatedAt
          - UpdatedAt
          type: string
      - description: A list of dashboard identifiers. Returns only the listed dashboards.
          If both `id` and `owner` are specified, only `id` is used.
        in: query
        name: id
        schema:
          items:
            type: string
          type: array
      - description: The identifier of the organization.
        in: query
        name: orgID
        schema:
          type: string
      - description: The name of the organization.
        in: query
        name: org
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboards'
          description: All dashboards
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all dashboards
      tags:
      - Dashboards
    post:
      operationId: PostDashboards
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDashboardRequest'
        description: Dashboard to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/Dashboard'
                - $ref: '#/components/schemas/DashboardWithViewProperties'
          description: Added dashboard
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a dashboard
      tags:
      - Dashboards
  /api/v2/dashboards/{dashboardID}:
    delete:
      operationId: DeleteDashboardsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the dashboard to update.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Dashboard not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a dashboard
      tags:
      - Dashboards
    get:
      operationId: GetDashboardsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the dashboard to update.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      - description: Includes the cell view properties in the response if set to `properties`
        in: query
        name: include
        required: false
        schema:
          enum:
          - properties
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/Dashboard'
                - $ref: '#/components/schemas/DashboardWithViewProperties'
          description: Retrieve a single dashboard
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Dashboard not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a Dashboard
      tags:
      - Dashboards
    patch:
      operationId: PatchDashboardsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the dashboard to update.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                cells:
                  $ref: '#/components/schemas/CellWithViewProperties'
                  description: optional, when provided will replace all existing cells
                    with the cells provided
                description:
                  description: optional, when provided will replace the description
                  type: string
                name:
                  description: optional, when provided will replace the name
                  type: string
              title: PatchDashboardRequest
              type: object
        description: Patching of a dashboard
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: Updated dashboard
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Dashboard not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a dashboard
      tags:
      - Dashboards
  /api/v2/dashboards/{dashboardID}/cells:
    post:
      operationId: PostDashboardsIDCells
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the dashboard to update.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCell'
        description: Cell that will be added
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cell'
          description: Cell successfully added
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Dashboard not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a dashboard cell
      tags:
      - Cells
      - Dashboards
    put:
      description: Replaces all cells in a dashboard. This is used primarily to update
        the positional information of all cells.
      operationId: PutDashboardsIDCells
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the dashboard to update.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cells'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: Replaced dashboard cells
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Dashboard not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Replace cells in a dashboard
      tags:
      - Cells
      - Dashboards
  /api/v2/dashboards/{dashboardID}/cells/{cellID}:
    delete:
      operationId: DeleteDashboardsIDCellsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the dashboard to delete.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      - description: The ID of the cell to delete.
        in: path
        name: cellID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Cell successfully deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Cell or dashboard not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a dashboard cell
      tags:
      - Cells
      - Dashboards
    patch:
      description: Updates the non positional information related to a cell. Updates
        to a single cell's positional data could cause grid conflicts.
      operationId: PatchDashboardsIDCellsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the dashboard to update.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      - description: The ID of the cell to update.
        in: path
        name: cellID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CellUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cell'
          description: Updated dashboard cell
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Cell or dashboard not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update the non-positional information related to a cell
      tags:
      - Cells
      - Dashboards
  /api/v2/dashboards/{dashboardID}/cells/{cellID}/view:
    get:
      operationId: GetDashboardsIDCellsIDView
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The dashboard ID.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      - description: The cell ID.
        in: path
        name: cellID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
          description: A dashboard cells view
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Cell or dashboard not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve the view for a cell
      tags:
      - Cells
      - Dashboards
      - Views
    patch:
      operationId: PatchDashboardsIDCellsIDView
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the dashboard to update.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      - description: The ID of the cell to update.
        in: path
        name: cellID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/View'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/View'
          description: Updated cell view
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Cell or dashboard not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update the view for a cell
      tags:
      - Cells
      - Dashboards
      - Views
  /api/v2/dashboards/{dashboardID}/labels:
    get:
      operationId: GetDashboardsIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The dashboard ID.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsResponse'
          description: A list of all labels for a dashboard
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all labels for a dashboard
      tags:
      - Dashboards
    post:
      operationId: PostDashboardsIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The dashboard ID.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelMapping'
        description: Label to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: The label added to the dashboard
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a label to a dashboard
      tags:
      - Dashboards
  /api/v2/dashboards/{dashboardID}/labels/{labelID}:
    delete:
      operationId: DeleteDashboardsIDLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The dashboard ID.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      - description: The ID of the label to delete.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Dashboard not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a label from a dashboard
      tags:
      - Dashboards
  /api/v2/dashboards/{dashboardID}/members:
    get:
      operationId: GetDashboardsIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The dashboard ID.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMembers'
          description: A list of users who have member privileges for a dashboard
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all dashboard members
      tags:
      - Dashboards
    post:
      operationId: PostDashboardsIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The dashboard ID.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as member
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMember'
          description: Added to dashboard members
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a member to a dashboard
      tags:
      - Dashboards
  /api/v2/dashboards/{dashboardID}/members/{userID}:
    delete:
      operationId: DeleteDashboardsIDMembersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the member to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The dashboard ID.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Member removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove a member from a dashboard
      tags:
      - Dashboards
  /api/v2/dashboards/{dashboardID}/owners:
    get:
      operationId: GetDashboardsIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The dashboard ID.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwners'
          description: A list of users who have owner privileges for a dashboard
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all dashboard owners
      tags:
      - Dashboards
    post:
      operationId: PostDashboardsIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The dashboard ID.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as owner
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwner'
          description: Added to dashboard owners
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add an owner to a dashboard
      tags:
      - Dashboards
  /api/v2/dashboards/{dashboardID}/owners/{userID}:
    delete:
      operationId: DeleteDashboardsIDOwnersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the owner to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The dashboard ID.
        in: path
        name: dashboardID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Owner removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove an owner from a dashboard
      tags:
      - Dashboards
  /api/v2/dbrps:
    get:
      operationId: GetDBRPs
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: Specifies the organization ID to filter on
        in: query
        name: orgID
        schema:
          type: string
      - description: Specifies the organization name to filter on
        in: query
        name: org
        schema:
          type: string
      - description: Specifies the mapping ID to filter on
        in: query
        name: id
        schema:
          type: string
      - description: Specifies the bucket ID to filter on
        in: query
        name: bucketID
        schema:
          type: string
      - description: Specifies filtering on default
        in: query
        name: default
        schema:
          type: boolean
      - description: Specifies the database to filter on
        in: query
        name: db
        schema:
          type: string
      - description: Specifies the retention policy to filter on
        in: query
        name: rp
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBRPs'
          description: Success. Returns a list of database retention policy mappings.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. The request has one or more invalid parameters.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List database retention policy mappings
      tags:
      - DBRPs
    post:
      operationId: PostDBRP
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DBRPCreate'
        description: The database retention policy mapping to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBRP'
          description: Created. Returns the created database retention policy mapping.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. The mapping in the request has one or more invalid
            IDs.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a database retention policy mapping
      tags:
      - DBRPs
  /api/v2/dbrps/{dbrpID}:
    delete:
      operationId: DeleteDBRPID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: Specifies the organization ID of the mapping
        in: query
        name: orgID
        schema:
          type: string
      - description: Specifies the organization name of the mapping
        in: query
        name: org
        schema:
          type: string
      - description: The database retention policy mapping
        in: path
        name: dbrpID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: if any of the IDs passed is invalid
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a database retention policy
      tags:
      - DBRPs
    get:
      operationId: GetDBRPsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: Specifies the organization ID of the mapping
        in: query
        name: orgID
        schema:
          type: string
      - description: Specifies the organization name of the mapping
        in: query
        name: org
        schema:
          type: string
      - description: The database retention policy mapping ID
        in: path
        name: dbrpID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBRPGet'
          description: The database retention policy requested
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: if any of the IDs passed is invalid
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a database retention policy mapping
      tags:
      - DBRPs
    patch:
      operationId: PatchDBRPID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: Specifies the organization ID of the mapping
        in: query
        name: orgID
        schema:
          type: string
      - description: Specifies the organization name of the mapping
        in: query
        name: org
        schema:
          type: string
      - description: The database retention policy mapping.
        in: path
        name: dbrpID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DBRPUpdate'
        description: Database retention policy update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBRPGet'
          description: An updated mapping
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: if any of the IDs passed is invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The mapping was not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a database retention policy mapping
      tags:
      - DBRPs
  /api/v2/delete:
    post:
      operationId: PostDelete
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: Specifies the organization to delete data from.
        in: query
        name: org
        schema:
          description: Only points from this organization are deleted.
          type: string
      - description: Specifies the bucket to delete data from.
        in: query
        name: bucket
        schema:
          description: Only points from this bucket are deleted.
          type: string
      - description: Specifies the organization ID of the resource.
        in: query
        name: orgID
        schema:
          type: string
      - description: Specifies the bucket ID to delete data from.
        in: query
        name: bucketID
        schema:
          description: Only points from this bucket ID are deleted.
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePredicateRequest'
        description: Deletes data from an InfluxDB bucket.
        required: true
      responses:
        "204":
          description: delete has been accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: no token was sent or does not have sufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: the bucket or organization is not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: internal server error
      summary: Delete data
      tags:
      - Delete
  /api/v2/flags:
    get:
      operationId: GetFlags
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flags'
          description: Feature flags for the currently authenticated user
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Return the feature flags for the currently authenticated user
      tags:
      - Users
  /api/v2/health:
    get:
      operationId: GetHealth
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: The instance is healthy
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: The instance is unhealthy
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      servers:
      - url: ""
      summary: Get the health of an instance
      tags:
      - Health
  /api/v2/labels:
    get:
      operationId: GetLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The organization ID.
        in: query
        name: orgID
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsResponse'
          description: A list of labels
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all labels
      tags:
      - Labels
    post:
      operationId: PostLabels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelCreateRequest'
        description: Label to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: Added label
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a label
      tags:
      - Labels
  /api/v2/labels/{labelID}:
    delete:
      operationId: DeleteLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the label to delete.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Label not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a label
      tags:
      - Labels
    get:
      operationId: GetLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the label to update.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: A label
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a label
      tags:
      - Labels
    patch:
      operationId: PatchLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the label to update.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelUpdate'
        description: Label update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: Updated label
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Label not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a label
      tags:
      - Labels
  /api/v2/legacy/authorizations:
    get:
      operationId: GetLegacyAuthorizations
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: Only show legacy authorizations that belong to a user ID.
        in: query
        name: userID
        schema:
          type: string
      - description: Only show legacy authorizations that belong to a user name.
        in: query
        name: user
        schema:
          type: string
      - description: Only show legacy authorizations that belong to an organization
          ID.
        in: query
        name: orgID
        schema:
          type: string
      - description: Only show legacy authorizations that belong to a organization
          name.
        in: query
        name: org
        schema:
          type: string
      - description: Only show legacy authorizations with a specified token (auth
          name).
        in: query
        name: token
        schema:
          type: string
      - description: Only show legacy authorizations with a specified auth ID.
        in: query
        name: authID
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorizations'
          description: A list of legacy authorizations
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: List all legacy authorizations
      tags:
      - Legacy Authorizations
    post:
      operationId: PostLegacyAuthorizations
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegacyAuthorizationPostRequest'
        description: Legacy authorization to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: Legacy authorization created
        "400":
          $ref: '#/components/responses/ServerError'
          description: Invalid request
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Create a legacy authorization
      tags:
      - Legacy Authorizations
    servers:
    - url: /private
  /api/v2/legacy/authorizations/{authID}:
    delete:
      operationId: DeleteLegacyAuthorizationsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the legacy authorization to delete.
        in: path
        name: authID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Legacy authorization deleted
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Delete a legacy authorization
      tags:
      - Legacy Authorizations
    get:
      operationId: GetLegacyAuthorizationsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the legacy authorization to get.
        in: path
        name: authID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: Legacy authorization details
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Retrieve a legacy authorization
      tags:
      - Legacy Authorizations
    patch:
      operationId: PatchLegacyAuthorizationsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the legacy authorization to update.
        in: path
        name: authID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationUpdateRequest'
        description: Legacy authorization to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: The active or inactive legacy authorization
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Update a legacy authorization to be active or inactive
      tags:
      - Legacy Authorizations
    servers:
    - url: /private
  /api/v2/legacy/authorizations/{authID}/password:
    post:
      operationId: PostLegacyAuthorizationsIDPassword
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the legacy authorization to update.
        in: path
        name: authID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetBody'
        description: New password
        required: true
      responses:
        "204":
          description: Legacy authorization password set
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Set a legacy authorization password
      tags:
      - Legacy Authorizations
    servers:
    - url: /private
  /api/v2/maps/mapToken:
    get:
      operationId: getMapboxToken
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: A temp token for Mapbox
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
  /api/v2/me:
    get:
      operationId: GetMe
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: The currently authenticated user.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve the currently authenticated user
      tags:
      - Users
  /api/v2/me/password:
    put:
      operationId: PutMePassword
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetBody'
        description: New password
        required: true
      responses:
        "204":
          description: Password successfully updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsuccessful authentication
      security:
      - BasicAuthentication: []
      summary: Update a password
      tags:
      - Users
  /api/v2/notificationEndpoints:
    get:
      operationId: GetNotificationEndpoints
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      - description: Only show notification endpoints that belong to specific organization
          ID.
        in: query
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEndpoints'
          description: A list of notification endpoints
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all notification endpoints
      tags:
      - NotificationEndpoints
    post:
      operationId: CreateNotificationEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNotificationEndpoint'
        description: Notification endpoint to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEndpoint'
          description: Notification endpoint created
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a notification endpoint
      tags:
      - NotificationEndpoints
  /api/v2/notificationEndpoints/{endpointID}:
    delete:
      operationId: DeleteNotificationEndpointsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification endpoint ID.
        in: path
        name: endpointID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The endpoint was not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a notification endpoint
      tags:
      - NotificationEndpoints
    get:
      operationId: GetNotificationEndpointsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification endpoint ID.
        in: path
        name: endpointID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEndpoint'
          description: The notification endpoint requested
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a notification endpoint
      tags:
      - NotificationEndpoints
    patch:
      operationId: PatchNotificationEndpointsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification endpoint ID.
        in: path
        name: endpointID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEndpointUpdate'
        description: Check update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEndpoint'
          description: An updated notification endpoint
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The notification endpoint was not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a notification endpoint
      tags:
      - NotificationEndpoints
    put:
      operationId: PutNotificationEndpointsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification endpoint ID.
        in: path
        name: endpointID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEndpoint'
        description: A new notification endpoint to replace the existing endpoint
          with
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationEndpoint'
          description: An updated notification endpoint
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The notification endpoint was not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a notification endpoint
      tags:
      - NotificationEndpoints
  /api/v2/notificationEndpoints/{endpointID}/labels:
    get:
      operationId: GetNotificationEndpointsIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification endpoint ID.
        in: path
        name: endpointID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsResponse'
          description: A list of all labels for a notification endpoint
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all labels for a notification endpoint
      tags:
      - NotificationEndpoints
    post:
      operationId: PostNotificationEndpointIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification endpoint ID.
        in: path
        name: endpointID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelMapping'
        description: Label to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: The label was added to the notification endpoint
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a label to a notification endpoint
      tags:
      - NotificationEndpoints
  /api/v2/notificationEndpoints/{endpointID}/labels/{labelID}:
    delete:
      operationId: DeleteNotificationEndpointsIDLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification endpoint ID.
        in: path
        name: endpointID
        required: true
        schema:
          type: string
      - description: The ID of the label to delete.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Endpoint or label not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a label from a notification endpoint
      tags:
      - NotificationEndpoints
  /api/v2/notificationRules:
    get:
      operationId: GetNotificationRules
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      - description: Only show notification rules that belong to a specific organization
          ID.
        in: query
        name: orgID
        required: true
        schema:
          type: string
      - description: Only show notifications that belong to the specific check ID.
        in: query
        name: checkID
        schema:
          type: string
      - description: Only return notification rules that "would match" statuses which
          contain the tag key value pairs provided.
        in: query
        name: tag
        schema:
          example: env:prod
          pattern: ^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRules'
          description: A list of notification rules
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all notification rules
      tags:
      - NotificationRules
    post:
      operationId: CreateNotificationRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNotificationRule'
        description: Notification rule to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRule'
          description: Notification rule created
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a notification rule
      tags:
      - NotificationRules
  /api/v2/notificationRules/{ruleID}:
    delete:
      operationId: DeleteNotificationRulesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification rule ID.
        in: path
        name: ruleID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The check was not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a notification rule
      tags:
      - NotificationRules
    get:
      operationId: GetNotificationRulesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification rule ID.
        in: path
        name: ruleID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRule'
          description: The notification rule requested
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a notification rule
      tags:
      - NotificationRules
    patch:
      operationId: PatchNotificationRulesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification rule ID.
        in: path
        name: ruleID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRuleUpdate'
        description: Notification rule update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRule'
          description: An updated notification rule
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The notification rule was not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a notification rule
      tags:
      - NotificationRules
    put:
      operationId: PutNotificationRulesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification rule ID.
        in: path
        name: ruleID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRule'
        description: Notification rule update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRule'
          description: An updated notification rule
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The notification rule was not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a notification rule
      tags:
      - NotificationRules
  /api/v2/notificationRules/{ruleID}/labels:
    get:
      operationId: GetNotificationRulesIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification rule ID.
        in: path
        name: ruleID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsResponse'
          description: A list of all labels for a notification rule
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all labels for a notification rule
      tags:
      - NotificationRules
    post:
      operationId: PostNotificationRuleIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification rule ID.
        in: path
        name: ruleID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelMapping'
        description: Label to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: The label was added to the notification rule
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a label to a notification rule
      tags:
      - NotificationRules
  /api/v2/notificationRules/{ruleID}/labels/{labelID}:
    delete:
      operationId: DeleteNotificationRulesIDLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification rule ID.
        in: path
        name: ruleID
        required: true
        schema:
          type: string
      - description: The ID of the label to delete.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Rule or label not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete label from a notification rule
      tags:
      - NotificationRules
  /api/v2/notificationRules/{ruleID}/query:
    get:
      operationId: GetNotificationRulesIDQuery
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The notification rule ID.
        in: path
        name: ruleID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FluxResponse'
          description: The notification rule query requested
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Notification rule not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a notification rule query
      tags:
      - Rules
  /api/v2/orgs:
    get:
      operationId: GetOrgs
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Descending'
      - description: Filter organizations to a specific organization name.
        in: query
        name: org
        schema:
          type: string
      - description: Filter organizations to a specific organization ID.
        in: query
        name: orgID
        schema:
          type: string
      - description: Filter organizations to a specific user ID.
        in: query
        name: userID
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organizations'
          description: A list of organizations
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all organizations
      tags:
      - Organizations
    post:
      operationId: PostOrgs
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostOrganizationRequest'
        description: Organization to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization created
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create an organization
      tags:
      - Organizations
  /api/v2/orgs/{orgID}:
    delete:
      operationId: DeleteOrgsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the organization to delete.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete an organization
      tags:
      - Organizations
    get:
      operationId: GetOrgsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the organization to get.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization details
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve an organization
      tags:
      - Organizations
    patch:
      operationId: PatchOrgsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the organization to get.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchOrganizationRequest'
        description: Organization update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update an organization
      tags:
      - Organizations
  /api/v2/orgs/{orgID}/members:
    get:
      operationId: GetOrgsIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The organization ID.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMembers'
          description: A list of organization members
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all members of an organization
      tags:
      - Organizations
    post:
      operationId: PostOrgsIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The organization ID.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as member
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMember'
          description: Added to organization created
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a member to an organization
      tags:
      - Organizations
  /api/v2/orgs/{orgID}/members/{userID}:
    delete:
      operationId: DeleteOrgsIDMembersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the member to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The organization ID.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Member removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove a member from an organization
      tags:
      - Organizations
  /api/v2/orgs/{orgID}/owners:
    get:
      operationId: GetOrgsIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The organization ID.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwners'
          description: A list of organization owners
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all owners of an organization
      tags:
      - Organizations
    post:
      operationId: PostOrgsIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The organization ID.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as owner
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwner'
          description: Organization owner added
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add an owner to an organization
      tags:
      - Organizations
  /api/v2/orgs/{orgID}/owners/{userID}:
    delete:
      operationId: DeleteOrgsIDOwnersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the owner to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The organization ID.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Owner removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove an owner from an organization
      tags:
      - Organizations
  /api/v2/orgs/{orgID}/secrets:
    get:
      operationId: GetOrgsIDSecrets
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The organization ID.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretKeysResponse'
          description: A list of all secret keys
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all secret keys for an organization
      tags:
      - Secrets
    patch:
      operationId: PatchOrgsIDSecrets
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The organization ID.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secrets'
        description: Secret key value pairs to update/add
        required: true
      responses:
        "204":
          description: Keys successfully patched
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update secrets in an organization
      tags:
      - Secrets
  /api/v2/orgs/{orgID}/secrets/{secretID}:
    delete:
      operationId: DeleteOrgsIDSecretsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The organization ID.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      - description: The secret ID.
        in: path
        name: secretID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Keys successfully deleted
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Delete a secret from an organization
      tags:
      - Secrets
  /api/v2/orgs/{orgID}/secrets/delete:
    post:
      deprecated: true
      operationId: PostOrgsIDSecrets
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The organization ID.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretKeys'
        description: Secret key to delete
        required: true
      responses:
        "204":
          description: Keys successfully patched
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete secrets from an organization
      tags:
      - Secrets
  /ping:
    get:
      operationId: GetPing
      responses:
        "204":
          description: OK
          headers:
            X-Influxdb-Build:
              description: The type of InfluxDB build.
              schema:
                type: string
            X-Influxdb-Version:
              description: The version of InfluxDB.
              schema:
                type: integer
      servers:
      - url: ""
      summary: Checks the status of InfluxDB instance and version of InfluxDB.
      tags:
      - Ping
    head:
      operationId: HeadPing
      responses:
        "204":
          description: OK
          headers:
            X-Influxdb-Build:
              description: The type of InfluxDB build.
              schema:
                type: string
            X-Influxdb-Version:
              description: The version of InfluxDB.
              schema:
                type: integer
      servers:
      - url: ""
      summary: Checks the status of InfluxDB instance and version of InfluxDB.
      tags:
      - Ping
  /api/v2/query:
    post:
      description: |
        Retrieves data from InfluxDB buckets.

        To query data, you need the following:
        - **organization** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.0/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._
        - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.0/security/tokens/view-tokens/)
         for instructions on viewing your API token._
        - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.0/reference/urls/)_.
        - **Flux query** – _See [Flux](https://docs.influxdata.com/flux/v0.x/)._

        For more information and examples, see [Query with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.0/query-data/execute-queries/influx-api/).
      operationId: PostQuery
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Accept-Encoding request HTTP header advertises which content
          encoding, usually a compression algorithm, the client is able to understand.
        in: header
        name: Accept-Encoding
        schema:
          default: identity
          description: Specifies that the query response in the body should be encoded
            with gzip or not encoded with identity.
          enum:
          - gzip
          - identity
          type: string
      - in: header
        name: Content-Type
        schema:
          enum:
          - application/json
          - application/vnd.flux
          type: string
      - description: Specifies the name of the organization executing the query. Takes
          either the ID or Name. If both `orgID` and `org` are specified, `org` takes
          precedence.
        in: query
        name: org
        schema:
          type: string
      - description: Specifies the ID of the organization executing the query. If
          both `orgID` and `org` are specified, `org` takes precedence.
        in: query
        name: orgID
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
          application/vnd.flux:
            example: |
              from(bucket: "example-bucket")
                  |> range(start: -5m)
                  |> filter(fn: (r) => r._measurement == "example-measurement")
            schema:
              type: string
        description: Flux query or specification to execute
      responses:
        "200":
          content:
            application/vnd.influx.arrow:
              schema:
                format: binary
                type: string
            text/csv:
              schema:
                example: |
                  result,table,_start,_stop,_time,region,host,_value mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43 mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25 mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62
                type: string
          description: Success. Returns query results.
          headers:
            Content-Encoding:
              description: The Content-Encoding entity header is used to compress
                the media-type.  When present, its value indicates which encodings
                were applied to the entity-body
              schema:
                default: identity
                description: Specifies that the response in the body is encoded with
                  gzip or not encoded with identity.
                enum:
                - gzip
                - identity
                type: string
            Trace-Id:
              description: The Trace-Id header reports the request's trace ID, if
                one was generated.
              schema:
                description: Specifies the request's trace ID.
                type: string
        "429":
          description: Token is temporarily over quota. The Retry-After header describes
            when to try the read again.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to
                delay after the response is received.
              schema:
                format: int32
                type: integer
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error processing query
      summary: Query data
      tags:
      - Query
  /api/v2/query/analyze:
    post:
      operationId: PostQueryAnalyze
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - in: header
        name: Content-Type
        schema:
          enum:
          - application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
        description: Flux query to analyze
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeQueryResponse'
          description: Query analyze results. Errors will be empty if the query is
            valid.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
          headers:
            X-Influx-Error:
              description: Error string describing the problem
              schema:
                type: string
            X-Influx-Reference:
              description: Reference code unique to the error type
              schema:
                type: integer
      summary: Analyze a Flux query
      tags:
      - Query
  /api/v2/query/ast:
    post:
      description: Analyzes flux query and generates a query specification.
      operationId: PostQueryAst
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - in: header
        name: Content-Type
        schema:
          enum:
          - application/json
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageRequest'
        description: Analyzed Flux query to generate abstract syntax tree.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ASTResponse'
          description: Abstract syntax tree of the flux query.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Any response other than 200 is an internal server error
      summary: Generate an Abstract Syntax Tree (AST) from a query
      tags:
      - Query
  /api/v2/query/suggestions:
    get:
      operationId: GetQuerySuggestions
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FluxSuggestions'
          description: Suggestions for next functions in call chain
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Any response other than 200 is an internal server error
      summary: Retrieve query suggestions
      tags:
      - Query
  /api/v2/query/suggestions/{name}:
    get:
      operationId: GetQuerySuggestionsName
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The name of the branching suggestion.
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FluxSuggestion'
          description: Suggestions for next functions in call chain
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Any response other than 200 is an internal server error
      summary: Retrieve query suggestions for a branching suggestion
      tags:
      - Query
  /api/v2/ready:
    get:
      operationId: GetReady
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ready'
          description: The instance is ready
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      servers:
      - url: ""
      summary: Get the readiness of an instance at startup
      tags:
      - Ready
  /api/v2/resources:
    get:
      operationId: GetResources
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: All resources targets
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all known resources
      tags:
      - Resources
  /api/v2/restore/bucket/{bucketID}:
    post:
      deprecated: true
      operationId: PostRestoreBucketID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The bucket ID.
        in: path
        name: bucketID
        required: true
        schema:
          type: string
      - in: header
        name: Content-Type
        schema:
          default: application/octet-stream
          enum:
          - application/octet-stream
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              format: byte
              type: string
        description: Database info serialized as protobuf.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: byte
                type: string
          description: ID mappings for shards in bucket.
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Overwrite storage metadata for a bucket with shard info from a backup.
      tags:
      - Restore
  /api/v2/restore/bucketMetadata:
    post:
      operationId: PostRestoreBucketMetadata
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BucketMetadataManifest'
        description: Metadata manifest for a bucket.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoredBucketMappings'
          description: ID mappings for shards in new bucket.
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Create a new bucket pre-seeded with shard info from a backup.
      tags:
      - Restore
  /api/v2/restore/kv:
    post:
      operationId: PostRestoreKV
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: When present, its value indicates to the database that compression
          is applied to the line-protocol body.
        in: header
        name: Content-Encoding
        schema:
          default: identity
          description: Specifies that the line protocol in the body is encoded with
            gzip or not encoded with identity.
          enum:
          - gzip
          - identity
          type: string
      - in: header
        name: Content-Type
        schema:
          default: application/octet-stream
          enum:
          - application/octet-stream
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              format: binary
              type: string
        description: Full KV snapshot.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  token:
                    description: token is the root token for the instance after restore
                      (this is overwritten during the restore)
                    type: string
                type: object
          description: KV store successfully overwritten.
        "204":
          description: KV store successfully overwritten.
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Overwrite the embedded KV store on the server with a backed-up snapshot.
      tags:
      - Restore
  /api/v2/restore/shards/{shardID}:
    post:
      operationId: PostRestoreShardId
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: When present, its value indicates to the database that compression
          is applied to the line-protocol body.
        in: header
        name: Content-Encoding
        schema:
          default: identity
          description: Specifies that the line protocol in the body is encoded with
            gzip or not encoded with identity.
          enum:
          - gzip
          - identity
          type: string
      - in: header
        name: Content-Type
        schema:
          default: application/octet-stream
          enum:
          - application/octet-stream
          type: string
      - description: The shard ID.
        in: path
        name: shardID
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              format: binary
              type: string
        description: TSM snapshot.
        required: true
      responses:
        "204":
          description: TSM snapshot successfully restored.
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Restore a TSM snapshot into a shard.
      tags:
      - Restore
  /api/v2/restore/sql:
    post:
      operationId: PostRestoreSQL
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: When present, its value indicates to the database that compression
          is applied to the line-protocol body.
        in: header
        name: Content-Encoding
        schema:
          default: identity
          description: Specifies that the line protocol in the body is encoded with
            gzip or not encoded with identity.
          enum:
          - gzip
          - identity
          type: string
      - in: header
        name: Content-Type
        schema:
          default: application/octet-stream
          enum:
          - application/octet-stream
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              format: binary
              type: string
        description: Full SQL snapshot.
        required: true
      responses:
        "204":
          description: SQL store successfully overwritten.
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Overwrite the embedded SQL store on the server with a backed-up snapshot.
      tags:
      - Restore
  /api/v2/scrapers:
    get:
      operationId: GetScrapers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: Specifies the name of the scraper target.
        in: query
        name: name
        schema:
          type: string
      - description: List of scraper target IDs to return. If both `id` and `owner`
          are specified, only `id` is used.
        in: query
        name: id
        schema:
          items:
            type: string
          type: array
      - description: Specifies the organization ID of the scraper target.
        in: query
        name: orgID
        schema:
          type: string
      - description: Specifies the organization name of the scraper target.
        in: query
        name: org
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponses'
          description: All scraper targets
      summary: List all scraper targets
      tags:
      - Scraper Targets
    post:
      operationId: PostScrapers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScraperTargetRequest'
        description: Scraper target to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponse'
          description: Scraper target created
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a scraper target
      tags:
      - Scraper Targets
  /api/v2/scrapers/{scraperTargetID}:
    delete:
      operationId: DeleteScrapersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The identifier of the scraper target.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Scraper target deleted
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete a scraper target
      tags:
      - Scraper Targets
    get:
      operationId: GetScrapersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The identifier of the scraper target.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponse'
          description: The scraper target
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a scraper target
      tags:
      - Scraper Targets
    patch:
      operationId: PatchScrapersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The identifier of the scraper target.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScraperTargetRequest'
        description: Scraper target update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScraperTargetResponse'
          description: Scraper target updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update a scraper target
      tags:
      - Scraper Targets
  /api/v2/scrapers/{scraperTargetID}/labels:
    get:
      operationId: GetScrapersIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The scraper target ID.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsResponse'
          description: A list of labels for a scraper target.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all labels for a scraper target
      tags:
      - Scraper Targets
    post:
      operationId: PostScrapersIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The scraper target ID.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelMapping'
        description: Label to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: The newly added label
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a label to a scraper target
      tags:
      - Scraper Targets
  /api/v2/scrapers/{scraperTargetID}/labels/{labelID}:
    delete:
      operationId: DeleteScrapersIDLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The scraper target ID.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      - description: The label ID.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Scraper target not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a label from a scraper target
      tags:
      - Scraper Targets
  /api/v2/scrapers/{scraperTargetID}/members:
    get:
      operationId: GetScrapersIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The scraper target ID.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMembers'
          description: A list of scraper target members
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all users with member privileges for a scraper target
      tags:
      - Scraper Targets
    post:
      operationId: PostScrapersIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The scraper target ID.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as member
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMember'
          description: Member added to scraper targets
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a member to a scraper target
      tags:
      - Scraper Targets
  /api/v2/scrapers/{scraperTargetID}/members/{userID}:
    delete:
      operationId: DeleteScrapersIDMembersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of member to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The scraper target ID.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Member removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove a member from a scraper target
      tags:
      - Scraper Targets
  /api/v2/scrapers/{scraperTargetID}/owners:
    get:
      operationId: GetScrapersIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The scraper target ID.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwners'
          description: A list of scraper target owners
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all owners of a scraper target
      tags:
      - Scraper Targets
    post:
      operationId: PostScrapersIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The scraper target ID.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as owner
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwner'
          description: Scraper target owner added
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add an owner to a scraper target
      tags:
      - Scraper Targets
  /api/v2/scrapers/{scraperTargetID}/owners/{userID}:
    delete:
      operationId: DeleteScrapersIDOwnersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of owner to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The scraper target ID.
        in: path
        name: scraperTargetID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Owner removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove an owner from a scraper target
      tags:
      - Scraper Targets
  /api/v2/setup:
    get:
      description: Returns `true` if no default user, organization, or bucket has
        been created.
      operationId: GetSetup
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsOnboarding'
          description: allowed true or false
      summary: Check if database has default user, org, bucket
      tags:
      - Setup
    post:
      description: Post an onboarding request to set up initial user, org and bucket.
      operationId: PostSetup
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingRequest'
        description: Source to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse'
          description: Created default user, bucket, org
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Set up initial user, org and bucket
      tags:
      - Setup
  /api/v2/signin:
    post:
      description: Authenticates ***Basic Auth*** credentials for a user. If successful,
        creates a new UI session for the user.
      operationId: PostSignin
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        "204":
          description: Success. User authenticated.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User account is disabled.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsuccessful authentication.
      security:
      - BasicAuthentication: []
      summary: Create a user session.
      tags:
      - Signin
  /api/v2/signout:
    post:
      description: Expires the current UI session for the user.
      operationId: PostSignout
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      responses:
        "204":
          description: Session successfully expired
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsuccessful session expiry
      summary: Expire the current UI session
      tags:
      - Signout
  /api/v2/sources:
    get:
      operationId: GetSources
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The name of the organization.
        in: query
        name: org
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sources'
          description: A list of sources
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all sources
      tags:
      - Sources
    post:
      operationId: PostSources
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
        description: Source to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
          description: Created Source
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a source
      tags:
      - Sources
  /api/v2/sources/{sourceID}:
    delete:
      operationId: DeleteSourcesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The source ID.
        in: path
        name: sourceID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: View not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a source
      tags:
      - Sources
    get:
      operationId: GetSourcesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The source ID.
        in: path
        name: sourceID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
          description: A source
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Source not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a source
      tags:
      - Sources
    patch:
      operationId: PatchSourcesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The source ID.
        in: path
        name: sourceID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
        description: Source update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
          description: Created Source
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Source not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a Source
      tags:
      - Sources
  /api/v2/sources/{sourceID}/buckets:
    get:
      operationId: GetSourcesIDBuckets
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The source ID.
        in: path
        name: sourceID
        required: true
        schema:
          type: string
      - description: The name of the organization.
        in: query
        name: org
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buckets'
          description: A source
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Source not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get buckets in a source
      tags:
      - Sources
      - Buckets
  /api/v2/sources/{sourceID}/health:
    get:
      operationId: GetSourcesIDHealth
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The source ID.
        in: path
        name: sourceID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: The source is healthy
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: The source is not healthy
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get the health of a source
      tags:
      - Sources
  /api/v2/stacks:
    get:
      operationId: ListStacks
      parameters:
      - description: The organization ID of the stacks
        in: query
        name: orgID
        required: true
        schema:
          type: string
      - description: A collection of names to filter the list by.
        in: query
        name: name
        schema:
          type: string
      - description: A collection of stackIDs to filter the list by.
        in: query
        name: stackID
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  stacks:
                    items:
                      $ref: '#/components/schemas/Stack'
                    type: array
                type: object
          description: Success. Returns the list of stacks.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List installed templates
      tags:
      - Templates
    post:
      operationId: CreateStack
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                name:
                  type: string
                orgID:
                  type: string
                urls:
                  items:
                    type: string
                  type: array
              title: PostStackRequest
              type: object
        description: The stack to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stack'
          description: Success. Returns the newly created stack.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a new stack
      tags:
      - Templates
  /api/v2/stacks/{stack_id}:
    delete:
      operationId: DeleteStack
      parameters:
      - description: The identifier of the stack.
        in: path
        name: stack_id
        required: true
        schema:
          type: string
      - description: The identifier of the organization.
        in: query
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The stack and its associated resources were deleted.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a stack and associated resources
      tags:
      - Templates
    get:
      operationId: ReadStack
      parameters:
      - description: The identifier of the stack.
        in: path
        name: stack_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stack'
          description: Returns the stack.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a stack
      tags:
      - Templates
    patch:
      operationId: UpdateStack
      parameters:
      - description: The identifier of the stack.
        in: path
        name: stack_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                additionalResources:
                  items:
                    properties:
                      kind:
                        type: string
                      resourceID:
                        type: string
                      templateMetaName:
                        type: string
                    required:
                    - kind
                    - resourceID
                    type: object
                  type: array
                description:
                  nullable: true
                  type: string
                name:
                  nullable: true
                  type: string
                templateURLs:
                  items:
                    type: string
                  nullable: true
                  type: array
              title: PatchStackRequest
              type: object
        description: The stack to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stack'
          description: Returns the updated stack.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a stack
      tags:
      - Templates
  /api/v2/stacks/{stack_id}/uninstall:
    post:
      operationId: UninstallStack
      parameters:
      - description: The identifier of the stack.
        in: path
        name: stack_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stack'
          description: Returns the uninstalled stack.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Uninstall a stack
      tags:
      - Templates
  /api/v2/tasks:
    get:
      operationId: GetTasks
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: Returns task with a specific name.
        in: query
        name: name
        schema:
          type: string
      - description: Return tasks after a specified ID.
        in: query
        name: after
        schema:
          type: string
      - description: Filter tasks to a specific user ID.
        in: query
        name: user
        schema:
          type: string
      - description: Filter tasks to a specific organization name.
        in: query
        name: org
        schema:
          type: string
      - description: Filter tasks to a specific organization ID.
        in: query
        name: orgID
        schema:
          type: string
      - description: Filter tasks by a status--"inactive" or "active".
        in: query
        name: status
        schema:
          enum:
          - active
          - inactive
          type: string
      - description: The number of tasks to return
        in: query
        name: limit
        schema:
          default: 100
          maximum: 500
          minimum: 1
          type: integer
      - description: Type of task, unset by default.
        in: query
        name: type
        required: false
        schema:
          default: ""
          enum:
          - basic
          - system
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
          description: A list of tasks
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all tasks
      tags:
      - Tasks
    post:
      operationId: PostTasks
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
        description: Task to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Task created
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a new task
      tags:
      - Tasks
  /api/v2/tasks/{taskID}:
    delete:
      description: Deletes a task and all associated records
      operationId: DeleteTasksID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the task to delete.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Task deleted
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a task
      tags:
      - Tasks
    get:
      operationId: GetTasksID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Task details
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a task
      tags:
      - Tasks
    patch:
      description: Update a task. This will cancel all queued runs.
      operationId: PatchTasksID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
        description: Task update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Task updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a task
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/labels:
    get:
      operationId: GetTasksIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsResponse'
          description: A list of all labels for a task
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all labels for a task
      tags:
      - Tasks
    post:
      operationId: PostTasksIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelMapping'
        description: Label to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: A list of all labels for a task
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a label to a task
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/labels/{labelID}:
    delete:
      operationId: DeleteTasksIDLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      - description: The label ID.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Task not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a label from a task
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/logs:
    get:
      operationId: GetTasksIDLogs
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
          description: All logs for a task
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve all logs for a task
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/members:
    get:
      operationId: GetTasksIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMembers'
          description: A list of users who have member privileges for a task
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all task members
      tags:
      - Tasks
    post:
      operationId: PostTasksIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as member
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMember'
          description: Added to task members
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a member to a task
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/members/{userID}:
    delete:
      operationId: DeleteTasksIDMembersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the member to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Member removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove a member from a task
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/owners:
    get:
      operationId: GetTasksIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwners'
          description: A list of users who have owner privileges for a task
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all owners of a task
      tags:
      - Tasks
    post:
      operationId: PostTasksIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as owner
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwner'
          description: Added to task owners
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add an owner to a task
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/owners/{userID}:
    delete:
      operationId: DeleteTasksIDOwnersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the owner to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Owner removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove an owner from a task
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/runs:
    get:
      operationId: GetTasksIDRuns
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the task to get runs for.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      - description: Returns runs after a specific ID.
        in: query
        name: after
        schema:
          type: string
      - description: The number of runs to return
        in: query
        name: limit
        schema:
          default: 100
          maximum: 500
          minimum: 1
          type: integer
      - description: Filter runs to those scheduled after this time, RFC3339
        in: query
        name: afterTime
        schema:
          format: date-time
          type: string
      - description: Filter runs to those scheduled before this time, RFC3339
        in: query
        name: beforeTime
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Runs'
          description: A list of task runs
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List runs for a task
      tags:
      - Tasks
    post:
      operationId: PostTasksIDRuns
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - in: path
        name: taskID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunManually'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
          description: Run scheduled to start
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Manually start a task run, overriding the current schedule
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/runs/{runID}:
    delete:
      operationId: DeleteTasksIDRunsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      - description: The run ID.
        in: path
        name: runID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Cancel a running task
      tags:
      - Tasks
    get:
      operationId: GetTasksIDRunsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      - description: The run ID.
        in: path
        name: runID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
          description: The run record
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a single run for a task
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/runs/{runID}/logs:
    get:
      operationId: GetTasksIDRunsIDLogs
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: ID of task to get logs for.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      - description: ID of run to get logs for.
        in: path
        name: runID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
          description: All logs for a run
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve all logs for a run
      tags:
      - Tasks
  /api/v2/tasks/{taskID}/runs/{runID}/retry:
    post:
      operationId: PostTasksIDRunsIDRetry
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The task ID.
        in: path
        name: taskID
        required: true
        schema:
          type: string
      - description: The run ID.
        in: path
        name: runID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
          description: Run that has been queued
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retry a task run
      tags:
      - Tasks
  /api/v2/telegraf/plugins:
    get:
      operationId: GetTelegrafPlugins
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The type of plugin desired.
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegrafPlugins'
          description: A list of Telegraf plugins.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all Telegraf plugins
      tags:
      - Telegraf Plugins
  /api/v2/telegrafs:
    get:
      operationId: GetTelegrafs
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The organization ID the Telegraf config belongs to.
        in: query
        name: orgID
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Telegrafs'
          description: A list of Telegraf configurations
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all Telegraf configurations
      tags:
      - Telegrafs
    post:
      operationId: PostTelegrafs
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegrafRequest'
        description: Telegraf configuration to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Telegraf'
          description: Telegraf configuration created
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a Telegraf configuration
      tags:
      - Telegrafs
  /api/v2/telegrafs/{telegrafID}:
    delete:
      operationId: DeleteTelegrafsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Telegraf configuration ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a Telegraf configuration
      tags:
      - Telegrafs
    get:
      operationId: GetTelegrafsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Telegraf configuration ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      - in: header
        name: Accept
        required: false
        schema:
          default: application/toml
          enum:
          - application/toml
          - application/json
          - application/octet-stream
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Telegraf'
            application/octet-stream:
              example: |-
                [agent]
                interval = "10s"
              schema:
                type: string
            application/toml:
              example: |-
                [agent]
                interval = "10s"
              schema:
                type: string
          description: Telegraf configuration details
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve a Telegraf configuration
      tags:
      - Telegrafs
    put:
      operationId: PutTelegrafsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Telegraf config ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegrafRequest'
        description: Telegraf configuration update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Telegraf'
          description: An updated Telegraf configurations
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a Telegraf configuration
      tags:
      - Telegrafs
  /api/v2/telegrafs/{telegrafID}/labels:
    get:
      operationId: GetTelegrafsIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Telegraf config ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsResponse'
          description: A list of all labels for a Telegraf config
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all labels for a Telegraf config
      tags:
      - Telegrafs
    post:
      operationId: PostTelegrafsIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Telegraf config ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelMapping'
        description: Label to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: The label added to the Telegraf config
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a label to a Telegraf config
      tags:
      - Telegrafs
  /api/v2/telegrafs/{telegrafID}/labels/{labelID}:
    delete:
      operationId: DeleteTelegrafsIDLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Telegraf config ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      - description: The label ID.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Telegraf config not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a label from a Telegraf config
      tags:
      - Telegrafs
  /api/v2/telegrafs/{telegrafID}/members:
    get:
      operationId: GetTelegrafsIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Telegraf config ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMembers'
          description: A list of Telegraf config members
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all users with member privileges for a Telegraf config
      tags:
      - Telegrafs
    post:
      operationId: PostTelegrafsIDMembers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Telegraf config ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as member
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceMember'
          description: Member added to Telegraf config
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a member to a Telegraf config
      tags:
      - Telegrafs
  /api/v2/telegrafs/{telegrafID}/members/{userID}:
    delete:
      operationId: DeleteTelegrafsIDMembersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the member to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The Telegraf config ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Member removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove a member from a Telegraf config
      tags:
      - Telegrafs
  /api/v2/telegrafs/{telegrafID}/owners:
    get:
      operationId: GetTelegrafsIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Telegraf configuration ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwners'
          description: Returns Telegraf configuration owners as a ResourceOwners list
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all owners of a Telegraf configuration
      tags:
      - Telegrafs
    post:
      operationId: PostTelegrafsIDOwners
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The Telegraf configuration ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceMemberRequestBody'
        description: User to add as owner
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceOwner'
          description: Telegraf configuration owner was added. Returns a ResourceOwner
            that references the User.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add an owner to a Telegraf configuration
      tags:
      - Telegrafs
  /api/v2/telegrafs/{telegrafID}/owners/{userID}:
    delete:
      operationId: DeleteTelegrafsIDOwnersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the owner to remove.
        in: path
        name: userID
        required: true
        schema:
          type: string
      - description: The Telegraf config ID.
        in: path
        name: telegrafID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Owner removed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Remove an owner from a Telegraf config
      tags:
      - Telegrafs
  /api/v2/templates/apply:
    post:
      description: Applies or performs a dry-run of template in an organization.
      operationId: ApplyTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateApply'
          application/x-jsonnet:
            schema:
              $ref: '#/components/schemas/TemplateApply'
          text/yml:
            schema:
              $ref: '#/components/schemas/TemplateApply'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateSummary'
          description: |
            Success. The package dry-run succeeded. No new resources were created. Returns a diff and summary of the dry-run. The diff and summary won't contain IDs for resources that didn't exist at the time of the dry-run.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateSummary'
          description: |
            Success. The package applied successfully. Returns a diff and summary of the run. The summary contains newly created resources. The diff compares the initial state to the state after the package applied. This corresponds to `"dryRun": true`.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Apply or dry-run a template
      tags:
      - Templates
  /api/v2/templates/export:
    post:
      operationId: ExportTemplate
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/TemplateExportByID'
              - $ref: '#/components/schemas/TemplateExportByName'
        description: Export resources as an InfluxDB template.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/Template'
          description: The template was created successfully. Returns the newly created
            template.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Export a new template
      tags:
      - Templates
  /api/v2/users:
    get:
      operationId: GetUsers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/After'
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: id
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
          description: A list of users
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: List all users
      tags:
      - Users
    post:
      operationId: PostUsers
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: User created
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Create a user
      tags:
      - Users
  /api/v2/users/{userID}:
    delete:
      operationId: DeleteUsersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the user to delete.
        in: path
        name: userID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: User deleted
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Delete a user
      tags:
      - Users
    get:
      operationId: GetUsersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The user ID.
        in: path
        name: userID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: User details
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Retrieve a user
      tags:
      - Users
    patch:
      operationId: PatchUsersID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the user to update.
        in: path
        name: userID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: User updated
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Update a user
      tags:
      - Users
  /api/v2/users/{userID}/password:
    post:
      operationId: PostUsersIDPassword
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The user ID.
        in: path
        name: userID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetBody'
        description: New password
        required: true
      responses:
        "204":
          description: Password successfully updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsuccessful authentication
      security:
      - BasicAuthentication: []
      summary: Update a password
      tags:
      - Users
  /api/v2/variables:
    get:
      operationId: GetVariables
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The name of the organization.
        in: query
        name: org
        schema:
          type: string
      - description: The organization ID.
        in: query
        name: orgID
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variables'
          description: A list of variables for an organization
        "400":
          $ref: '#/components/responses/ServerError'
          description: Invalid request
        default:
          $ref: '#/components/responses/ServerError'
          description: Internal server error
      summary: List all variables
      tags:
      - Variables
    post:
      operationId: PostVariables
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
        description: Variable to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
          description: Variable created
        default:
          $ref: '#/components/responses/ServerError'
          description: Internal server error
      summary: Create a variable
      tags:
      - Variables
  /api/v2/variables/{variableID}:
    delete:
      operationId: DeleteVariablesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The variable ID.
        in: path
        name: variableID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Variable deleted
        default:
          $ref: '#/components/responses/ServerError'
          description: Internal server error
      summary: Delete a variable
      tags:
      - Variables
    get:
      operationId: GetVariablesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The variable ID.
        in: path
        name: variableID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
          description: Variable found
        "404":
          $ref: '#/components/responses/ServerError'
          description: Variable not found
        default:
          $ref: '#/components/responses/ServerError'
          description: Internal server error
      summary: Retrieve a variable
      tags:
      - Variables
    patch:
      operationId: PatchVariablesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The variable ID.
        in: path
        name: variableID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
        description: Variable update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
          description: Variable updated
        default:
          $ref: '#/components/responses/ServerError'
          description: Internal server error
      summary: Update a variable
      tags:
      - Variables
    put:
      operationId: PutVariablesID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The variable ID.
        in: path
        name: variableID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Variable'
        description: Variable to replace
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variable'
          description: Variable updated
        default:
          $ref: '#/components/responses/ServerError'
          description: Internal server error
      summary: Replace a variable
      tags:
      - Variables
  /api/v2/variables/{variableID}/labels:
    get:
      operationId: GetVariablesIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The variable ID.
        in: path
        name: variableID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelsResponse'
          description: A list of all labels for a variable
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List all labels for a variable
      tags:
      - Variables
    post:
      operationId: PostVariablesIDLabels
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The variable ID.
        in: path
        name: variableID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelMapping'
        description: Label to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelResponse'
          description: The newly added label
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add a label to a variable
      tags:
      - Variables
  /api/v2/variables/{variableID}/labels/{labelID}:
    delete:
      operationId: DeleteVariablesIDLabelsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The variable ID.
        in: path
        name: variableID
        required: true
        schema:
          type: string
      - description: The label ID to delete.
        in: path
        name: labelID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Delete has been accepted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Variable not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a label from a variable
      tags:
      - Variables
  /api/v2/write:
    post:
      description: |
        Writes data to a bucket.

        To write data into InfluxDB, you need the following:
        - **organization** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.0/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._
        - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.0/organizations/buckets/view-buckets/) for
         instructions on viewing your bucket ID._
        - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.0/security/tokens/view-tokens/)
         for instructions on viewing your API token._
        - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.0/reference/urls/)_.
        - data in [line protocol](https://docs.influxdata.com/influxdb/v2.0/reference/syntax/line-protocol) format.

        For more information and examples, see [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.0/write-data/developer-tools/api).
      operationId: PostWrite
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: When present, the header value tells the database that compression
          is applied to the line protocol in the request body.
        in: header
        name: Content-Encoding
        schema:
          default: identity
          description: The header value specifies that the line protocol in the request
            body is encoded with gzip or not encoded with identity.
          enum:
          - gzip
          - identity
          type: string
      - description: The header value indicates the format of the data in the request
          body.
        in: header
        name: Content-Type
        schema:
          default: text/plain; charset=utf-8
          description: |
            `text/plain` specifies line protocol. `UTF-8` is the default character set.
          enum:
          - text/plain
          - text/plain; charset=utf-8
          - application/vnd.influx.arrow
          type: string
      - description: The header value indicates the size of the entity-body, in bytes,
          sent to the database. If the length is greater than the database's `max
          body` configuration option, the server responds with status code `413`.
        in: header
        name: Content-Length
        schema:
          description: The length in decimal number of octets.
          type: integer
      - description: The header value specifies the response format.
        in: header
        name: Accept
        schema:
          default: application/json
          description: The response format for errors.
          enum:
          - application/json
          type: string
      - description: The parameter value specifies the destination organization for
          writes. The database writes all points in the batch to this organization.
          If you provide both `orgID` and `org` parameters, `org` takes precedence.
        in: query
        name: org
        required: true
        schema:
          description: Organization name or ID.
          type: string
      - description: The parameter value specifies the ID of the destination organization
          for writes. If both `orgID` and `org` are specified, `org` takes precedence.
        in: query
        name: orgID
        schema:
          type: string
      - description: The destination bucket for writes.
        in: query
        name: bucket
        required: true
        schema:
          description: All points within batch are written to this bucket.
          type: string
      - description: The precision for the unix timestamps within the body line-protocol.
        in: query
        name: precision
        schema:
          $ref: '#/components/schemas/WritePrecision'
      requestBody:
        content:
          text/plain:
            schema:
              format: byte
              type: string
        description: Data in line protocol format.
        required: true
      responses:
        "204":
          description: InfluxDB validated the request data format and accepted the
            data for writing to the bucket. `204` doesn't indicate a successful write
            operation since writes are asynchronous. See [how to check for write errors](https://docs.influxdata.com/influxdb/v2.0/write-data/troubleshoot).
        "400":
          content:
            application/json:
              examples:
                measurementSchemaFieldTypeConflict:
                  summary: Example of a field type conflict thrown by an explicit
                    bucket schema
                  value:
                    code: invalid
                    message: 'partial write error (2 written): unable to parse ''air_sensor,service=S1,sensor=L1
                      temperature="90.5",humidity=70.0 1632850122'': schema: field
                      type for field "temperature" not permitted by schema; got String
                      but expected Float'
              schema:
                $ref: '#/components/schemas/LineProtocolError'
          description: Bad request. The line protocol data in the request is malformed.
            The response body contains the first malformed line in the data. InfluxDB
            rejected the batch and did not write any data.
        "401":
          content:
            application/json:
              examples:
                tokenNotAuthorized:
                  summary: Token is not authorized to access the organization or resource
                  value:
                    code: unauthorized
                    message: unauthorized access
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            Unauthorized. The error may indicate one of the following:
              * The `Authorization: Token` header is missing or malformed.
              * The API token value is missing from the header.
              * The token does not have sufficient permissions to write to this organization and bucket.
        "404":
          content:
            application/json:
              examples:
                resource-not-found:
                  summary: Not found error
                  value:
                    code: not found
                    message: bucket "air_sensor" not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. A requested resource was not found. The response
            body contains the requested resource type, e.g. `organization name` or
            `bucket`, and name.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineProtocolLengthError'
          description: |
            All request data was rejected and not written. InfluxDB OSS only returns this error if the [Go (golang) `ioutil.ReadAll()`](https://pkg.go.dev/io/ioutil#ReadAll) function raises an error.
        "500":
          content:
            application/json:
              examples:
                internalError:
                  summary: Internal error example
                  value:
                    code: internal error
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error.
        "503":
          description: The server is temporarily unavailable to accept writes.  The
            `Retry-After` header describes when to try the write again.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to
                delay after the response is received.
              schema:
                format: int32
                type: integer
        default:
          $ref: '#/components/responses/ServerError'
      summary: Write data
      tags:
      - Write
security:
- TokenAuthentication: []
- BasicAuthentication: []
- QuerystringAuthentication: []
servers:
- url: ""
tags:
- description: |
    Use one of the following schemes to authenticate to the InfluxDB API:
    - [Token authentication](#section/Authentication/TokenAuthentication)
    - [Basic authentication](#section/Authentication/BasicAuthentication)
    - [Querystring authentication](#section/Authentication/QuerystringAuthentication)
    <!-- ReDoc-Inject: <security-definitions> -->
  name: Authentication
  x-traitTag: true
- description: |
    See the [**API Quick Start**](https://docs.influxdata.com/influxdb/v2.0/api-guide/api_intro/) to get up and running authenticating with tokens, writing to buckets, and querying data.

    [**InfluxDB API client libraries**](https://docs.influxdata.com/influxdb/v2.0/api-guide/client-libraries/) are available for popular languages and ready to import into your application.
  name: Quick start
  x-traitTag: true
- description: |
    The InfluxDB API uses standard HTTP status codes for success and failure responses.
    The response body may include additional details. For details about a specific operation's response, see **Responses** and **Response Samples** for that operation.

    API operations may return the following HTTP status codes:

    | &nbsp;Code&nbsp; | Status                   | Description      |
    |:-----------:|:------------------------ |:--------------------- |
    | `200`       | Success                  |                       |
    | `204`       | No content               | For a `POST` request, `204` indicates that InfluxDB accepted the request and request data is valid. Asynchronous operations, such as `write`, might not have completed yet. |
    | `400`       | Bad request              | `Authorization` header is missing or malformed or the API token does not have permission for the operation. |
    | `401`       | Unauthorized             | May indicate one of the following: <li>`Authorization: Token` header is missing or malformed</li><li>API token value is missing from the header</li><li>API token does not have permission. For more information about token types and permissions, see [Manage API tokens](https://docs.influxdata.com/influxdb/v2.0/security/tokens/)</li> |
    | `404`       | Not found                | Requested resource was not found. `message` in the response body provides details about the requested resource. |
    | `413`       | Request entity too large | Request payload exceeds the size limit. |
    | `422`       | Unprocessible entity     | Request data is invalid. `code` and `message` in the response body provide details about the problem. |
    | `429`       | Too many requests        | API token is temporarily over the request quota. The `Retry-After` header describes when to try the request again. |
    | `500`       | Internal server error    |                       |
    | `503`       | Service unavailable      | Server is temporarily unavailable to process the request. The `Retry-After` header describes when to try the request again. |
  name: Response codes
  x-traitTag: true
- description: |
    Retrieve data, analyze queries, and get query suggestions.
  name: Query
- description: |
    Write time series data to buckets.
  name: Write
- description: |
    Create and manage API tokens. An **authorization** associates a list of permissions to an **organization** and provides a token for API access. To assign a token to a specific user, scope the authorization to the user ID.
  name: Authorizations
x-tagGroups:
- name: Overview
  tags:
  - Quick start
  - Authentication
  - Response codes
- name: Data I/O endpoints
  tags:
  - Write
  - Query
- name: Resource endpoints
  tags:
  - Buckets
  - Dashboards
  - Tasks
  - Resources
- name: Security and access endpoints
  tags:
  - Authorizations
  - Organizations
  - Users
- name: System information endpoints
  tags:
  - Health
  - Ping
  - Ready
  - Routes
- name: All endpoints
  tags:
  - Authorizations
  - Backup
  - Buckets
  - Cells
  - Checks
  - DBRPs
  - Dashboards
  - Delete
  - Health
  - Labels
  - Legacy Authorizations
  - NotificationEndpoints
  - NotificationRules
  - Organizations
  - Ping
  - Query
  - Ready
  - RemoteConnections
  - Replications
  - Resources
  - Restore
  - Routes
  - Rules
  - Scraper Targets
  - Secrets
  - Setup
  - Signin
  - Signout
  - Sources
  - Tasks
  - Telegraf Plugins
  - Telegrafs
  - Templates
  - Users
  - Variables
  - Write
