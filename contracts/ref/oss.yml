components:
  parameters:
    TraceSpan:
      description: OpenTracing span context
      example:
        baggage:
          key: value
        span_id: "1"
        trace_id: "1"
      in: header
      name: Zap-Trace-Span
      required: false
      schema:
        type: string
  responses:
    ServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Non 2XX error response from server.
  schemas:
    Authorization:
      properties:
        createdAt:
          format: date-time
          readOnly: true
          type: string
        description:
          description: A description of the token.
          type: string
        id:
          description: The authorization ID.
          readOnly: true
          type: string
        links:
          example:
            self: /api/v2/authorizations/1
            user: /api/v2/users/12
          properties:
            self:
              $ref: '#/components/schemas/Link'
              readOnly: true
            user:
              $ref: '#/components/schemas/Link'
              readOnly: true
          readOnly: true
          type: object
        org:
          description: |
            The organization name.
            Specifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization)
            that the token is scoped to.
          readOnly: true
          type: string
        orgID:
          description: |
            The organization ID.
            Specifies the [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization) that the authorization is scoped to.
          type: string
        status:
          default: active
          description: Status of the token. If `inactive`, requests using the token
            will be rejected.
          enum:
          - active
          - inactive
          type: string
        token:
          description: |
            The API token.
            The token value is unique to the authorization.
            [API tokens]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token) are
            used to authenticate and authorize InfluxDB API requests and `influx`
            CLI commands--after receiving the request, InfluxDB checks that the
            token is valid and that the `permissions` allow the requested action(s).
          readOnly: true
          type: string
        updatedAt:
          format: date-time
          readOnly: true
          type: string
        user:
          description: |
            The user name.
            Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) that owns the authorization.
            If the authorization is _scoped_ to a user, the user;
            otherwise, the creator of the authorization.
          readOnly: true
          type: string
        userID:
          description: The user ID. Specifies the [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user)
            that owns the authorization. If _scoped_, the user that the authorization
            is scoped to; otherwise, the creator of the authorization.
          readOnly: true
          type: string
      type: object
    AuthorizationUpdateRequest:
      properties:
        description:
          description: A description of the token.
          type: string
        status:
          default: active
          description: Status of the token. If `inactive`, requests using the token
            will be rejected.
          enum:
          - active
          - inactive
          type: string
      type: object
    Error:
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
          description: code is the machine-readable error code.
          enum:
          - internal error
          - not found
          - conflict
          - invalid
          - unprocessable entity
          - empty value
          - unavailable
          - forbidden
          - too many requests
          - unauthorized
          - method not allowed
          - request too large
          - unsupported media type
          readOnly: true
          type: string
        err:
          description: Stack of errors that occurred during processing of the request.
            Useful for debugging.
          readOnly: true
          type: string
        message:
          description: Human-readable message.
          readOnly: true
          type: string
        op:
          description: Describes the logical code operation when the error occurred.
            Useful for debugging.
          readOnly: true
          type: string
      required:
      - code
    ErrorCode:
      description: code is the machine-readable error code.
      enum:
      - internal error
      - not found
      - conflict
      - invalid
      - unprocessable entity
      - empty value
      - unavailable
      - forbidden
      - too many requests
      - unauthorized
      - method not allowed
      - request too large
      - unsupported media type
      readOnly: true
      type: string
    InfluxqlCsvResponse:
      description: CSV Response to InfluxQL Query
      example: |
        name,tags,time,test_field,test_tag test_measurement,,1603740794286107366,1,tag_value test_measurement,,1603740870053205649,2,tag_value test_measurement,,1603741221085428881,3,tag_value
      type: string
    InfluxqlJsonResponse:
      description: JSON Response to InfluxQL Query
      properties:
        results:
          items:
            properties:
              error:
                type: string
              series:
                items:
                  properties:
                    columns:
                      items:
                        type: string
                      type: array
                    name:
                      type: string
                    partial:
                      type: boolean
                    tags:
                      additionalProperties:
                        type: string
                      type: object
                    values:
                      items:
                        items: {}
                        type: array
                      type: array
                  type: object
                type: array
              statement_id:
                type: integer
            type: object
          type: array
      type: object
    LegacyAuthorizationPostRequest:
      allOf:
      - $ref: '#/components/schemas/AuthorizationUpdateRequest'
      - properties:
          orgID:
            description: The ID of the organization that the authorization is scoped
              to.
            type: string
          permissions:
            description: |
              A list of permissions that provide `read` and `write` access to organization resources.
              An authorization must contain at least one permission.
            items:
              $ref: '#/components/schemas/Permission'
            minItems: 1
            type: array
          token:
            description: A name that you provide for the authorization.
            type: string
          userID:
            description: The ID of the user that the authorization is scoped to.
            type: string
        type: object
      required:
      - orgID
      - permissions
    LineProtocolError:
      properties:
        code:
          description: Code is the machine-readable error code.
          enum:
          - internal error
          - not found
          - conflict
          - invalid
          - empty value
          - unavailable
          readOnly: true
          type: string
        err:
          description: Stack of errors that occurred during processing of the request.
            Useful for debugging.
          readOnly: true
          type: string
        line:
          description: First line in the request body that contains malformed data.
          format: int32
          readOnly: true
          type: integer
        message:
          description: Human-readable message.
          readOnly: true
          type: string
        op:
          description: Describes the logical code operation when the error occurred.
            Useful for debugging.
          readOnly: true
          type: string
      required:
      - code
    LineProtocolLengthError:
      properties:
        code:
          description: Code is the machine-readable error code.
          enum:
          - invalid
          readOnly: true
          type: string
        message:
          description: Human-readable message.
          readOnly: true
          type: string
      required:
      - code
      - message
    Link:
      description: URI of resource.
      format: uri
      readOnly: true
      type: string
    Links:
      description: |
        URI pointers for additional paged results.
      properties:
        next:
          $ref: '#/components/schemas/Link'
        prev:
          $ref: '#/components/schemas/Link'
        self:
          $ref: '#/components/schemas/Link'
      required:
      - self
      type: object
    Permission:
      properties:
        action:
          enum:
          - read
          - write
          type: string
      required:
      - action
      - resource
    Token:
      properties:
        token:
          type: string
      type: object
info:
  title: Complete InfluxDB OSS API
openapi: 3.0.0
paths:
  /api/v2/maps/mapToken:
    get:
      operationId: getMapboxToken
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Temporary token for Mapbox.
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
      summary: Get a mapbox token
  /legacy/authorizations:
    get:
      operationId: GetLegacyAuthorizations
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: |
          A user ID.
          Only returns legacy authorizations scoped to the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
        in: query
        name: userID
        schema:
          type: string
      - description: |
          A user name.
          Only returns legacy authorizations scoped to the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
        in: query
        name: user
        schema:
          type: string
      - description: |
          An organization ID.
          Only returns legacy authorizations that belong to the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
        in: query
        name: orgID
        schema:
          type: string
      - description: |
          An organization name.
          Only returns legacy authorizations that belong to the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
        in: query
        name: org
        schema:
          type: string
      - description: |
          An authorization name token.
          Only returns legacy authorizations with the specified name.
        in: query
        name: token
        schema:
          type: string
      - description: |
          An authorization ID.
          Returns the specified legacy authorization.
        in: query
        name: authID
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  authorizations:
                    items:
                      $ref: '#/components/schemas/Authorization'
                    type: array
                  links:
                    $ref: '#/components/schemas/Links'
                    readOnly: true
                type: object
          description: Success. The response body contains a list of legacy `authorizations`.
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: List all legacy authorizations
      tags:
      - Legacy Authorizations
    post:
      description: |
        Creates a legacy authorization and returns the legacy authorization.

        #### Required permissions

        - `write-users USER_ID` if you pass the `userID` property in the request body.

        *`USER_ID`* is the ID of the user that you want to scope the authorization to.
      operationId: PostLegacyAuthorizations
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegacyAuthorizationPostRequest'
        description: The legacy authorization to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: |
            Created. The legacy authorization is created.
            The response body contains the newly created legacy authorization.
        "400":
          $ref: '#/components/responses/ServerError'
          description: Invalid request
        "401":
          content:
            application/json:
              examples:
                unauthorizedWriteUsers:
                  summary: The token doesn't have the write:user permission
                  value:
                    code: unauthorized
                    message: write:users/08028e90933bf000 is unauthorized
              schema:
                properties:
                  code:
                    description: |
                      The HTTP status code description. Default is `unauthorized`.
                    enum:
                    - unauthorized
                    readOnly: true
                    type: string
                  message:
                    description: A human-readable message that may contain detail
                      about the error.
                    readOnly: true
                    type: string
          description: |
            Unauthorized.
            The API token passed doesn't have the permissions necessary for the
            request.
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Create a legacy authorization
      tags:
      - Legacy Authorizations
    servers:
    - url: /private
  /legacy/authorizations/{authID}:
    delete:
      operationId: DeleteLegacyAuthorizationsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the legacy authorization to delete.
        in: path
        name: authID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Legacy authorization deleted
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Delete a legacy authorization
      tags:
      - Legacy Authorizations
    get:
      operationId: GetLegacyAuthorizationsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the legacy authorization to get.
        in: path
        name: authID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: Legacy authorization details
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Retrieve a legacy authorization
      tags:
      - Legacy Authorizations
    patch:
      operationId: PatchLegacyAuthorizationsID
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the legacy authorization to update.
        in: path
        name: authID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationUpdateRequest'
        description: Legacy authorization to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
          description: The active or inactive legacy authorization
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Update a legacy authorization to be active or inactive
      tags:
      - Legacy Authorizations
    servers:
    - url: /private
  /legacy/authorizations/{authID}/password:
    post:
      operationId: PostLegacyAuthorizationsIDPassword
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The ID of the legacy authorization to update.
        in: path
        name: authID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
              required:
              - password
        description: New password
        required: true
      responses:
        "204":
          description: Legacy authorization password set
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Set a legacy authorization password
      tags:
      - Legacy Authorizations
    servers:
    - url: /private
  /query:
    get:
      description: Queries InfluxDB using InfluxQL.
      operationId: GetLegacyQuery
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - in: header
        name: Accept
        schema:
          default: application/json
          description: |
            Media type that the client can understand.

            **Note**: With `application/csv`, query results include [**unix timestamps**]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#unix-timestamp) instead of [RFC3339 timestamps]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#rfc3339-timestamp).
          enum:
          - application/json
          - application/csv
          - text/csv
          - application/x-msgpack
          type: string
      - description: The content encoding (usually a compression algorithm) that the
          client can understand.
        in: header
        name: Accept-Encoding
        schema:
          default: identity
          description: The content coding. Use `gzip` for compressed data or `identity`
            for unmodified, uncompressed data.
          enum:
          - gzip
          - identity
          type: string
      - in: header
        name: Content-Type
        schema:
          enum:
          - application/json
          type: string
      - description: The InfluxDB 1.x username to authenticate the request.
        in: query
        name: u
        schema:
          type: string
      - description: The InfluxDB 1.x password to authenticate the request.
        in: query
        name: p
        schema:
          type: string
      - description: |
          The database to query data from.
          This is mapped to an InfluxDB [bucket]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#bucket).
          For more information, see [Database and retention policy mapping]({{% INFLUXDB_DOCS_URL %}}/api/influxdb-1x/dbrp/).
        in: query
        name: db
        required: true
        schema:
          type: string
      - description: |
          The retention policy to query data from.
          This is mapped to an InfluxDB [bucket]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#bucket).
          For more information, see [Database and retention policy mapping]({{% INFLUXDB_DOCS_URL %}}/api/influxdb-1x/dbrp/).
        in: query
        name: rp
        schema:
          type: string
      - description: The InfluxQL query to execute. To execute multiple queries, delimit
          queries with a semicolon (`;`).
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: |
          A unix timestamp precision.
          Formats timestamps as [unix (epoch) timestamps]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#unix-timestamp) the specified precision
          instead of [RFC3339 timestamps]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#rfc3339-timestamp) with nanosecond precision.
        in: query
        name: epoch
        schema:
          enum:
          - ns
          - u
          - µ
          - ms
          - s
          - m
          - h
          type: string
      responses:
        "200":
          content:
            application/csv:
              schema:
                $ref: '#/components/schemas/InfluxqlCsvResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/InfluxqlJsonResponse'
            application/x-msgpack:
              schema:
                format: binary
                type: string
            text/csv:
              schema:
                $ref: '#/components/schemas/InfluxqlCsvResponse'
          description: Query results
          headers:
            Content-Encoding:
              description: Lists encodings (usually compression algorithms) that have
                been applied to the response payload.
              schema:
                default: identity
                description: |
                  The content coding:
                    - `gzip`: compressed data
                    - `identity`: unmodified, uncompressed data.
                enum:
                - gzip
                - identity
                type: string
            Trace-Id:
              description: The trace ID, if generated, of the request.
              schema:
                description: Trace ID of a request.
                type: string
        "429":
          description: |
            #### InfluxDB Cloud:
              - returns this error if a **read** or **write** request exceeds your
                plan's [adjustable service quotas]({{% INFLUXDB_DOCS_URL %}}/account-management/limits/#adjustable-service-quotas)
                or if a **delete** request exceeds the maximum
                [global limit]({{% INFLUXDB_DOCS_URL %}}/account-management/limits/#global-limits)
              - returns `Retry-After` header that describes when to try the write again.

            #### InfluxDB OSS:
              - doesn't return this error.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to
                delay after the response is received.
              schema:
                format: int32
                type: integer
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error processing query
      summary: Query with the 1.x compatibility API
      tags:
      - Legacy Query
  /write:
    post:
      operationId: PostLegacyWrite
      parameters:
      - $ref: '#/components/parameters/TraceSpan'
      - description: The InfluxDB 1.x username to authenticate the request.
        in: query
        name: u
        schema:
          type: string
      - description: The InfluxDB 1.x password to authenticate the request.
        in: query
        name: p
        schema:
          type: string
      - description: Bucket to write to. If none exists, InfluxDB creates a bucket
          with a default 3-day retention policy.
        in: query
        name: db
        required: true
        schema:
          type: string
      - description: Retention policy name.
        in: query
        name: rp
        schema:
          type: string
      - description: Write precision.
        in: query
        name: precision
        schema:
          type: string
      - description: When present, its value indicates to the database that compression
          is applied to the line protocol body.
        in: header
        name: Content-Encoding
        schema:
          default: identity
          description: Specifies that the line protocol in the body is encoded with
            gzip or not encoded with identity.
          enum:
          - gzip
          - identity
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: Line protocol body
        required: true
      responses:
        "204":
          description: Write data is correctly formatted and accepted for writing
            to the bucket.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineProtocolError'
          description: Line protocol poorly formed and no points were written.  Response
            can be used to determine the first malformed line in the body line-protocol.
            All data in body was rejected and not written.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Token doesn't have sufficient permissions to write to this
            organization and bucket or the organization and bucket do not exist.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No token was sent and they are required.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineProtocolLengthError'
          description: Write has been rejected because the payload is too large. Error
            message returns max size supported. All data in body was rejected and
            not written.
        "429":
          description: Token is temporarily over quota. The Retry-After header describes
            when to try the write again.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to
                delay after the response is received.
              schema:
                format: int32
                type: integer
        "503":
          description: Server is temporarily unavailable to accept writes.  The Retry-After
            header describes when to try the write again.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to
                delay after the response is received.
              schema:
                format: int32
                type: integer
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Write time series data into InfluxDB in a V1-compatible format
      tags:
      - Legacy Write
servers:
- url: ""
