openapi: 3.0.0
info:
  title: Complete InfluxDB Cloud API
servers:
- url: ""
paths:
  /api/v2/maps/mapToken:
    get:
      operationId: getMapboxToken
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: A temp token for Mapbox
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/ServerError'
  /api/v2/poc-functions:
    get:
      operationId: GetFunctions
      parameters:
      - description: The name of the organization.
        in: query
        name: org
        schema:
          type: string
      - description: The organization ID.
        in: query
        name: orgID
        schema:
          type: string
      - description: The number of functions to return
        in: query
        name: limit
        required: false
        schema:
          type: integer
      - description: Offset for pagination
        in: query
        name: offset
        required: false
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Functions'
          description: A list of functions
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: List all Functions
      tags:
      - Functions
    post:
      operationId: PostFunctions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionCreateRequest'
        description: Function to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: Function created
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Create a new function
      tags:
      - Functions
  /api/v2/poc-functions/{functionID}:
    delete:
      description: Deletes a function and all associated records
      operationId: DeleteFunctionsID
      parameters:
      - description: The ID of the function to delete.
        in: path
        name: functionID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Function deleted
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Delete a function
      tags:
      - Functions
    get:
      operationId: GetFunctionsID
      parameters:
      - description: The function ID.
        in: path
        name: functionID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: Function details
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Retrieve a function
      tags:
      - Functions
    patch:
      description: Update a function
      operationId: PatchFunctionsID
      parameters:
      - description: The function ID.
        in: path
        name: functionID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionUpdateRequest'
        description: Function update to apply
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: Updated function
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Update a function
      tags:
      - Functions
  /api/v2/poc-functions/{functionID}/invoke:
    get:
      operationId: GetFunctionsIDInvoke
      parameters:
      - in: path
        name: functionID
        required: true
        schema:
          type: string
      - explode: true
        in: query
        name: params
        schema:
          additionalProperties: true
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionHTTPResponseData'
          description: Response defined by function
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Manually invoke a function with params in query
      tags:
      - Functions
    post:
      operationId: PostFunctionsIDInvoke
      parameters:
      - in: path
        name: functionID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionInvocationParams'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionHTTPResponseData'
          description: Response defined by function
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Manually invoke a function with params in request body
      tags:
      - Functions
  /api/v2/poc-functions/{functionID}/runs:
    get:
      operationId: GetFunctionsIDRuns
      parameters:
      - description: The ID of the function to get runs for.
        in: path
        name: functionID
        required: true
        schema:
          type: string
      - description: The number of functions to return
        in: query
        name: limit
        required: false
        schema:
          type: integer
      - description: Offset for pagination
        in: query
        name: offset
        required: false
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionRuns'
          description: A list of function runs
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: List runs for a function
      tags:
      - Functions
  /api/v2/poc-functions/{functionID}/runs/{runID}:
    get:
      operationId: GetFunctionsIDRunsID
      parameters:
      - description: The function ID.
        in: path
        name: functionID
        required: true
        schema:
          type: string
      - description: The run ID.
        in: path
        name: runID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionRun'
          description: The run record
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Retrieve a single run for a function
      tags:
      - Functions
  /api/v2/poc-functions/trigger:
    post:
      operationId: PostFunctionsTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionTriggerRequest'
        description: Function to be triggered
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionTriggerResponse'
          description: Function successfully triggered
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Manually trigger a function without creating an associated function
        resource
      tags:
      - Functions
  /api/v2private/annotations:
    delete:
      operationId: deleteAnnotations
      parameters:
      - $ref: '#/components/parameters/AnnotationDeleteFilter'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: Delete annotation
      tags:
      - Annotations
    get:
      operationId: listAnnotations
      parameters:
      - $ref: '#/components/parameters/AnnotationListFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationList'
          description: Optionally filtered list of annotations
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: List annotations
      tags:
      - Annotations
    post:
      operationId: createAnnotations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationCreateList'
        description: Annotations to create
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationEventList'
          description: Annotations created
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: Create annotations
      tags:
      - Annotations
  /api/v2private/annotations/{annotationID}:
    delete:
      operationId: deleteAnnotation
      parameters:
      - description: The identifier of the annotation.
        in: path
        name: annotationID
        required: true
        schema:
          type: string
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: Delete an annotation by ID
      tags:
      - Annotations
    get:
      parameters:
      - description: The identifier of the annotation.
        in: path
        name: annotationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationEvent'
          description: The annotation details
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "404":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: Retrieve an annotation
      tags:
      - Annotations
    put:
      operationId: updateAnnotation
      parameters:
      - description: The identifier of the annotation.
        in: path
        name: annotationID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationCreate'
        description: Annotation to store
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationEvent'
          description: The updated annotation
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "404":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: Update an annotation
      tags:
      - Annotations
  /api/v2private/flags:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
          description: Pre-authentication exposed feature flags
        default:
          $ref: '#/components/responses/ServerError'
          description: unexpected error
      summary: Retrieve public/preauth feature flags
      tags:
      - Public Flags
  /api/v2private/limitevents:
    get:
      parameters:
      - description: only show events belonging to specified organization
        in: query
        name: orgID
        required: true
        schema:
          type: string
      - description: limit to only events at or after start time
        in: query
        name: start
        schema:
          format: date-time
          type: string
      - description: limit to only events before stop time
        in: query
        name: stop
        schema:
          format: date-time
          type: string
      - in: query
        name: limit
        schema:
          default: 100
          maximum: 100
          minimum: 1
          type: integer
      - in: query
        name: offset
        schema:
          minimum: 0
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitEvents'
          description: A list of limit events
        default:
          $ref: '#/components/responses/ServerError'
          description: unexpected error
      summary: List all limit events
      tags:
      - Limits
  /api/v2private/oauth/clientConfig:
    get:
      parameters:
      - description: optional parameter to redirect the user to after a successful
          login.
        in: query
        name: redirectTo
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthClientConfig'
          description: Required OAuth client variables
        default:
          $ref: '#/components/responses/ServerError'
          description: unexpected error
      summary: Retrieve required OAuth client variables
      tags:
      - OAuth
  /api/v2private/orgs/{orgID}/limits:
    get:
      parameters:
      - description: The identifier of the organization.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limit'
          description: A limit
        default:
          $ref: '#/components/responses/ServerError'
          description: unexpected error
      summary: Retrieve limits for an organization
      tags:
      - Limits
    put:
      parameters:
      - description: The identifier of the organization.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Limit'
        description: limit that will be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limit'
          description: The updated or created limit
        default:
          $ref: '#/components/responses/ServerError'
          description: unexpected error
      summary: Create or update limits for an organization
      tags:
      - Limits
  /api/v2private/orgs/{orgID}/limits/status:
    get:
      parameters:
      - description: The identifier of the organization.
        in: path
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitStatuses'
          description: Current limit status
        default:
          $ref: '#/components/responses/ServerError'
          description: unexpected error
      summary: Get current limit status for an org
      tags:
      - Limits
  /api/v2private/orgs/{orgID}/settings:
    get:
      parameters:
      - description: org to get settings for
        in: path
        name: orgID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSettings'
          description: Current settings for org
        default:
          $ref: '#/components/responses/ServerError'
          description: unexpected error
      summary: Get settings for an org
    put:
      parameters:
      - description: org to create settings for
        in: path
        name: orgID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgSettings'
        description: Org settings that will be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSettings'
          description: The updated or created settings
        default:
          $ref: '#/components/responses/ServerError'
          description: unexpected error
      summary: Create or update settings for an org
  /api/v2private/setup/user:
    post:
      description: Post an onboarding request to create a new user, organization,
        and bucket.
      operationId: PostSetupUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingRequest'
        description: Source to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingResponse'
          description: The created default user, bucket, and organization.
        default:
          $ref: '#/components/responses/ServerError'
          description: Unexpected error
      summary: Create a new user, organization, and bucket
      tags:
      - Setup
  /api/v2private/streams:
    delete:
      operationId: deleteStream
      parameters:
      - $ref: '#/components/parameters/StreamDeleteFilter'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: Delete stream
      tags:
      - Streams
    get:
      operationId: getStreams
      parameters:
      - $ref: '#/components/parameters/StreamListFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamList'
          description: Optionally filtered list of streams
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: Get streams
      tags:
      - Streams
    put:
      operationId: createUpdateStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
        description: Stream to create or update
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadStream'
          description: Stream as created/updated
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: Create or update stream
      tags:
      - Streams
  /api/v2private/streams/{streamID}:
    delete:
      operationId: deleteStreamByID
      parameters:
      - description: stream to delete
        in: path
        name: streamID
        required: true
        schema:
          type: string
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: Delete stream by ID
      tags:
      - Streams
    put:
      operationId: updateStream
      parameters:
      - description: stream to update
        in: path
        name: streamID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
        description: Stream to update
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadStream'
          description: Stream as updated
        "400":
          $ref: '#/components/responses/ServerError'
        "401":
          $ref: '#/components/responses/ServerError'
        "404":
          $ref: '#/components/responses/ServerError'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: Update stream
      tags:
      - Streams
  /api/v2private/tenants:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
        description: the parameters for the org to be created, including limits
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  orgID:
                    description: the influxDB ID of the created organization
                    type: string
                  userID:
                    description: the influxDB ID of the created IDPE User
                    type: string
                type: object
          description: The created organization and the initial bucket
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestError'
          description: The requested changes were invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedRequestError'
          description: Credentials not provided
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenRequestError'
          description: Insufficient credentials to create an organization
        default:
          $ref: '#/components/responses/ServerError'
          description: unexpected error
      summary: This is a temporary, experimental, soon to be depricated API for Quartz
components:
  parameters:
    AnnotationDeleteFilter:
      description: Annotations to delete
      in: query
      name: AnnotationDeleteFilter
      required: true
      schema:
        $ref: '#/components/schemas/AnnotationDeleteFilter'
    AnnotationListFilter:
      description: Filter for returned annotations
      in: query
      name: AnnotationListFilter
      required: false
      schema:
        $ref: '#/components/schemas/AnnotationListFilter'
    StreamDeleteFilter:
      description: Stream to delete
      in: query
      name: StreamDeleteFilter
      required: true
      schema:
        $ref: '#/components/schemas/StreamDeleteFilter'
    StreamListFilter:
      description: Filter for returned streams
      in: query
      name: StreamListFilter
      required: false
      schema:
        $ref: '#/components/schemas/StreamListFilter'
  schemas:
    Annotation:
      properties:
        endTime:
          format: date-time
          type: string
        message:
          type: string
        startTime:
          format: date-time
          type: string
        stickers:
          additionalProperties:
            type: string
          type: object
        summary:
          type: string
      type: object
    AnnotationCreate:
      allOf:
      - $ref: '#/components/schemas/Annotation'
      - properties:
          stream:
            type: string
        type: object
    AnnotationCreateList:
      items:
        $ref: '#/components/schemas/AnnotationCreate'
      type: array
    AnnotationDeleteFilter:
      properties:
        endTime:
          format: date-time
          type: string
        startTime:
          format: date-time
          type: string
        stickers:
          additionalProperties:
            type: string
          type: object
        stream:
          type: string
        streamID:
          type: string
      required:
      - stream
      - startTime
      - endTime
      type: object
    AnnotationEvent:
      allOf:
      - $ref: '#/components/schemas/Annotation'
      - properties:
          id:
            type: string
          stream:
            type: string
        type: object
    AnnotationEventList:
      items:
        $ref: '#/components/schemas/AnnotationEvent'
      type: array
    AnnotationList:
      items:
        properties:
          annotations:
            items:
              $ref: '#/components/schemas/AnnotationResponse'
            type: array
          stream:
            type: string
        type: object
      type: array
    AnnotationListFilter:
      allOf:
      - $ref: '#/components/schemas/BasicFilter'
      - properties:
          stickerIncludes:
            additionalProperties:
              type: string
            type: object
          streamIncludes:
            items:
              type: string
            type: array
        type: object
    AnnotationResponse:
      properties:
        endTime:
          format: date-time
          type: string
        id:
          type: string
        message:
          type: string
        startTime:
          format: date-time
          type: string
        stickers:
          additionalProperties:
            type: string
          type: object
        summary:
          type: string
      type: object
    BasicFilter:
      properties:
        endTime:
          format: date-time
          type: string
        startTime:
          format: date-time
          type: string
      type: object
    Error:
      properties:
        code:
          description: code is the machine-readable error code.
          enum:
          - internal error
          - not found
          - conflict
          - invalid
          - unprocessable entity
          - empty value
          - unavailable
          - forbidden
          - too many requests
          - unauthorized
          - method not allowed
          - request too large
          - unsupported media type
          readOnly: true
          type: string
        err:
          description: err is a stack of errors that occurred during processing of
            the request. Useful for debugging.
          readOnly: true
          type: string
        message:
          description: message is a human-readable message.
          readOnly: true
          type: string
        op:
          description: op describes the logical code operation during error. Useful
            for debugging.
          readOnly: true
          type: string
      required:
      - code
      - message
    ForbiddenRequestError:
      properties:
        code:
          description: returns error code 403
          enum:
          - forbidden
          readOnly: true
          type: string
        message:
          description: message is a human-readable message.
          readOnly: true
          type: string
    Function:
      properties:
        createdAt:
          format: date-time
          readOnly: true
          type: string
        description:
          type: string
        id:
          readOnly: true
          type: string
        language:
          $ref: '#/components/schemas/FunctionLanguage'
        name:
          type: string
        orgID:
          type: string
        script:
          description: script is script to be executed
          type: string
        updatedAt:
          format: date-time
          readOnly: true
          type: string
        url:
          description: invocation endpoint address
          type: string
      required:
      - name
      - orgID
      - script
    FunctionCreateRequest:
      properties:
        description:
          type: string
        language:
          $ref: '#/components/schemas/FunctionLanguage'
        name:
          type: string
        orgID:
          type: string
        script:
          description: script is script to be executed
          type: string
      required:
      - name
      - orgID
      - script
      - language
      type: object
    FunctionHTTPResponse:
      allOf:
      - $ref: '#/components/schemas/FunctionHTTPResponseNoData'
      - properties:
          data:
            $ref: '#/components/schemas/FunctionHTTPResponseData'
        type: object
      description: The full response sent to end user when a function is invoked using
        http
    FunctionHTTPResponseData:
      description: The data sent to end user when a function is invoked using http.
        User defined and dynamic
      type: object
    FunctionHTTPResponseNoData:
      description: The full response sent to end user when a function is invoked using
        http
      properties:
        dataType:
          enum:
          - json
          type: string
        headers:
          type: object
        statusCode:
          enum:
          - 200
          - 500
          - 404
          type: string
        type:
          enum:
          - http
          type: string
    FunctionInvocationParams:
      properties:
        params:
          type: object
      type: object
    FunctionLanguage:
      enum:
      - python
      - flux
      type: string
    FunctionRun:
      allOf:
      - $ref: '#/components/schemas/FunctionRunBase'
      - properties:
          response:
            $ref: '#/components/schemas/FunctionHTTPResponseNoData'
        type: object
      description: The record that is kept of a function run, does not include data
        returned to user
    FunctionRunBase:
      description: Function trigger response or function run base, response field
        varies.
      properties:
        error:
          type: string
        id:
          readOnly: true
          type: string
        logs:
          items:
            $ref: '#/components/schemas/FunctionRunLog'
          type: array
        response:
          $ref: '#/components/schemas/FunctionHTTPResponseNoData'
        startedAt:
          format: date-time
          readOnly: true
          type: string
        status:
          enum:
          - ok
          - error
          type: string
      type: object
    FunctionRunLog:
      properties:
        message:
          type: string
        severity:
          enum:
          - DEBUG
          - INFO
          type: object
        timestamp:
          format: date-time
          type: string
      type: object
    FunctionRuns:
      properties:
        runs:
          items:
            $ref: '#/components/schemas/FunctionRun'
          type: array
      type: object
    FunctionTriggerRequest:
      allOf:
      - $ref: '#/components/schemas/FunctionInvocationParams'
      - properties:
          language:
            $ref: '#/components/schemas/FunctionLanguage'
          method:
            enum:
            - GET
            - POST
            type: string
          org:
            type: string
          orgID:
            type: string
          script:
            description: script is script to be executed
            type: string
        required:
        - language
        - script
        - method
        type: object
    FunctionTriggerResponse:
      allOf:
      - $ref: '#/components/schemas/FunctionRunBase'
      - properties:
          response:
            $ref: '#/components/schemas/FunctionHTTPResponse'
        type: object
      description: The full response sent to end user when a function is invoked
    FunctionUpdateRequest:
      properties:
        description:
          type: string
        name:
          type: string
        script:
          description: script is script to be executed
          type: string
      type: object
    Functions:
      properties:
        functions:
          items:
            $ref: '#/components/schemas/Function'
          type: array
      type: object
    InvalidRequestError:
      properties:
        code:
          description: returns error code 400
          enum:
          - invalid
          readOnly: true
          type: string
        message:
          description: message is a human-readable message.
          readOnly: true
          type: string
    Limit:
      description: These are org limits similar to those configured in/by quartz.
      properties:
        bucket:
          properties:
            maxBuckets:
              type: integer
            maxRetentionDuration:
              description: Max bucket retention duration in nanoseconds. 0 is unlimited.
              type: integer
          required:
          - maxBuckets
          - maxRetentionDuration
          type: object
        check:
          properties:
            maxChecks:
              type: integer
          required:
          - maxChecks
          type: object
        dashboard:
          properties:
            maxDashboards:
              type: integer
          required:
          - maxDashboards
          type: object
        features:
          properties:
            allowDelete:
              description: allow delete predicate endpoint
              type: boolean
          type: object
        notificationEndpoint:
          properties:
            blockedNotificationEndpoints:
              description: comma separated list of notification endpoints
              example: http,pagerduty
              type: string
          required:
          - blockNotificationEndpoints
          type: object
        notificationRule:
          properties:
            blockedNotificationRules:
              description: comma separated list of notification rules
              example: http,pagerduty
              type: string
            maxNotifications:
              type: integer
          required:
          - maxNotifications
          - blockNotificationRules
          type: object
        orgID:
          type: string
        rate:
          properties:
            cardinality:
              description: Allowed organization total cardinality. 0 is unlimited.
              type: integer
            concurrentDeleteRequests:
              description: Allowed organization concurrent outstanding delete requests.
              type: integer
            concurrentReadRequests:
              description: Allowed concurrent queries. 0 is unlimited.
              type: integer
            concurrentWriteRequests:
              description: Allowed concurrent writes. 0 is unlimited.
              type: integer
            deleteRequestsPerSecond:
              description: Allowed organization delete request rate.
              type: integer
            readKBs:
              description: Query limit in kb/sec. 0 is unlimited.
              type: integer
            writeKBs:
              description: Write limit in kb/sec. 0 is unlimited.
              type: integer
          required:
          - readKBs
          - concurrentReadRequests
          - writeKBs
          - concurrentWriteRequests
          - cardinality
          type: object
        task:
          properties:
            maxTasks:
              type: integer
          required:
          - maxTasks
          type: object
      required:
      - rate
      - bucket
      - task
      - dashboard
      - check
      - notificationRule
      - notificationEndpoint
      type: object
    LimitEvent:
      properties:
        orgID:
          type: string
        timestamp:
          format: date-time
          readOnly: true
          type: string
        type:
          enum:
          - limited_quota
          - limited_write
          - limited_query
          - limited_cardinality
          type: string
      type: object
    LimitEvents:
      properties:
        events:
          items:
            $ref: '#/components/schemas/LimitEvent'
          type: array
        links:
          $ref: '#/components/schemas/Links'
      type: object
    LimitStatus:
      properties:
        status:
          enum:
          - ok
          - exceeded
          type: string
      required:
      - status
      type: object
    LimitStatuses:
      properties:
        cardinality:
          $ref: '#/components/schemas/LimitStatus'
        read:
          $ref: '#/components/schemas/LimitStatus'
        write:
          $ref: '#/components/schemas/LimitStatus'
      required:
      - read
      - write
      - cardinality
      type: object
    Link:
      description: URI of resource.
      format: uri
      readOnly: true
      type: string
    Links:
      properties:
        next:
          $ref: '#/components/schemas/Link'
        prev:
          $ref: '#/components/schemas/Link'
        self:
          $ref: '#/components/schemas/Link'
      required:
      - self
      type: object
    OAuthClientConfig:
      properties:
        clientID:
          type: string
        domain:
          format: uri
          type: string
        redirectURL:
          format: uri
          type: string
        state:
          type: string
      required:
      - clientID
      - domain
      - redirectURL
      - state
      type: object
    OnboardingRequest:
      properties:
        bucket:
          type: string
        limit:
          $ref: '#/components/schemas/Limit'
        org:
          type: string
        password:
          type: string
        retentionPeriodHrs:
          deprecated: true
          type: integer
        retentionPeriodSeconds:
          type: integer
        username:
          type: string
      required:
      - username
      - org
      - bucket
      type: object
    OnboardingResponse:
      properties:
        auth:
          allOf:
          - properties:
              description:
                description: A description of the token.
                type: string
              status:
                default: active
                description: If inactive the token is inactive and requests using
                  the token will be rejected.
                enum:
                - active
                - inactive
                type: string
          - properties:
              createdAt:
                format: date-time
                readOnly: true
                type: string
              id:
                readOnly: true
                type: string
              links:
                example:
                  self: /api/v2/authorizations/1
                  user: /api/v2/users/12
                properties:
                  self:
                    $ref: '#/components/schemas/Link'
                    readOnly: true
                  user:
                    $ref: '#/components/schemas/Link'
                    readOnly: true
                readOnly: true
                type: object
              org:
                description: Name of the org token is scoped to.
                readOnly: true
                type: string
              orgID:
                description: ID of org that authorization is scoped to.
                type: string
              permissions:
                description: List of permissions for an auth.  An auth must have at
                  least one Permission.
                items:
                  properties:
                    action:
                      enum:
                      - read
                      - write
                      type: string
                    resource:
                      properties:
                        id:
                          description: If ID is set that is a permission for a specific
                            resource. if it is not set it is a permission for all
                            resources of that resource type.
                          nullable: true
                          type: string
                        name:
                          description: Optional name of the resource if the resource
                            has a name field.
                          nullable: true
                          type: string
                        org:
                          description: Optional name of the organization of the organization
                            with orgID.
                          nullable: true
                          type: string
                        orgID:
                          description: If orgID is set that is a permission for all
                            resources owned my that org. if it is not set it is a
                            permission for all resources of that resource type.
                          nullable: true
                          type: string
                        type:
                          enum:
                          - authorizations
                          - buckets
                          - dashboards
                          - orgs
                          - tasks
                          - telegrafs
                          - users
                          - variables
                          - secrets
                          - labels
                          - views
                          - documents
                          - notificationRules
                          - notificationEndpoints
                          - checks
                          - dbrp
                          - flows
                          - annotations
                          - functions
                          type: string
                      required:
                      - type
                      type: object
                  required:
                  - action
                  - resource
                minItems: 1
                type: array
              token:
                description: Passed via the Authorization Header and Token Authentication
                  type.
                readOnly: true
                type: string
              updatedAt:
                format: date-time
                readOnly: true
                type: string
              user:
                description: Name of user that created and owns the token.
                readOnly: true
                type: string
              userID:
                description: ID of user that created and owns the token.
                readOnly: true
                type: string
            type: object
          required:
          - orgID
          - permissions
        bucket:
          properties:
            createdAt:
              format: date-time
              readOnly: true
              type: string
            description:
              type: string
            id:
              readOnly: true
              type: string
            labels:
              items:
                properties:
                  id:
                    readOnly: true
                    type: string
                  name:
                    type: string
                  orgID:
                    readOnly: true
                    type: string
                  properties:
                    additionalProperties:
                      type: string
                    description: Key/Value pairs associated with this label. Keys
                      can be removed by sending an update with an empty value.
                    example:
                      color: ffb3b3
                      description: this is a description
                    type: object
                type: object
              type: array
            links:
              example:
                labels: /api/v2/buckets/1/labels
                members: /api/v2/buckets/1/members
                org: /api/v2/orgs/2
                owners: /api/v2/buckets/1/owners
                self: /api/v2/buckets/1
                write: /api/v2/write?org=2&bucket=1
              properties:
                labels:
                  $ref: '#/components/schemas/Link'
                  description: URL to retrieve labels for this bucket
                members:
                  $ref: '#/components/schemas/Link'
                  description: URL to retrieve members that can read this bucket
                org:
                  $ref: '#/components/schemas/Link'
                  description: URL to retrieve parent organization for this bucket
                owners:
                  $ref: '#/components/schemas/Link'
                  description: URL to retrieve owners that can read and write to this
                    bucket.
                self:
                  $ref: '#/components/schemas/Link'
                  description: URL for this bucket
                write:
                  $ref: '#/components/schemas/Link'
                  description: URL to write line protocol for this bucket
              readOnly: true
              type: object
            name:
              type: string
            orgID:
              type: string
            retentionRules:
              description: Rules to expire or retain data.  No rules means data never
                expires.
              items:
                properties:
                  everySeconds:
                    description: Duration in seconds for how long data will be kept
                      in the database. 0 means infinite.
                    example: 86400
                    format: int64
                    minimum: 0
                    type: integer
                  shardGroupDurationSeconds:
                    description: Shard duration measured in seconds.
                    format: int64
                    type: integer
                  type:
                    default: expire
                    enum:
                    - expire
                    type: string
                required:
                - type
                - everySeconds
                type: object
              type: array
            rp:
              type: string
            schemaType:
              default: implicit
              enum:
              - implicit
              - explicit
              type: string
            type:
              default: user
              enum:
              - user
              - system
              readOnly: true
              type: string
            updatedAt:
              format: date-time
              readOnly: true
              type: string
          required:
          - name
          - retentionRules
        org:
          properties:
            createdAt:
              format: date-time
              readOnly: true
              type: string
            description:
              type: string
            id:
              readOnly: true
              type: string
            links:
              example:
                buckets: /api/v2/buckets?org=myorg
                dashboards: /api/v2/dashboards?org=myorg
                labels: /api/v2/orgs/1/labels
                members: /api/v2/orgs/1/members
                owners: /api/v2/orgs/1/owners
                secrets: /api/v2/orgs/1/secrets
                self: /api/v2/orgs/1
                tasks: /api/v2/tasks?org=myorg
              properties:
                buckets:
                  $ref: '#/components/schemas/Link'
                dashboards:
                  $ref: '#/components/schemas/Link'
                labels:
                  $ref: '#/components/schemas/Link'
                members:
                  $ref: '#/components/schemas/Link'
                owners:
                  $ref: '#/components/schemas/Link'
                secrets:
                  $ref: '#/components/schemas/Link'
                self:
                  $ref: '#/components/schemas/Link'
                tasks:
                  $ref: '#/components/schemas/Link'
              readOnly: true
              type: object
            name:
              type: string
            status:
              default: active
              description: If inactive the organization is inactive.
              enum:
              - active
              - inactive
              type: string
            updatedAt:
              format: date-time
              readOnly: true
              type: string
          required:
          - name
        user:
          properties:
            id:
              readOnly: true
              type: string
            links:
              example:
                self: /api/v2/users/1
              properties:
                self:
                  format: uri
                  type: string
              readOnly: true
              type: object
            name:
              type: string
            oauthID:
              type: string
            status:
              default: active
              description: If inactive the user is inactive.
              enum:
              - active
              - inactive
              type: string
          required:
          - name
      type: object
    OrgSetting:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    OrgSettings:
      properties:
        orgID:
          description: the influxDB ID of the created organization
          type: string
        settings:
          items:
            $ref: '#/components/schemas/OrgSetting'
          type: array
      type: object
    OrganizationRequest:
      properties:
        bucket:
          description: the name of the bucket to be created
          type: string
        limit:
          $ref: '#/components/schemas/Limit'
        org:
          description: the name of the organization to be added
          type: string
        retentionSeconds:
          description: length of time to retain data in seconds
          type: integer
        username:
          description: username of the Quartz user to be added in IDPE
          example: user@email.com
          type: string
      type: object
    ReadStream:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        stream:
          type: string
        updatedAt:
          format: date-time
          type: string
      type: object
    Stream:
      properties:
        description:
          type: string
        stream:
          type: string
      type: object
    StreamDeleteFilter:
      properties:
        stream:
          type: string
      type: object
    StreamList:
      items:
        $ref: '#/components/schemas/ReadStream'
      type: array
    StreamListFilter:
      allOf:
      - $ref: '#/components/schemas/BasicFilter'
      - properties:
          allStreams:
            type: boolean
          streamIncludes:
            items:
              type: string
            type: array
        type: object
    Token:
      properties:
        token:
          type: string
      type: object
    UnauthorizedRequestError:
      properties:
        code:
          description: returns error code 401
          enum:
          - unauthorized
          readOnly: true
          type: string
        message:
          description: message is a human-readable message.
          readOnly: true
          type: string
  responses:
    NoContent:
      description: No content
    ServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Non 2XX error response from server.
