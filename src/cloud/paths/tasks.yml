get:
  operationId: GetTasks
  tags:
    - Data I/O endpoints
    - Tasks
  summary: List tasks
  description: |
    Lists [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task).

    To limit which tasks are returned, pass query parameters in your request.
    If no query parameters are passed, InfluxDB returns all tasks up to the default `limit`.

    #### Related guide

    - [Process data with InfluxDB tasks]({{% INFLUXDB_DOCS_URL %}}/process-data/)
  parameters:
    - $ref: "../../common/parameters/TraceSpan.yml"
    - in: query
      name: name
      description: |
        A task name.
        Only returns [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) with the specified name.
        Different tasks may have the same name.
      schema:
        type: string
    - in: query
      name: after
      schema:
        type: string
      description: |
        A task ID.
        Only returns [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) created after the specified task.
    - in: query
      name: user
      schema:
        type: string
      description: |
        A user ID.
        Only returns [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) owned by the specified [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user).
    - in: query
      name: org
      schema:
        type: string
      description: |
        An organization name.
        Only returns [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) owned by the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
    - in: query
      name: orgID
      schema:
        type: string
      description: |
        An organization ID.
        Only returns tasks owned by the specified [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization).
    - in: query
      name: status
      schema:
        type: string
        enum:
          - active
          - inactive
      description: |
        A task status.
        Only returns [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) that have the specified status.
    - in: query
      name: limit
      schema:
        type: integer
        minimum: -1
        maximum: 500
        default: 100
      description: |
        The maximum number of [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) to return.
        Default is `100`.
        The minimum is `1` and the maximum is `500`.

        To reduce the payload size, combine _`type=basic`_ and _`limit`_ (see _Request samples_).
        For more information about the `basic` response, see the _`type`_ parameter.
      examples:
        minPaginated:
          summary: Return a maximum of 50 tasks.
          value: "50"
        all:
          summary: Return all tasks, without pagination.
          value: "-1"
    - in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of records to skip.
    - in: query
      name: sortBy
      description: |
        The sort field.
        Specifies the task property used to sort records in the list.
        Default is `name`.

        The parameter has one supported value: `name`.
      required: false
      schema:
        type: string
        enum:
          - name
    - in: query
      name: type
      description: |
        A task type.
        Specifies the level of detail for [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) in the response.
        Default is `system`.

        The default (`system`) response contains all the metadata properties for tasks.
        To reduce the response size, set the `type` parameter to `basic` (`type=basic`)
        to omit some task properties (`flux`, `createdAt`, `updatedAt`).
      required: false
      schema:
        default: ""
        type: string
        enum:
          - "basic"
          - "system"
    - in: query
      name: scriptID
      description: |
        A script ID.
        Only returns tasks that use the specified [invokable script](#tag/Invokable-Scripts).
      schema:
        type: string
  responses:
    "200":
      description: |
        Success.
        The response body contains the list of tasks.
      content:
        application/json:
          schema:
            $ref: "../schemas/Tasks.yml"
          examples:
            $ref: "../../common/responses/example-responses/GetTasksSuccessResponse.yml"
    "401":
      $ref: "../../common/responses/AuthorizationError.yml"
    "500":
      $ref: "../../common/responses/InternalServerError.yml"
    default:
      $ref: "../../common/responses/ServerError.yml"
  x-codeSamples:
    - lang: Shell
      label: "cURL: all tasks, basic output"
      source: |
        curl https://cloud2.influxdata.com/api/v2/tasks/?limit=-1&type=basic \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Token INFLUX_API_TOKEN'
post:
  operationId: PostTasks
  tags:
    - Data I/O endpoints
    - Tasks
  summary: Create a task
  description: |
    Creates a [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) and returns the task.

    Use this endpoint to create a scheduled task that runs a script.

    #### Related guides

    - [Get started with tasks]({{% INFLUXDB_DOCS_URL %}}/process-data/get-started/)
    - [Create a task]({{% INFLUXDB_DOCS_URL %}}/process-data/manage-tasks/create-task/)
    - [Common tasks]({{% INFLUXDB_DOCS_URL %}}/process-data/common-tasks/)
    - [Task configuration options]({{% INFLUXDB_DOCS_URL %}}/process-data/task-options/)
  parameters:
    - $ref: "../../common/parameters/TraceSpan.yml"
  requestBody:
    description: |
      In the request body, provide the task.

      Set one of the following properties to provide the script that the task runs:
        - `flux`
        - `scriptID`

      If you set the `scriptID` property, you can set the following properties to configure the task:
        - `cron`
        - `every`
        - `offset`
        - `scriptParameters`

      If you set the `flux` property, you must provide the `task` configuration option
      in the Flux script.

      See [task configuration options]({{% INFLUXDB_DOCS_URL %}}/process-data/task-options/)
      for detail and examples.

      #### Limitations:

      - You can't use `flux` and `scriptID` in the same task.
    required: true
    content:
      application/json:
        schema:
          $ref: "../schemas/TaskCreateRequest.yml"
        examples:
          TaskWithFlux:
            $ref: "../../common/requestBody/examples/TaskRequestExamples.yml#/TaskWithFluxRequest"
          TaskWithScriptID:
            $ref: "../requestBody/examples/TaskRequestExamples.yml#/TaskWithScriptRequest"
  responses:
    "201":
      description: Success. The response body contains a `tasks` list with the task.
      content:
        application/json:
          schema:
            $ref: "../schemas/Task.yml"
    "400":
      description: |
        Bad request.
        The response body contains detail about the error.

        #### InfluxDB Cloud

        - Returns this error if the task doesn't contain the `flux` property
          or the `scriptID` property.
        - Returns this error if the task contains `flux` _and_ `scriptID`
          properties.
      content:
        application/json:
          schema:
            $ref: "../../common/schemas/Error.yml"
          examples:
            fluxAndScriptError:
              summary: The request body can't contain both flux and scriptID
              value:
                {
                  "code": "invalid",
                  "message": "failed to decode request: can not provide both scriptID and flux"
                }
            missingFluxError:
              summary: The request body requires either a flux parameter or scriptID parameter
              value:
                {
                  "code": "invalid",
                  "message": "failed to decode request: flux required"
                }
    "401":
      $ref: "../../common/responses/AuthorizationError.yml"
    "500":
      $ref: "../../common/responses/InternalServerError.yml"
    default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "../../common/schemas/Error.yml"
