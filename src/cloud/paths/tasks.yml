get:
  operationId: GetTasks
  tags:
    - Data I/O endpoints
    - Tasks
  summary: List all tasks
  description: |
    Retrieves a list of [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task).

    To limit which tasks are returned, pass query parameters in your request.
    If no query parameters are passed, InfluxDB returns all tasks up to the default `limit`.
  parameters:
    - $ref: "../../common/parameters/TraceSpan.yml"
    - in: query
      name: name
      description: |
        A [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) name.
        Only returns tasks with the specified name.
        Different tasks may have the same name.
      schema:
        type: string
    - in: query
      name: after
      schema:
        type: string
      description: |
        A [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) ID.
        Only returns tasks created after the specified task.
    - in: query
      name: user
      schema:
        type: string
      description: |
        A [user]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#user) ID.
        Only returns tasks owned by the specified user.
    - in: query
      name: org
      schema:
        type: string
      description: |
        An [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization) name.
        Only returns tasks owned by the specified organization.
    - in: query
      name: orgID
      schema:
        type: string
      description: |
        An [organization]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#organization) ID.
        Only returns tasks owned by the specified organization.
    - in: query
      name: status
      schema:
        type: string
        enum:
          - active
          - inactive
      description: |
        A [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) status.
        Only returns tasks that have the specified status (`active` or `inactive`).
    - in: query
      name: limit
      schema:
        type: integer
        minimum: -1
        maximum: 500
        default: 100
      description: |
        The maximum number of [tasks]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) to return.
        Default is `100`.
        The minimum is `1` and the maximum is `500`.

        To reduce the payload size, combine _`type=basic`_ and _`limit`_ (see _Request samples_).
        For more information about the `basic` response, see the _`type`_ parameter.
      examples:
        minPaginated:
          summary: Return a maximum of 50 tasks.
          value: "50"
        all:
          summary: Return all tasks, without pagination.
          value: "-1"
    - in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of records to skip.
    - in: query
      name: sortBy
      description: |
        The sort field. Only `name` is supported.
        Specifies the field used to sort records in the list.
      required: false
      schema:
        type: string
        enum:
          - name
    - in: query
      name: type
      description: |
        A [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) type (`basic` or `system`).
        Default is `system`.
        Specifies the level of detail for tasks in the response.
        The default (`system`) response contains all the metadata properties for tasks.
        To reduce the response size, pass `basic` to omit some task properties (`flux`, `createdAt`, `updatedAt`).
      required: false
      schema:
        default: ""
        type: string
        enum:
          - "basic"
          - "system"
    - in: query
      name: scriptID
      description: |
        A [script](#tag/Invokable-Scripts) ID.
        Only returns tasks that use the specified invokable script.
      schema:
        type: string
  responses:
    "200":
      description: |
        Success.
        The response body contains the list of tasks.
      content:
        application/json:
          schema:
            $ref: "../schemas/Tasks.yml"
          examples:
            $ref: "../../common/responses/example-responses/GetTasksSuccessResponse.yml"
    "401":
      $ref: "../../common/responses/AuthorizationError.yml"
    "500":
      $ref: "../../common/responses/InternalServerError.yml"
    default:
      $ref: "../../common/responses/ServerError.yml"
  x-codeSamples:
    - lang: Shell
      label: "cURL: all tasks, basic output"
      source: |
        curl INFLUX_URL/api/v2/tasks/?limit=-1&type=basic \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Token INFLUX_API_TOKEN'
post:
  operationId: PostTasks
  tags:
    - Data I/O endpoints
    - Tasks
  summary: Create a task
  description: |
    Creates a [task]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#task) and returns the task.

    Use this endpoint to create a scheduled task that runs a Flux script.

    #### InfluxDB Cloud

    - You can use either `flux` or `scriptID` to provide the task script.

      - `flux`: a string of "raw" Flux that contains task options and the script--for example:

        ```json
        {
          "flux": "option task = {name: \"CPU Total 1 Hour New\", every: 1h}\
          from(bucket: \"telegraf\")
            |> range(start: -1h)
            |> filter(fn: (r) => (r._measurement == \"cpu\"))
            |> filter(fn: (r) =>\n\t\t(r._field == \"usage_system\"))
            |> filter(fn: (r) => (r.cpu == \"cpu-total\"))
            |> aggregateWindow(every: 1h, fn: max)
            |> to(bucket: \"cpu_usage_user_total_1h\", org: \"INFLUX_ORG\")",
          "status": "active",
          "description": "This task downsamples CPU data every hour"
        }
        ```

      - `scriptID`: the ID of an [invokable script](#tag/Invokable-Scripts)
        for the task to run.
        To pass task options when using `scriptID`, pass the options as
        properties in the request body--for example:

        ```json
        {
          "name": "CPU Total 1 Hour New",
          "description": "This task downsamples CPU data every hour",
          "every": "1h",
          "scriptID": "SCRIPT_ID",
          "scriptParameters":
            {
              "rangeStart": "-1h",
              "bucket": "telegraf",
              "filterField": "cpu-total"
            }
          }
        ```

    #### Limitations:

    - You can't use `flux` and `scriptID` for the same task.

    #### Related guides

    - [Get started with tasks]({{% INFLUXDB_DOCS_URL %}}/process-data/get-started/)
    - [Create a task]({{% INFLUXDB_DOCS_URL %}}/process-data/manage-tasks/create-task/)
    - [Common tasks]({{% INFLUXDB_DOCS_URL %}}/process-data/common-tasks/)
    - [Task configuration options]({{% INFLUXDB_DOCS_URL %}}/process-data/task-options/)
  parameters:
    - $ref: "../../common/parameters/TraceSpan.yml"
  requestBody:
    description: The task to create
    required: true
    content:
      application/json:
        schema:
          $ref: "../schemas/TaskCreateRequest.yml"
  responses:
    "201":
      description: Success. The response body contains a `tasks` list with the new task.
      content:
        application/json:
          schema:
            $ref: "../schemas/Task.yml"
    "400":
      description: |
        Bad request.
        The response body contains detail about the error.

        #### InfluxDB Cloud

        - Returns this error if the task doesn't contain one of _`flux`_ or _`scriptID`_.
        - Returns this error if the task contains _`flux`_ _and_ _`scriptID`_.
      content:
        application/json:
          schema:
            $ref: "../../common/schemas/Error.yml"
          examples:
            fluxAndScriptError:
              summary: The request body can't contain both flux and scriptID
              value:
                {
                  "code": "invalid",
                  "message": "failed to decode request: can not provide both scriptID and flux"
                }
            missingFluxError:
              summary: The request body requires either a flux parameter or scriptID parameter
              value:
                {
                  "code": "invalid",
                  "message": "failed to decode request: flux required"
                }
    "401":
      $ref: "../../common/responses/AuthorizationError.yml"
    "500":
      $ref: "../../common/responses/InternalServerError.yml"
    default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "../../common/schemas/Error.yml"
  x-codeSamples:
    - lang: Shell
      label: "cURL: create a Flux script task"
      source: |
        curl INFLUX_URL/api/v2/tasks \
        --header "Content-type: application/json" \
        --header "Authorization: Token INFLUX_API_TOKEN" \
        --data-binary @- << EOF
          {
            "orgID": "INFLUX_ORG_ID",
            "description": "IoT Center 30d environment average.",
            "flux": "option task = {name: \"iot-center-task-1\", every: 30m}\
                    from(bucket: \"iot_center\")\
                      |> range(start: -30d)\
                      |> filter(fn: (r) => r._measurement == \"environment\")\
                      |> aggregateWindow(every: 1h, fn: mean)"
          }
        EOF
    - lang: Shell
      label: "cURL: create a Flux script reference task"
      source: |
        curl INFLUX_URL/api/v2/tasks \
        --header "Content-type: application/json" \
        --header "Authorization: Token INFLUX_API_TOKEN" \
        --data-binary @- << EOF
          {
            "orgID": "INFLUX_ORG_ID",
            "description": "IoT Center 30d environment average.",
            "scriptID": "085138a111448000",
            "scriptParameters":
              {
                "rangeStart": "-30d",
                "bucket": "air_sensor",
                "filterField": "temperature",
                "groupColumn": "_time"
              }
          }
        EOF
